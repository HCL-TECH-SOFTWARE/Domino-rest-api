{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome to HCL Domino REST API documentation","text":"<p>HCL Domino REST API provides a secure REST API with access to HCL Domino servers and databases while running on HCL Domino and HCL Notes on Windows, Linux, and Mac. Designed to re-establish Domino as a world class, modern, standards-compliant, cloud native and enterprise-level collaboration platform, it adds contemporary REST APIs to Notes and Domino, enabling a modern programming experience with the tools of your choice. For more information, see Introducing Domino REST API.</p> <p>Click the topics in the image to learn more.</p>"},{"location":"index.html#get-started","title":"Get started","text":"<ul> <li> <p>Get a first idea of what you are dealing with by understanding how the Domino REST API works.</p> </li> <li> <p>If you want to start quickly, go to Quickstart.</p> </li> <li> <p>For installation information, see Installation and configuration.</p> </li> <li> <p>For the latest release information about HCL Domino REST API, see What's new.</p> </li> <li> <p>To know features deprecated in the current and earlier releases, see deprecated features.</p> </li> <li> <p>Having trouble running the Domino REST API? Use the troubleshooting guide.</p> </li> <li> <p>Are you coming from a Notes client with a Domino server background? You never had to deal with certificates, JSON Web Token, multiple TCP ports, OAuth, and all the fancy new terms of a shiny new web world. Read the primer to get started.</p> </li> </ul> <p>API definitions now available</p> <p>The OpenAPI definitions, rendering using ReDoc, are now available in the References. Depending on your server configuration, not all endpoints will be active.</p>"},{"location":"index.html#how-the-documentation-is-organized","title":"How the documentation is organized","text":"<p>The HCL Domino REST API documentation is based on the Di\u00e1taxis framework, which organizes documentation into the following modes to address users' documentation needs at different times and in different circumstances. Below shows an overview that guides you on where to look for needed information:</p> <p>Tutorials - Hands-on introduction to HCL Domino REST API</p> <p>How-to guides - Practical step-by-step guides for performing tasks and operation</p> <p>Topic guides - Discussion and explanation of key topics and concepts to give background information</p> <p>References - Technical references and descriptions on using HCL Domino REST API</p>"},{"location":"index.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"404.html","title":"404 - Not found","text":"<p>The HCL Domino REST API documentation site has been reorganized according to the Di\u00e1taxis framework.</p> <p>If the page you are accessing isn't showing, refer to the table for the new link to the topic you might be looking for.</p> Topic title Previous link Current link"},{"location":"howto/index.html","title":"How-to guides","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p> <p>This section intends to guide experienced users in completing key goals and tasks related to HCL Domino REST API. This section is divided into the following categories for easy reference:</p>"},{"location":"howto/index.html#installation","title":"Installation","text":"<p>Installation, deinstallation, and configuration tasks</p>"},{"location":"howto/index.html#web","title":"Web","text":"<p>Configure HTTPS and an optional nginx proxy</p>"},{"location":"howto/index.html#identity-provider-idp","title":"Identity Provider (IdP)","text":"<p>Task to use Domino as your Identity Provider (IdP) and tasks to configure external IdP to be used with Domino</p>"},{"location":"howto/index.html#production","title":"Production","text":"<p>Considerations for production deployments, security included</p>"},{"location":"howto/index.html#database","title":"Database","text":"<p>Working with databases, and enabling and configuring for REST access</p>"},{"location":"howto/index.html#management-console","title":"Management console","text":"<p>Tasks requiring access to the Management console</p>"},{"location":"howto/index.html#volt-mx","title":"Volt MX","text":"<p>Topics around the Volt MX integration of the REST API</p>"},{"location":"howto/index.html#code-examples","title":"Code examples","text":"<p>Code samples to interact with Domino REST API </p>"},{"location":"howto/IdP/index.html","title":"Identity Provider","text":"<p>This is work in progress</p> <p>We are constantly working on improving Domino REST API's functionality and documentation. You have a documentation page which is not quite ready. Feel free to feedback what you would like to see here.</p> <p>Topics to guide you in completing goals and tasks about Identity Provider in relation to Domino REST API:</p> <ul> <li> <p>Configure Domino Rest API IdP</p> </li> <li> <p>Configure Domino REST API to Use an OIDC Provider</p> </li> <li> <p>Configure Microsoft Entra ID as IdP</p> </li> <li> <p>Configure certificates</p> </li> <li> <p>Configure an identity provider</p> </li> <li> <p>Configure Keycloak</p> </li> <li> <p>Configure Domino REST API as SAML identity provider</p> </li> <li> <p>Set up External IdP for Office Round Trip Experience</p> </li> <li> <p>Set up External IdP for Admin UI login</p> </li> </ul>"},{"location":"howto/IdP/index.html#client-ids","title":"Client Ids","text":"<p>When configuring an external IdP using OIDC or OIDC-idpcat, you need to provide a clientId. It's recommended to use <code>Domino</code>, but the admins of your IdP might have other ideas. In any case, that's the clientId for the REST server. It's NOT the one for the AdminUI or the Office Forms Based Authentication (OFBA) for attachment editing. To be fully operational, you need to configure at least three clients on your IdP:</p> <ul> <li><code>Domino</code> for the server (client secret might be handeled by <code>idpcat.nsf</code>)</li> <li><code>keepadminui</code> for the Domino REST API admin client</li> <li><code>keepofba</code> for the Office document round trip experience</li> <li>One each for your custom client applications (with clientSecret for servers or PKCE for clients)</li> </ul> <p>Use the internal IdP as learning resource</p> <p>The application configuration provided by the internal IdP makes it easy to configure and retrieve client-specific JWT that have all the required fields. Test your application with that and use the defined proprties, scopes foremost, to requests the external IdP client configurations.</p>"},{"location":"howto/IdP/adminuiidp.html","title":"Set up external IdP for Admin UI IdP","text":""},{"location":"howto/IdP/adminuiidp.html#client-ids","title":"Client Ids","text":"<p>When configuring an external IdP using OIDC or OIDC-idpcat, you need to provide a clientId. It's recommended to use <code>Domino</code>, but the admins of your IdP might have other ideas. In any case, that's the clientId for the REST server. It's NOT the one for the AdminUI or the Office Forms Based Authentication (OFBA) for attachment editing. To be fully operational, you need to configure at least three clients on your IdP:</p> <ul> <li><code>Domino</code> for the server (client secret might be handeled by <code>idpcat.nsf</code>)</li> <li><code>keepadminui</code> for the Domino REST API admin client</li> <li><code>keepofba</code> for the Office document round trip experience</li> <li>One each for your custom client applications (with clientSecret for servers or PKCE for clients)</li> </ul> <p>Use the internal IdP as learning resource</p> <p>The application configuration provided by the internal IdP makes it easy to configure and retrieve client-specific JWT that have all the required fields. Test your application with that and use the defined proprties, scopes foremost, to requests the external IdP client configurations.</p>"},{"location":"howto/IdP/adminuiidp.html#about-this-task","title":"About this task","text":"<p>You can add your own IdP to use for Admin UI login. This uses a PKCE login flow.</p>"},{"location":"howto/IdP/adminuiidp.html#configuration","title":"Configuration","text":""},{"location":"howto/IdP/adminuiidp.html#set-up-external-idp","title":"Set up external IdP","text":"<p>Configure your external IdP in the configuration file. For more information, see configuring external IdP for configuring an external IdP of your choice.</p> <p>Note</p> <p>When configuring your external IdP, make sure to set <code>{{ origin }}/admin/ui/callback</code> as one of your redirect URIs.</p>"},{"location":"howto/IdP/adminuiidp.html#set-up-admin-ui-external-idp-login-configuration","title":"Set up Admin UI external IdP login configuration","text":"<p>Configure the <code>adminui</code> property in your chosen external IdP. For more information, see JWT parameters.</p>"},{"location":"howto/IdP/adminuiidp.html#admin-ui-external-idp-login","title":"Admin UI external IdP login","text":"<p>Note</p> <p>The Admin UI shows the OIDC logins and the Domino REST API login, which uses the Domino REST API IdP. To prevent the Admin UI from showing all IdP logins, set the value of the <code>AdminUIOIDCLogin</code> parameter to <code>false</code>. To disable the login with password button, set\u00a0the <code>AdminUIKeepLogin</code> parameter to <code>false</code>. For more information on how to modify the configuration, see Modify configuration parameters.</p> <p>Once configured, the Admin UI login should look like the following example image. In the example image, Keycloak is used as the external IdP.</p> <p></p> <p>Clicking Sign in with {external_idp_name} commences the authorization code flow.</p> <p>Note</p> <p>Admin UI external IdP login uses authorization code flow with PKCE.</p>"},{"location":"howto/IdP/adminuiidp.html#examples","title":"Examples","text":""},{"location":"howto/IdP/adminuiidp.html#azure","title":"Azure","text":"<p>The following is an example configuration for Azure IdP:</p> <pre><code>{\n  \"jwt\": {\n    \"AzureIdP\": {\n      \"active\": true,\n      \"providerUrl\": \"https://login.microsoftonline.com/{tenant_id}/v2.0/.well-known/openid-configuration\",\n      \"aud\": \"{client_id}\",\n      \"iss\": \"https://login.microsoftonline.com/{tenant_id}/v2.0\",\n      \"algorithm\": \"RS256\",\n      \"adminui\": {\n        \"active\": true,\n        \"client_id\": \"keepadminui\",\n        \"application_id_uri\": \"api://dominorest/\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"howto/IdP/adminuiidp.html#keycloak","title":"Keycloak","text":"<p>The following is an example configuration for Keycloak IdP:</p> <pre><code>{\n  \"jwt\": {\n    \"KeycloakIdP\": {\n      \"active\": true,\n      \"providerUrl\": \"https://{keycloak_host}/realms/{realm_name}\",\n      \"adminui\": {\n        \"active\": true,\n        \"client_id\": \"keepadminui\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"howto/IdP/configuredrapiIdP.html","title":"Configure Domino Rest API IdP","text":""},{"location":"howto/IdP/configuredrapiIdP.html#about-this-task","title":"About this task","text":"<p>Domino REST API implements an OAuth2 provider. The following is a guide for setting up and configuring Domino REST API's OAuth2 provider.</p>"},{"location":"howto/IdP/configuredrapiIdP.html#before-you-begin","title":"Before you begin","text":"<p>The <code>oauth.nsf</code> database exists in your Domino data directory. The Domino IdP uses the <code>oauth.nsf</code> to store content and refresh information.</p> <p>Note</p> <ul> <li>If you are using Domino+Domino REST API docker image, the <code>oauth.nsf</code> should already be in the image but may not be fully configured.</li> <li>If for some reason you need to create the <code>oauth.nsf</code>, see Set up oauth.nsf, and save it in your Domino data directory.</li> </ul>"},{"location":"howto/IdP/configuredrapiIdP.html#client-ids","title":"Client Ids","text":"<p>When configuring an external IdP using OIDC or OIDC-idpcat, you need to provide a clientId. It's recommended to use <code>Domino</code>, but the admins of your IdP might have other ideas. In any case, that's the clientId for the REST server. It's NOT the one for the AdminUI or the Office Forms Based Authentication (OFBA) for attachment editing. To be fully operational, you need to configure at least three clients on your IdP:</p> <ul> <li><code>Domino</code> for the server (client secret might be handeled by <code>idpcat.nsf</code>)</li> <li><code>keepadminui</code> for the Domino REST API admin client</li> <li><code>keepofba</code> for the Office document round trip experience</li> <li>One each for your custom client applications (with clientSecret for servers or PKCE for clients)</li> </ul> <p>Use the internal IdP as learning resource</p> <p>The application configuration provided by the internal IdP makes it easy to configure and retrieve client-specific JWT that have all the required fields. Test your application with that and use the defined proprties, scopes foremost, to requests the external IdP client configurations.</p>"},{"location":"howto/IdP/configuredrapiIdP.html#procedure","title":"Procedure","text":"<ol> <li> <p>Configure Domino REST API to access the <code>oauth.nsf</code>.</p> <ol> <li>Create an <code>oauth.json</code> file using a text editor.</li> <li> <p>Copy the following JSON object to the JSON file.</p> <pre><code>{\n\"oauth\": {\n   \"active\": true,\n   \"database\": \"oauth.nsf\",\n   \"url\": \"https://sample.keep.io:8880\",\n   \"authCodeExpiresIn\": 120,\n   \"accessTokenExpiresIn\": 3600,\n   \"refreshTokenExpiresIn\": 525600\n   }\n}\n</code></pre> <p>For more information, see the following table:</p> Property Description <code>active</code> Required It has a boolean value indicating if the provided token is now active. If the token is issued by this authorization server, it isn't revoked by the user, and it's not yet expired, the value should be <code>true</code>. <code>database</code> The <code>nsf</code> file where the authorization details are stored. <code>url</code> Server URL <code>authCodeExpiresIn</code> The code expiration time in seconds. <code>accessTokenExpiresIn</code> The access token expiration time in seconds. <code>refreshTokenExpiresIn</code> The refresh token expiration time in seconds. </li> <li> <p>Change the value of the <code>url</code> parameter to match your Domino REST API host.</p> <p>The indicated <code>url</code> value in the JSON object above is just an example value.</p> </li> <li> <p>(Optional) Adjust the expiration time values as needed.</p> </li> <li> <p>Save the JSON file in the <code>keepconfig.d</code> directory located in your Domino data directory.</p> <p>You need to create the <code>keepconfig.d</code> directory if not yet existing.</p> </li> <li> <p>Restart Domino REST API.</p> </li> </ol> </li> <li> <p>Add the <code>OAuthAdmin</code> role for the ACL entry.</p> <p>Be sure to thoroughly examine the ACL.</p> <ul> <li>By default, the configured access level is <code>Author</code> with the capability to create information but unable to remove it.</li> <li>All servers involved must have at least an <code>Editor</code> access level and the <code>OAuthAdmin</code> role assigned. If you DON'T have this role, you'll only see your documents or records.</li> <li> <p>Administrators requiring troubleshooting capabilities should have <code>Editor</code> access level and the <code>OAuthAdmin</code> role assigned.</p> </li> <li> <p>Enforce a consistent ACL.</p> </li> <li>Ensure the database is copied to all servers involved.</li> </ul> </li> </ol>"},{"location":"howto/IdP/configureoidc.html","title":"Configure Domino REST API to use an OIDC provider","text":""},{"location":"howto/IdP/configureoidc.html#about-this-task","title":"About this task","text":"<p>The procedure guides you on how to configure Domino REST API to use an OpenID Connect (OIDC) provider for authentication.</p>"},{"location":"howto/IdP/configureoidc.html#client-ids","title":"Client Ids","text":"<p>When configuring an external IdP using OIDC or OIDC-idpcat, you need to provide a clientId. It's recommended to use <code>Domino</code>, but the admins of your IdP might have other ideas. In any case, that's the clientId for the REST server. It's NOT the one for the AdminUI or the Office Forms Based Authentication (OFBA) for attachment editing. To be fully operational, you need to configure at least three clients on your IdP:</p> <ul> <li><code>Domino</code> for the server (client secret might be handeled by <code>idpcat.nsf</code>)</li> <li><code>keepadminui</code> for the Domino REST API admin client</li> <li><code>keepofba</code> for the Office document round trip experience</li> <li>One each for your custom client applications (with clientSecret for servers or PKCE for clients)</li> </ul> <p>Use the internal IdP as learning resource</p> <p>The application configuration provided by the internal IdP makes it easy to configure and retrieve client-specific JWT that have all the required fields. Test your application with that and use the defined proprties, scopes foremost, to requests the external IdP client configurations.</p>"},{"location":"howto/IdP/configureoidc.html#procedure","title":"Procedure","text":"<ol> <li>Create a JSON file using a text editor.</li> <li> <p>Copy the JSON object to the JSON file.</p> <pre><code>{\n  \"oidc\": {\n    \"any-name\": {\n      \"active\": true,\n      \"providerUrl\": \"https://some.keycloak.server/auth/realms/some-realm\",\n      \"clientId\": \"some-clientid\",\n      \"clientSecret\": \"some-clientsecret\",\n      \"userIdentifier\": \"dn\",\n      \"userIdentifierInLdapFormat\": true\n    }\n  }\n}\n</code></pre> </li> <li> <p>Set the values of the <code>providerUrl</code>, <code>clientId</code>, and <code>clientSecret</code> parameters to the values from your identity provider, such as Keycloak.</p> <pre><code>{\n  \"oidc\": {\n    \"any-name\": {\n      \"active\": true,\n      \"providerUrl\": \"https://some.keycloak.server/auth/realms/some-realm\",\n      \"clientId\": \"a3fe24-88dd-a003d3\",\n      \"clientSecret\": \"16072d-cf96-1ea8d9\",\n      \"userIdentifier\": \"dn\",\n      \"userIdentifierInLdapFormat\": true\n    }\n  }\n}\n</code></pre> </li> <li> <p>Save the JSON file in the <code>keepconfig.d</code> directory.</p> <p>Tip</p> <p>Use a filename for the JSON file that reveals its purpose. To learn more on how JSON files in <code>keepconfig.d</code> are processed, see Understanding configuration.</p> </li> <li> <p>Restart Domino REST API on all servers.</p> </li> </ol>"},{"location":"howto/IdP/configureoidc.html#rinse-and-repeat","title":"Rinse and repeat","text":"<ul> <li>Set up External IdP for Office Round Trip Experience</li> <li>Set up External IdP for Admin UI login</li> </ul>"},{"location":"howto/IdP/configuringAD.html","title":"Configure Microsoft Entra ID as IdP","text":""},{"location":"howto/IdP/configuringAD.html#about-this-task","title":"About this task","text":"<p>The procedures guide you on configuring Microsoft Entra ID, formerly Azure Active Directory, as an IdP. Microsoft Entra ID has its own ideas about JWT compatibility:</p> <ul> <li>The <code>aud</code> property is fixed to the ID of the application, not as commonly, the URL of the target system.</li> <li>There is no <code>scope</code> property, but instead <code>scp</code> to describe the requested scopes.</li> </ul>"},{"location":"howto/IdP/configuringAD.html#client-ids","title":"Client Ids","text":"<p>When configuring an external IdP using OIDC or OIDC-idpcat, you need to provide a clientId. It's recommended to use <code>Domino</code>, but the admins of your IdP might have other ideas. In any case, that's the clientId for the REST server. It's NOT the one for the AdminUI or the Office Forms Based Authentication (OFBA) for attachment editing. To be fully operational, you need to configure at least three clients on your IdP:</p> <ul> <li><code>Domino</code> for the server (client secret might be handeled by <code>idpcat.nsf</code>)</li> <li><code>keepadminui</code> for the Domino REST API admin client</li> <li><code>keepofba</code> for the Office document round trip experience</li> <li>One each for your custom client applications (with clientSecret for servers or PKCE for clients)</li> </ul> <p>Use the internal IdP as learning resource</p> <p>The application configuration provided by the internal IdP makes it easy to configure and retrieve client-specific JWT that have all the required fields. Test your application with that and use the defined proprties, scopes foremost, to requests the external IdP client configurations.</p>"},{"location":"howto/IdP/configuringAD.html#configuration-in-azure","title":"Configuration in Azure","text":""},{"location":"howto/IdP/configuringAD.html#register-an-application","title":"Register an application","text":"<ol> <li> <p>Navigate to the Azure Portal to login, and then select App registrations.</p> <p></p> </li> <li> <p>Select New registration.</p> <p></p> </li> <li> <p>Enter a Name, select a supported account type (in most cases Single tenant will do), enter local redirect URL (so you can develop your app), and then click Register.</p> <p></p> </li> </ol> <p>Tip</p> <p>If you aren't sure about the redirect URL, use <code>http://localhost:8080/redirect</code>. You can change this later on in Authentication in the application page.</p>"},{"location":"howto/IdP/configuringAD.html#add-credentials","title":"Add credentials","text":"<p>The next step is to add the client credentials. Your application will need the Application (client) ID and Client credentials.</p> <p></p> <ol> <li> <p>Select Certificates &amp; secrets \u2192 Client secrets \u2192 New client secret.</p> <p></p> </li> <li> <p>Add a description, select an expiration for your client secret, and then click Add.</p> <p></p> </li> <li> <p>Copy the secret's value for use in your client application code.</p> <p></p> </li> </ol> <p>Note</p> <p>The secret value is only shown once and never displayed again after you leave this page.</p>"},{"location":"howto/IdP/configuringAD.html#api-definition","title":"API definition","text":"<ol> <li>Select Expose an API.</li> <li> <p>Select Add next to the Application ID URI. The URI must start with <code>api://</code>. You can overwrite the UUID with some clear text name.</p> <p></p> </li> <li> <p>Select Add a scope.</p> </li> <li> <p>Specify the scope's attributes in the Add a scope pane.</p> <p>Ensure admins and users can consent and that the scope is set to Enabled. For more information about scopes in Domino REST API, see scopes reference and scope topic guide.</p> <p></p> </li> <li> <p>Click Add scope.</p> </li> <li> <p>Repeat the steps for adding a scope for each scope that your need to add.</p> <p></p> </li> </ol>"},{"location":"howto/IdP/configuringAD.html#configure-api-permissions","title":"Configure API permissions","text":"<ol> <li>Select API permissions. The API permissions screen, which has <code>User.Read</code> preconfigured, opens.</li> <li> <p>Click Add a permission.</p> <p></p> </li> <li> <p>Select APIs my organization uses.</p> </li> <li> <p>Start typing the name of your application, and then select it.</p> <p></p> </li> <li> <p>Under Select permissions, select the scopes you have created earlier and the click Add permissions.</p> <p></p> </li> </ol> <p>After adding permissions, you should see the selected permissions under Configured permissions.</p> <p></p>"},{"location":"howto/IdP/configuringAD.html#update-the-application-owners","title":"Update the application owners","text":"<ol> <li> <p>Under Manage, select Owners and then select Add owners.</p> <p></p> </li> <li> <p>Search for and select the user account that you want to be an owner of the application, and then click Select.</p> </li> </ol>"},{"location":"howto/IdP/configuringAD.html#adjust-authentication","title":"Adjust authentication","text":"<p>In Authentication, make sure you have localhost for local development and https-based URLs for your test, staging, and/or production systems specified. Select only Access token and make sure redirect ends with <code>/</code>.</p> <p></p>"},{"location":"howto/IdP/configuringAD.html#adjust-app-manifest","title":"Adjust app manifest","text":"<ol> <li>Under Manage page, select Manifest. A web-based manifest editor opens, allowing you to edit the manifest within the portal.</li> <li>Change the value of <code>accessTokenAcceptedVersion</code> from <code>null</code> to <code>2</code>.</li> </ol> <p>Before change:</p> <p></p> <p>After change:</p> <p></p>"},{"location":"howto/IdP/configuringAD.html#urls-to-note","title":"URLs to note","text":"<ol> <li> <p>From the app's Overview page, select Endpoints.</p> <p></p> </li> <li> <p>Take note of the following URLs.</p> <p></p> </li> </ol> <p>All URLs are retrievable by accessing the OpenID Connect metadata document, colloquially referred to as <code>.well-known</code>. These are the ones involved:</p> <ul> <li>OpenID Connect metadata document</li> <li>OAuth 2.0 authorization endpoint (v2)</li> <li>OAuth 2.0 token endpoint (v2)</li> </ul>"},{"location":"howto/IdP/configuringAD.html#configuration-in-domino-rest-api","title":"Configuration in Domino REST API","text":"<ol> <li> <p>Create a json file in the directory <code>[notesdata]/keepconfig.d</code>.</p> <p>You can choose the filename as long as you limit yourself to numbers and ASCII letters (<code>[0-9a-zA-Z]+</code>). We suggest <code>AzureAD01.json</code>, the same value you use in the json data below.</p> </li> <li> <p>Add the following content to the json file.</p> <pre><code>{\n\"jwt\": {\n   \"AzureAD01\": {\n      \"active\": true,\n      \"providerUrl\": \"https://login.microsoftonline.com/[your-tennantid-here]/v2.0/.well-known/openid-configuration\",\n      \"aud\": \"[your application id-here]\",\n      \"iss\": \"https://sts.windows.net/[your-tennantid-here]/\",\n      \"algorithm\": \"RS256\"\n   }\n}\n}\n</code></pre> <p>Remarks:</p> <ul> <li> <p>The <code>AzureAD01</code> isn't a fixed value. Pick anything that makes it clear for you. Use the value as the filename too.</p> </li> <li> <p>The <code>aud</code> parameter is the Application ID in Expose an API (the <code>id</code> parameter in the manifest, not the Application ID URI).</p> </li> <li> <p>The <code>iss</code> parameter might be different from what the <code>openid-configuration</code> reports. Compare the values. It has been noticed that the URL changed from <code>https://login.microsoftonline.com/[your-tennantid-here]/v2.0</code> to <code>https://sts.windows.net/[your-tennantid-here]/</code>, if that's so you need to specify it here.</p> </li> <li>Currently, Azure AD doesn't return the <code>alg</code> claim in the <code>jwks_uri</code>. Uou have to specify it here.</li> </ul> </li> <li> <p>Restart Domino REST API.</p> </li> </ol> <p>Azure AD / Entra ID is a moving target</p> <p>Depending on your configuration, you will need to adjust the <code>aud</code> and <code>iss</code> values in the configuration file. To determine the correct values, use the test application below to inspect what values are actually sent with the Azure access token. For <code>aud</code>, you might get the application ID and something different for <code>iss</code>. Also, the algorithm might be included somewhere. Use the test application below!</p>"},{"location":"howto/IdP/configuringAD.html#test-the-application","title":"Test the application","text":"<ol> <li> <p>Go to Downloads, and then download the <code>AzureTester.zip</code> file.</p> <p>The file contains an expressJS application and related static files (HTML/CSS/JS).</p> </li> <li> <p>Extract the zip file.</p> </li> <li> <p>Navigate to the directory and run the web server using the following command:</p> <p>NodeJS required</p> <p>You need a current NodeJS version installed.</p> <pre><code>npm install\nnode server.js\n</code></pre> <p>No production use of the code</p> <p>Do NOT use this code in production.</p> </li> <li> <p>Open the URL http://localhost:8080/ and fill in the form details. You will find most of the values in the overview page of the Azure application registration. You should see a page like this:</p> <p></p> </li> </ol> <p>Include the Application ID URI</p> <p>When you specify the scopes, you need to include the \"Include the Application ID URI\" in the test form. The URI will be stripped from the resulting JWT token. So to get <code>scp : \"$DATA MAIL demo\"</code> in the JWT, you must specify <code>api://dominorest/$DATA api://dominorest/MAIL api://dominorest/demo</code> where <code>api://dominorest</code> is whatever you specified as Application ID URI.</p> <p>Azure redirects you to the <code>/redirect</code> URL. Typically, this page would auto process, but you want to marvel at the authorization code. When you click Exchange token, the ExpressJS server exchanges the code for a JWT and returns the list of configured endpoints as example. You can't do this with the browser alone, CORS prevents it.</p> <p></p> <p>Check the results:</p> <p></p>"},{"location":"howto/IdP/configuringAD.html#troubleshooting","title":"Troubleshooting","text":"<p>A few tips to troubleshoot the setup when the goalpost has been moved:</p> <ul> <li> <p>Grab the JWT token and paste it at the JWT.io website to decode the JSON payload.</p> </li> <li> <p>If your corporate policy prohibits that, then extract the string between the two <code>.</code> from your JWT token and send it through a Base64 decoder: <code>echo [the string] | base64 --decode | jq</code>. Kindly note that <code>| jq</code> is optional.</p> </li> <li>Compare the <code>iss</code> value from the JWT token with the <code>issuer</code> value from the <code>openid-configuration</code> endpoint. If they don't match, you need to add the <code>iss</code> to the JSON configuration file you created or edited in <code>keepconfig.d</code>.</li> <li>Compare the <code>aud</code> value from the JWT token with the <code>aud</code> value of the configuration file. Adjust the configuration file if different.</li> <li>Check the <code>scp</code>, which is Microsoft's \"alternative\" to <code>scope</code>, and make sure it has the expected values matching the settings in the application configuration in the Admin UI. Adjust the scope in the DRAPI application (AdminUI) or your AzureAD IdP settings.</li> </ul>"},{"location":"howto/IdP/configuringAD.html#rinse-and-repeat","title":"Rinse and repeat","text":"<ul> <li> <p>Set up External IdP for Office Round Trip Experience</p> </li> <li> <p>Set up External IdP for Admin UI login</p> </li> </ul>"},{"location":"howto/IdP/configuringAD.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"howto/IdP/configuringCertificates.html","title":"Configure certificates","text":""},{"location":"howto/IdP/configuringCertificates.html#about-this-task","title":"About this task","text":"<p>The procedures guide you on obtaining and configuring certificates.</p> <p>Domino REST API uses certificates for:</p> <ul> <li>signing JWT Tokens when you use Domino REST API's login API - 0..1 certificate</li> <li>validating JWT Tokens issued by trusted Identity Providers (IdP) - 0..n certificates</li> <li>Securing HTTPs traffic - 0..1 certificate</li> </ul>"},{"location":"howto/IdP/configuringCertificates.html#obtain-certificates","title":"Obtain certificates","text":"<p>For HTTPS traffic, JKS, PEM, and PFX certificate formats are supported. For public and private key pairs, RSA and EC are supported. HTTPS certificates must be accepted by your browser and HTTP tool, so get valid certificates.</p> <p>To get valid certificates, use any of the following approaches:</p> <ul> <li> <p>Use Let's Encrypt with either Domino cert manager or a proxy, such as nginx.</p> </li> <li> <p>Ask your infrastructure, security or networking team (if you have one) for valid certificates.</p> </li> <li> <p>On your own risk: Create your own certificates using OpenSSL.</p> </li> </ul> <p>Note</p> <p>If you decided to create your own certificates, you need to distribute the custom root CA to your users which isn't something you want to do unless you have tooling like Bigfix in place. Better stick to official certs</p> <ul> <li>For public/private key generation (used for JWT), use the Domino REST API management API/UI and let it generate a public/private key file pair and a certificate.</li> </ul>"},{"location":"howto/IdP/configuringCertificates.html#configure-a-certificate-for-issuing-a-jwt","title":"Configure a certificate for issuing a JWT","text":"<ul> <li>Add the following JSON to a file in <code>keepconfig.d</code>. The extension must be <code>.json</code>.</li> </ul> <pre><code>{\n  \"JwtUsePubPrivKey\": true,\n  \"JwtUsePemFile\": true,\n  \"JwtIssuer\": \"The issuer\",\n  \"JwtPrivateKeyFile\": \"keepconfig.d/private.key.pem\",\n  \"JwtPublicKeyFile\": \"keepconfig.d/public.key.pem\",\n  \"JwtCertFile\": \"keepconfig.d/cert.pem\",\n  \"JwtAlgorithm\": \"RSA\"\n}\n</code></pre> <p>Info</p> <p>The JSON file is automatically created when you use the Domino REST API management API (Port 8889) to create the files.</p>"},{"location":"howto/IdP/configuringCertificates.html#configure-certificates-for-jwt-validation","title":"Configure certificates for JWT validation","text":"<p>Note</p> <p>PEM-formatted keys (RSA/EC) are supported.</p> <ol> <li>Obtain the public key from your IdP provider.</li> <li>Add the public key to a location where general users can't write to.</li> <li>Add a JSON file with the following content to <code>keepconfig.d</code>.</li> </ol> <pre><code>{\n  \"jwt\": {\n    \"my-idp\": {\n      \"active\": true,\n      \"algorithm\": \"RS256\",\n      \"keyFile\": \"10-jwt.pubkey\"\n    }\n  }\n}\n</code></pre>"},{"location":"howto/IdP/configuringCertificates.html#configure-a-certificate-for-https","title":"Configure a certificate for HTTPS","text":"<p>When configuring TLS, you can use JSON values or environment variables. You can use either of the two. When using both, the environment variable will take priority.</p> <p>Use the following entry to configure TLS for jks or pfx (set TLSType to the correct type): </p> <p><pre><code>{\n  \"TLSFile\": \"path.to.file\",\n  \"TLSPassword\": \"password-in-clear-protect-this\",\n  \"TLSType\": \"pfx\"\n}\n</code></pre> Use the following to configure TLS for pem:</p> <pre><code>{\n  \"TLSFile\": \"path.to.file\",\n  \"PEMCert\": \"path.to.crt.file\",\n  \"TLSType\": \"pem\"\n}\n</code></pre> <p>Note</p> <ul> <li><code>TLSfile</code> must point to private key, while the <code>PEMCert</code> must point to the certificate chain. </li> <li>If you won't define a password, you must set the value of <code>TLSPassword</code> to <code>\"\"</code>.</li> </ul> <ul> <li> <p>JKS: The Java Key Store. Only used by Java, follow the JKS documentation</p> </li> <li> <p>PEM: defined in RFC 1422, commonly used in http server</p> </li> <li> <p>PFX: defined in RFC 7292, the RSA provided Public-Key Cryptography Standards</p> </li> </ul> <p>Tip</p> <p>It's your choice which key you want to use. Main considerations are the assessment of your security team and the ease of acquisition of a specific key format in your organization.</p>"},{"location":"howto/IdP/configuringCertificates.html#enabling-https-using-domino-certificate-manager","title":"Enabling HTTPS using Domino Certificate Manager","text":"<p>If you are using Domino 14 or above and your certificates are stored in the Domino Certificate Manager, you may be able to enable HTTPS automatically. For more information, see Enable HTTPS using the Domino Certificate Manager.</p> <p>To learn more about Domino Certificate Manager, see Managing TLS certificates with Certificate Manager.</p>"},{"location":"howto/IdP/configuringCertificates.html#example-of-private-key-and-a-self-signed-certificate-using-openssl","title":"Example of private key and a self-signed certificate using openSSL:","text":""},{"location":"howto/IdP/configuringCertificates.html#bash-code","title":"Bash code:","text":""},{"location":"howto/IdP/configuringCertificates.html#generate-a-private-key","title":"Generate a private key","text":"<p><code>openssl genpkey -algorithm RSA -out server-key.pem</code></p>"},{"location":"howto/IdP/configuringCertificates.html#generate-a-certificate-signing-request-csr","title":"Generate a certificate signing request (CSR)","text":"<p><code>openssl req -new -key server-key.pem -out server.csr</code></p>"},{"location":"howto/IdP/configuringCertificates.html#self-sign-the-certificate","title":"Self-sign the certificate","text":"<p><code>openssl x509 -req -days 365 -in server.csr -signkey server-key.pem -out server-cert.pem</code></p>"},{"location":"howto/IdP/configuringCertificates.html#generate-ca-certificate","title":"Generate CA certificate","text":"<p><code>openssl req -new -x509 -days 365 -key server-key.pem -out ca-cert.pem</code></p> <p>The configuration for TLS for pem would look like:</p> <pre><code>{\n  \"TLSFile\": \u201cserver-key.pem\u201d,\n  \"PEMCert\": \u201cserver-cert.pem\u201d,\n  \"TLSType\": \"pem\"\n}\n</code></pre>"},{"location":"howto/IdP/configuringIdentityProvider.html","title":"Configure an identity provider","text":"<p>In its default configuration, Domino REST API uses itself as its identity provider (IdP), so it is client and IdP at the same time. This allows you to start evaluating and testing out of the box. To enable this, you need to have an HTTP password configured in Domino and good enough for internal use.</p> <p>However, for an actual deployment, you might want to configure your own IdP and authentication flow. The only IdP requirements are use of a supported algorithm for signing and a token with the expected format.</p>"},{"location":"howto/IdP/configuringIdentityProvider.html#client-ids","title":"Client Ids","text":"<p>When configuring an external IdP using OIDC or OIDC-idpcat, you need to provide a clientId. It's recommended to use <code>Domino</code>, but the admins of your IdP might have other ideas. In any case, that's the clientId for the REST server. It's NOT the one for the AdminUI or the Office Forms Based Authentication (OFBA) for attachment editing. To be fully operational, you need to configure at least three clients on your IdP:</p> <ul> <li><code>Domino</code> for the server (client secret might be handeled by <code>idpcat.nsf</code>)</li> <li><code>keepadminui</code> for the Domino REST API admin client</li> <li><code>keepofba</code> for the Office document round trip experience</li> <li>One each for your custom client applications (with clientSecret for servers or PKCE for clients)</li> </ul> <p>Use the internal IdP as learning resource</p> <p>The application configuration provided by the internal IdP makes it easy to configure and retrieve client-specific JWT that have all the required fields. Test your application with that and use the defined proprties, scopes foremost, to requests the external IdP client configurations.</p>"},{"location":"howto/IdP/configuringIdentityProvider.html#about-this-task","title":"About this task","text":"<p>The provided information guides you of configuring your own IdP and authentication flow for use in an actual deployment.</p>"},{"location":"howto/IdP/configuringIdentityProvider.html#identity-providers","title":"Identity providers","text":"<p>Domino REST API supports identity providers that can produce JWT access tokens. Some examples are:</p> <ul> <li>Microsoft Active Directory</li> <li> <p>Redhat Keycloak</p> </li> <li> <p>Tivoli Federate Identity Manager</p> </li> <li>Okta</li> <li> <p>Auth0</p> </li> <li> <p>Roll your own</p> </li> </ul> <p>Tip</p> <p>Check out the Keycloak example configuration.</p>"},{"location":"howto/IdP/configuringIdentityProvider.html#example-for-encode-jwt","title":"Example For Encode JWT","text":"<p>You can use the official JWT site to decode and inspect the encoded token.</p> <p></p> <pre><code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJUaGUgRGVtbyBXaXp6YXJkIiwic3ViIjoiQ049RG9jdG9yIE5vdGVzL0\n89UHJvamVjdEtlZXAiLCJzY29wZXMiOiJNQUlMICREQVRBIiwiaWF0IjoxNjE4NTA2MzM5LCJleHAiOjE2MTg1MDk5MzksI\nmF1ZCI6IkRvbWlubyJ9.HJC2MTu8OPT8KnsZnLWqIIc3CoPaEmzQwnygEaRjapk\n</code></pre> <p>When decoded, this translates to:</p> <p>HEADER: ALGORITHM &amp; TOKEN TYPE</p> <pre><code>{\n  \"typ\": \"JWT\",\n  \"alg\": \"HS256\"\n}\n</code></pre> <p>PAYLOAD: DATA</p> <pre><code>{\n  \"iss\": \"The Demo Wizzard\",\n  \"sub\": \"CN=Doctor Notes/O=ProjectKeep\",\n  \"scope\": \"MAIL $DATA\",\n  \"iat\": 1618506339,\n  \"exp\": 1618509939,\n  \"aud\": \"Domino\"\n}\n</code></pre> <p>wherein:</p> <ul> <li><code>iss</code> stands for Issuer and refers to the name of the IdP providing the claim.</li> <li><code>sub</code> stands for Subject and refers to the full qualified X500 expanded Notes name, which starts with <code>CN=</code>.</li> <li> <p><code>scope</code> refers to the databases and services that the user accesses. For more information, see Scopes.</p> </li> <li> <p><code>iat</code> stands for Issued at and refers to the epoch time of creation.</p> </li> <li><code>exp</code> stands for Expiry and refers to the epoch time of expiration. It must fit into <code>maxJwtDuration</code> number of minutes.</li> <li><code>aud</code> stands for Audience and MUST have a value of <code>Domino</code> (case-sensitive).</li> </ul> <p>VERIFY SIGNATURE</p> <pre><code>HMACSHA256(\n  base64UrlEncode(header) + \".\" +\n  base64UrlEncode(payload),\n\nyour-256-bit-secret\n\n) secret base64 encoded\n</code></pre>"},{"location":"howto/IdP/configuringIdentityProvider.html#add-your-own-idp","title":"Add your own IdP","text":"<p>To add an IdP:</p> <ol> <li>Create a JSON file in the <code>keepconfig.d</code> directory.</li> <li>Allow access to the public key from your IdP.</li> </ol> <p>The JSON file looks like this:</p> <pre><code>{\n  \"disableJwtExpiryCheck\": false,\n  \"jwt\": {\n    \"my-idp\": {\n      \"active\": true,\n      \"algorithm\": \"RS256\",\n      \"keyFile\": \"10-jwt.pubkey\"\n    }\n  }\n}\n</code></pre> <p>wherein:</p> <ul> <li><code>disableJwtExpiryCheck</code>: By setting the value to <code>true</code>, the enforcement of JWT expiration can be disabled. DO NOT do this on a production system (default is <code>false</code>).</li> <li><code>jwt</code>: Entry is related to JWT authorization.</li> <li><code>my-idp</code>: The name you give your IdP. It could be <code>Rumpelstielzchen</code> but needs to be unique on your server.</li> <li><code>active</code>: True/false.</li> <li><code>algorithm</code>: Currently supported: <code>RS256</code>.</li> <li><code>keyFile</code>: Path to public key file (PEM format), either relative to <code>keepconfig.d</code>or an absolute path.</li> </ul> <p>Domino REST API supports more than one IdP, distinguished by the name <code>my-idp</code> in the example. Access checking takes longer the more identity providers you configure since Domino REST API checks every provider's key until it finds a match.</p>"},{"location":"howto/IdP/configuringIdentityProvider.html#obtaining-the-public-key-directly-from-the-idp","title":"Obtaining the public key directly from the IdP","text":"<p>TO ease configuration and simplify key rollover, the public key for JWT verification can be directly obtained from the key server. You are responsible to only use trusted connections.</p> <pre><code>{\n  \"disableJwtExpiryCheck\": false,\n  \"jwt\": {\n    \"somother\": {\n      \"active\": true,\n      \"providerUrl\": \"https://someidp.your.domain\"\n    }\n  }\n</code></pre> <p>The Domino REST API will extend this URL to <code>https://someidp.your.domain/.well-known/openid-configuration</code> and check for a JSON return containing the <code>jwks_uri</code> key. When your IdP doesn't use the <code>.well-known</code> approach, such as Keycloak, you need to directly point to the key URL.</p> <p>Note</p> <p>Keycloak's <code>providerUrl</code> is different from the general IdP practice to use <code>/.well-known/openid-configuration</code>, mainly since Keycloak can handle multiple realms while the well-known approach cannot. Hence you need to use <code>/auth/realms/[RealmName]</code>.</p>"},{"location":"howto/IdP/configuringKeycloak.html","title":"Configure Keycloak","text":"<p>Keycloak is an Open Source Identity and Access Management solution sponsored by RedHat.</p> <p>Keycloak can be used to produce JWT Access Token for Domino REST API. Keycloak has many features like default configuration, user federation, identity brokering and social login. Those are topics not covered here. Consult the Keycloak Tutorial or the Keycloak documentation to learn more. This page focuses on the settings required for Domino REST API.</p>"},{"location":"howto/IdP/configuringKeycloak.html#client-ids","title":"Client Ids","text":"<p>When configuring an external IdP using OIDC or OIDC-idpcat, you need to provide a clientId. It's recommended to use <code>Domino</code>, but the admins of your IdP might have other ideas. In any case, that's the clientId for the REST server. It's NOT the one for the AdminUI or the Office Forms Based Authentication (OFBA) for attachment editing. To be fully operational, you need to configure at least three clients on your IdP:</p> <ul> <li><code>Domino</code> for the server (client secret might be handeled by <code>idpcat.nsf</code>)</li> <li><code>keepadminui</code> for the Domino REST API admin client</li> <li><code>keepofba</code> for the Office document round trip experience</li> <li>One each for your custom client applications (with clientSecret for servers or PKCE for clients)</li> </ul> <p>Use the internal IdP as learning resource</p> <p>The application configuration provided by the internal IdP makes it easy to configure and retrieve client-specific JWT that have all the required fields. Test your application with that and use the defined proprties, scopes foremost, to requests the external IdP client configurations.</p>"},{"location":"howto/IdP/configuringKeycloak.html#about-this-task","title":"About this task","text":"<p>This section describes key concepts and provides the steps required to configure Keycloak successfully for Domino REST API.</p>"},{"location":"howto/IdP/configuringKeycloak.html#keycloak-concepts","title":"Keycloak concepts","text":"<p>Only concepts relevant to Domino REST API are listed:</p> <p></p> <ul> <li>Realm: The starting point for Keycloak identity management, contains all other elements.</li> <li>Client: Each accessing application, client app, Single Page App or server app will have a client entry. The client entry contains application Id and, if required, the application secret. Furthermore it has mapper and client scopes assigned to it.</li> <li>Client Scopes: Each scope in Domino REST API will have a client scope in Keycloak, so the Keycloak admin can assign them to clients</li> <li>Mapper: Configuration entry to determine what information is available in a client and/or Client scope. Each Client has a default entry for Mappers independent from assigned Client Scopes</li> <li>Users: Standard attributes assigned to users like username, firstname, lastname, email, credentials as well as any custom attributes. Domino REST API, for example, use <code>CN</code> for the Domino style name.</li> </ul>"},{"location":"howto/IdP/configuringKeycloak.html#procedure","title":"Procedure","text":"<p>In this example, you will learn and create a realm, a user, client scopes, client and client scope mappers inside the Keycloak app.</p> <p>Note</p> <p>The screenshots were captured using Keycloak version 25.0.</p> <ol> <li>Login to Keycloak.</li> <li> <p>Create a realm.</p> <ol> <li> <p>Click the Keycloak dropdown menu at the top left corner, and then click Create Realm.</p> <p></p> </li> <li> <p>Fill in the Realm Name. For example Ameca.</p> </li> <li> <p>Click Create.</p> <p></p> </li> </ol> </li> <li> <p>Configure realm settings.</p> <ol> <li>Click Realm settings.</li> <li> <p>Fill in the fields applicable to your project. Mandatory fields are those fields with red asterisk (*).</p> <p>Display name: <code>Humanoid Robots</code>.</p> <p>HTML Display Name: <code>&lt;h1&gt; Humanoid Robots &lt;/h1&gt;</code></p> </li> <li> <p>Click Save.</p> <p></p> </li> <li> <p>Click User Profile tab.</p> </li> <li> <p>Create an attribute.</p> <p>Creating an attribute is optional. <code>CN</code> is used here to store the Domino style name, such as <code>CN=John Doe/O=Mauraders</code>.</p> <ol> <li>Click Create Attribute.</li> <li> <p>Fill in the fields applicable to your project. Mandatory fields are marked with with red asterisk *.</p> </li> <li> <p>Fill in the Attribute name. For example <code>CN</code></p> </li> <li> <p>Fill in the Display Name. For example <code>Domino common name</code></p> </li> <li> <p>Set Required field toggle to <code>On</code> position.</p> </li> <li> <p>Under Permission section, select the User checkbox for the Who can view? option.</p> </li> <li> <p>Click Create.</p> <p></p> </li> </ol> </li> </ol> </li> <li> <p>Add a user.</p> <ol> <li> <p>Click Users.</p> </li> <li> <p>Click Create new user, if there are no existing users. Otherwise, click Add user, if there are existing users.</p> <p></p> </li> <li> <p>Fill in the mandatory fields as minimum requirements to save. You can see here the user profile attribute you created on the Realm Settings. For example, Domino common name. For a direct access grant you must have first name, last name and eMail, even if they're not marked mandatory.</p> <p>Fill in the following:</p> <p>Username: <code>harrychen</code>.</p> <p>Email: <code>harrychen@ameca.org</code></p> <p>First name: <code>Harry</code></p> <p>Last Name: <code>Chen</code></p> <p>Domino common name: <code>CN=Harry Chen/O=Ameca</code></p> </li> <li> <p>Click Create. The user has been created.</p> <p></p> </li> <li> <p>On your user details, for example user <code>harrychen</code>, click the Credential tab.</p> <p>You need configure User credentials. For this example username and password are used, but it could be a social or federated login. Check Keycloak for details.</p> <ol> <li> <p>Click Set password.</p> <p></p> </li> <li> <p>Fill in the Password and New password confirmation with same phrases.</p> </li> <li>Set Display on consent screen toggle to <code>off</code> position.</li> <li> <p>Click Save.</p> <p></p> </li> </ol> </li> </ol> </li> <li> <p>Click Client scopes.</p> <p>Each Domino REST API scope in Domino, that you want to make accessible in Keycloak, will need a client scope in Keycloak. This includes all named scopes (the lowercase ones), and the special scopes like <code>$DATA</code> or <code>MAIL</code>.</p> <p>Click Create client scope. Creating a client scope doesn't automatically expose it, for that, assign it to one or more clients. In this example, create a client scope named <code>demo</code>.</p> <p></p> <ol> <li>Fill in the client scope name. For example, <code>demo</code>.</li> <li>Fill in Description. For example <code>demo for all demo</code>.</li> <li>Set Display on consent screen toggle to <code>On</code> position.</li> <li>Set Include in token scope toggle to <code>On</code> position.</li> <li>Click Save.</li> </ol> <p></p> <p>The configuration so far will identify a user presenting the access token to Domino REST API, but not yet provide any access. You need to specify what scopes this application will be allowed to access. You can use one or more (lowercase) scopes or some of the special scopes MAIL, $DATA or $DECRYPT. Multiple scopes are separated using a space.</p> <p>Create another specific client scope, like $DATA.</p> <p></p> <ol> <li>Fill in the client scope name. For example, <code>$DATA</code>.</li> <li>Fill in Description. For example <code>all data for database</code>.</li> <li>Set Display on consent screen toggle to <code>On</code> position.</li> <li>Set Include in token scope toggle to <code>On</code> position.</li> <li>Click Save.</li> </ol> <p></p> </li> <li> <p>Create a client.</p> <ol> <li> <p>Click Clients, and then click Create client.</p> <p></p> </li> <li> <p>On the General Setting section, fill in the following fields, and the click Next.</p> <p>Client ID: <code>thespian</code>.</p> <p>Name: <code>thespian</code>.</p> <p>Description: <code>ameca's client</code></p> <p></p> </li> <li> <p>On the Capability config section, turn <code>off</code> the Client Authentication and click Next. When it's ON, the OIDC type is set to confidential access type. When it's OFF, it's set to public access type. Confidential is used when an application server, using client_id and client_secret accesses Domino REST API, while public access is for situations where you can't have a client secret like a single page app or a mobile app accessing the API directly,</p> <p></p> </li> <li> <p>On Login Settings section, click Save.</p> <p></p> </li> </ol> </li> <li> <p>On the saved client's ID, for example thespian, click Clients scopes tab.</p> </li> <li> <p>Click the thespian-dedicated. This is the client's dedicated scope once the client is created. It is used to hold mappers that are independent from scopes, like user attributes.</p> <p></p> </li> <li> <p>Click Configure new mapper or if there are existing mappers, click Add mappers \u2192 by Configuration. You need to add few mappers inside the dedicated client scope.</p> <p>In this example, you need to have 2 Audience mappers and 1 User Atrribute, inside the thespian-dedicated client scope.</p> <p></p> <p>Mapper-1 as Audience mapper</p> <ol> <li>Click Audience mapping in the list.</li> <li>Fill in the name, for example <code>Domino</code>.</li> <li>Fill in the Included Custom Audience, for example <code>Domino</code>.</li> <li>Set Add to access token toggle to <code>On</code> position.</li> <li> <p>Click Save.</p> <p></p> </li> </ol> <p>Mapper-2 as Audience mapper</p> <ol> <li>Click Audience mapping in the list.</li> <li>Fill in the name, for example <code>dummy</code>.</li> <li>Fill in the Included Custom Audience, for example <code>https://dummy.restapiexample.com/</code>.</li> <li>Set Add to access token toggle to <code>On</code> position.</li> <li> <p>Click Save.</p> <p></p> </li> </ol> <p>Mapper-3 as User Attribute mapper</p> <ol> <li>Click the User Attribute mapping in the list.</li> <li>Fill in the mapper name, for example <code>DominoNameAttr</code>.</li> <li>Fill in the User Attribute, as <code>CN</code>.</li> <li>Fill in the Token Claim Name as <code>CN</code>.</li> <li>Choose <code>String</code>from the dropdown menu of Claim JSON Type.</li> <li>Set Add to access token toggle to <code>On</code> position.</li> <li> <p>Click Save.</p> <p></p> </li> </ol> </li> <li> <p>Click the Client details.</p> <p></p> <ol> <li> <p>Set Assign Type of all scopes to Optional, except your <code>email</code> scope.</p> </li> <li> <p>Click the Add client scope.</p> <p></p> </li> <li> <p>Check the name of the client scopes you would like to add on your thespian client scope, for example <code>demo</code> and <code>$DATA</code>, and click Add and choose Default option.</p> <p></p> </li> <li> <p>Click Client Scope \u2192 Evaluate tab.</p> </li> <li>Fill in or select applicable Users.</li> <li> <p>Click Generated access token.</p> <p></p> </li> </ol> </li> </ol>"},{"location":"howto/IdP/configuringKeycloak.html#spa-applications","title":"SPA applications","text":"<p>An SPA (Single Page App) or a mobile client can't keep a client secret. For those, the use of Proof Key for Code Exchange (PKCE) (defined in RFC 7636) is recommended (read this intro for details). The only difference in Keycloak is to toggle <code>off</code> the Client Authentication.</p> <p></p> <p>Important</p> <p>It's SECURITY, so learn about Keycloak!</p>"},{"location":"howto/IdP/configuringKeycloak.html#configure-the-domino-rest-api","title":"Configure the Domino REST API","text":"<p>You can find the full explanation here. For the short version:</p> <ul> <li>Create a JSON file in <code>keepconfig.d</code> to contain the Keycloak related information.</li> <li>Restart the Domino REST API.</li> </ul> <pre><code>{\n  \"jwt\": {\n    \"Ameca\": {\n      \"providerUrl\": \"https://ameca.keycloak.yours/auth/realms/Ameca\"\n    }\n  }\n}\n</code></pre> <p>where:</p> key explanation jwt Indicates that the config belongs to JWT Ameca The sample Keycloak realm name. It must be unique in the jwt key. Replace it with your chosen realm providerUrl Points to Keycloak's endpoint with the public key. Note that the last segment is the realm name. The string is case sensitive <p>Note</p> <p>Keycloak's <code>providerUrl</code> is different from the general IdP practise to use <code>/.well-known/openid-configuration</code>, mainly since Keycloak can handle multiple realms, the well-known approach can't handle. Hence you need ro use <code>/auth/realms/[RealmName]</code></p>"},{"location":"howto/IdP/configuringKeycloak.html#expected-result","title":"Expected result","text":""},{"location":"howto/IdP/configuringKeycloak.html#test-application-specific-scopes-result-in-postman","title":"Test Application specific scopes result in Postman","text":""},{"location":"howto/IdP/configuringKeycloak.html#before-you-begin","title":"Before you begin","text":"<ul> <li>Configured Postman</li> <li>configured Keycloak</li> </ul>"},{"location":"howto/IdP/configuringKeycloak.html#procedure_1","title":"Procedure","text":"<ol> <li> <p>Modify the token endpoint of via POST with this <code>{{ server }}/realms/{{ realm }}/protocol/openid-connect/token</code></p> </li> <li> <p>server: Your Keycloak server.</p> </li> <li> <p>realm: Your realm name, for example Ameca.</p> </li> <li> <p>In the <code>Body</code>, provide the <code>client_id</code>, <code>client_secret</code>, <code>grant_type</code>, <code>user_name</code> and <code>password</code> from your Keycloak.</p> </li> <li>Click Send.</li> </ol> <p>The result must have an access token, which must be tested int jwt to return the same result in Keycloak.</p> <p></p> <p>JWT</p> <p>You can use the official JWT site to decode and inspect the encoded token. Copy the access token from Postman and paste it inside the Encoded box.</p> <p>When decoded, this translates to:</p> <p>HEADER: ALGORITHM &amp; TOKEN TYPE</p> <pre><code>{\n  \"alg\": \"RS256\",\n  \"typ\": \"JWT\",\n  \"kid\": \"dtzYxf0a22BPo_M4A72PAJS8cAHUjFDFGKVqmzpu3po\"\n}\n</code></pre> <p>PAYLOAD: DATA</p> <pre><code>{\n  \"exp\": 1719281929,\n  \"iat\": 1719281629,\n  \"jti\": \"e708dfd3-8218-450b-a98e-00e23af649ff\",\n  \"iss\": \"http://localhost:8080/realms/Ameca\",\n  \"aud\": [\"Domino\", \"https://dummy.restapiexample.com/\"],\n  \"typ\": \"Bearer\",\n  \"azp\": \"thespian\",\n  \"sid\": \"1dbc900a-c490-47ef-a242-67be3a1aa250\",\n  \"scope\": \"$DATA email demo\",\n  \"email_verified\": true,\n  \"CN\": \"CN=Harry Chen/O=Ameca\",\n  \"email\": \"harrychen@ameca.org\"\n}\n</code></pre> <p>which has the same result in the Keycloak generated access token.</p> <p></p>"},{"location":"howto/IdP/keepsaml.html","title":"Configure Domino REST API as SAML identity provider","text":"<p>To be able to access encrypted resources, like emails or confidential documents in application databases, Domino REST API needs to be configured as a SAML identity provider.</p> <p>There are two scenarios:</p> <ul> <li>Domino REST API is the only identity provider (This feature is subject to a later code drop).</li> <li>Domino REST API is an additional identity provider (This feature is subject to a later code drop).</li> </ul>"},{"location":"howto/IdP/keepsaml.html#about-this-task","title":"About this task","text":"<p>As SAML is already available for you, the procedure guides you on adding Domino REST API as an Identity Provider and setting up websites to use an ID Vault via SAML.</p> <p>The procedure guides you on configuring</p>"},{"location":"howto/IdP/keepsaml.html#procedure","title":"Procedure","text":"<ol> <li> <p>Open Domino Administrator. Go to Current Server Document and open Configuration tab. Make sure Load Internet configurations from Server\\Internet Sites documents is enabled. Save and close.</p> <p></p> </li> <li> <p>From the left panel, select Web and then select Internet Sites. Click on Add Internet Site tab and select Web from the menu.</p> <p></p> <p>Now enter the following under Basics:</p> <ul> <li>Organization Name (For example: Domino REST API)</li> <li>Host names or addresses: Add your hostname.</li> <li>Domino servers that host this site: Add your server name.</li> </ul> <p></p> <p>Under Domino Web Engine tab, set Session authentication to SAML.</p> <p></p> <p>Under Security tab, for TCP Authentication, disable Anonymous.</p> <p></p> <p>Save and close.</p> </li> <li> <p>Create an idpcat.nsf file using idpcat.ntf template. To do that, click File, go to Application and select New. In the New Application pop up, fill in the following details:</p> <ul> <li>Server: Select your server from the dropdown.</li> <li>Title: Give title as idpcat.</li> <li>Template: Click on advanced template and select IdP catalog template.</li> </ul> <p></p> <p>Click OK. Now try to open the Idpconfig. To do that press ctrl+o, enter the name of the current server and file name as \u201cidpcat.nsf\u201d. Click Open.</p> <p></p> <p>Click Add IdP Config.   Under the Basics tab, add the following:</p> <ul> <li>Host names or addresses mapped to this site: Add your host name.</li> <li>Service provider ID: Add your server URL.</li> <li>Single sign-on service URL: https://keycloak.quattro.rocks/auth/realms/hcllabs/protocol/saml</li> </ul> <p>You should have descriptor.xml file on your machine. Import it here using Import XML file.</p> <p></p> <p>Under Client Settings tab, set the following:</p> <ul> <li>Enable Windows single sign-on: Yes</li> <li>Enforce TLS: No</li> </ul> <p></p> <p>Under Certificate Management tab, click Company name. You should see Create SP Certificate button.</p> <p></p> <p>Click Create SP Certificate. You will be prompted for Company name. Give a unique name. Also set the below field:   Domino URL: Add your service URL.</p> <p>Click on Export SP XML and save <code>ServiceProvider.xml</code> for further use.</p> <p></p> <p>Save and close.</p> </li> <li> <p>Create ID Vault. Open Domino Administrator and expand ID Vaults on right hand side navigator.</p> <p></p> <p>Click on Create.... On the dialog that comes up, click on Next.</p> <p></p> <p>On the next screen, add ID vault name and click Next.</p> <p></p> <p>On the next screen, set your password and hit Next.</p> <p></p> <p>On the next screen, select the Vault server.</p> <p></p> <p>Add or remove administrators who can access vault.</p> <p></p> <p>You can also add or remove organizations.</p> <p></p> <p>You can specify who is authorized to reset passwords.</p> <p></p> <p>Click on Next and select Create a new policy assigned to specific people or groups.</p> <p></p> <p>You can add or remove people who can add or edit ID vault policy settings.</p> <p></p> <p>Set the hint for Forgotten Password Help.</p> <p></p> <p>Now by clicking on Create Vault, the vault will be created.</p> </li> </ol> <p>You now need to set up your ID Vault.    Open your vault NSF (for example: <code>IBMID_VAULT\\testsaml.nsf</code>). Click Open by selecting the file.</p> <p>Navigate to Configuration tab, edit document and add the host address in Web federated login approved IDP configurations.</p>"},{"location":"howto/IdP/roundtripidp.html","title":"Set up external IdP for Office Round Trip Experience","text":""},{"location":"howto/IdP/roundtripidp.html#client-ids","title":"Client Ids","text":"<p>When configuring an external IdP using OIDC or OIDC-idpcat, you need to provide a clientId. It's recommended to use <code>Domino</code>, but the admins of your IdP might have other ideas. In any case, that's the clientId for the REST server. It's NOT the one for the AdminUI or the Office Forms Based Authentication (OFBA) for attachment editing. To be fully operational, you need to configure at least three clients on your IdP:</p> <ul> <li><code>Domino</code> for the server (client secret might be handeled by <code>idpcat.nsf</code>)</li> <li><code>keepadminui</code> for the Domino REST API admin client</li> <li><code>keepofba</code> for the Office document round trip experience</li> <li>One each for your custom client applications (with clientSecret for servers or PKCE for clients)</li> </ul> <p>Use the internal IdP as learning resource</p> <p>The application configuration provided by the internal IdP makes it easy to configure and retrieve client-specific JWT that have all the required fields. Test your application with that and use the defined proprties, scopes foremost, to requests the external IdP client configurations.</p>"},{"location":"howto/IdP/roundtripidp.html#about-this-task","title":"About this task","text":"<p>Aside from the default Domino REST API login page, you can also use your configured external IdP for Office Round Trip Experience log in.</p>"},{"location":"howto/IdP/roundtripidp.html#configuration","title":"Configuration","text":""},{"location":"howto/IdP/roundtripidp.html#set-up-external-idp","title":"Set up external IdP","text":"<p>Configure your external IdP in the configuration file. For more information, see configuring external IdP for configuring an external IdP of your choice.</p> <p>Note</p> <p>When configuring your external IdP, make sure to set <code>{{ origin }}/api/webdav-v1/login/callback</code> as one of your redirect URIs.</p>"},{"location":"howto/IdP/roundtripidp.html#set-up-ofba-configuration","title":"Set up OFBA configuration","text":"<p>Configure the <code>ofba</code> property in your chosen external IdP. For more information, see JWT parameters.</p>"},{"location":"howto/IdP/roundtripidp.html#ofba-log-in","title":"OFBA log in","text":"<p>Once configured, the login UI for OFBA should look like the following example image. In the example image, Keycloak is used as the external IdP.</p> <p></p> <p>Clicking Sign in with {external_idp_name} commences the authorization code flow.</p> <p>Note</p> <p>Office Round Trip Experience external IdP login uses authorization code flow with PKCE.</p>"},{"location":"howto/IdP/roundtripidp.html#examples","title":"Examples","text":""},{"location":"howto/IdP/roundtripidp.html#azure","title":"Azure","text":"<p>The following is an example configuration for Azure IdP:</p> <pre><code>{\n  \"jwt\": {\n    \"AzureIdP\": {\n      \"active\": true,\n      \"providerUrl\": \"https://login.microsoftonline.com/{tenant_id}/v2.0/.well-known/openid-configuration\",\n      \"aud\": \"{client_id}\",\n      \"iss\": \"https://login.microsoftonline.com/{tenant_id}/v2.0\",\n      \"algorithm\": \"RS256\",\n      \"ofba\": {\n        \"active\": true,\n        \"client_id\": \"{client_id}\",\n        \"application_id_uri\": \"api://dominorest/\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"howto/IdP/roundtripidp.html#keycloak","title":"Keycloak","text":"<p>The following is an example configuration for Keycloak IdP:</p> <pre><code>{\n  \"jwt\": {\n    \"KeycloakIdP\": {\n      \"active\": true,\n      \"providerUrl\": \"https://{keycloak_host}/realms/{realm_name}\",\n      \"ofba\": {\n        \"active\": true,\n        \"client_id\": \"{client_id}\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"howto/VoltMX/index.html","title":"Volt MX","text":"<p>This is work in progress</p> <p>We are constantly working on improving Domino REST API's functionality and documentation. You have a documentation page which is not quite ready. Feel free to feedback what you would like to see here.</p> <p>This section intends to guide you in completing key goals and tasks about Domino REST API in relation to Volt MX. For more information on Volt MX, see the Volt MX documentation.</p> <ul> <li> <p>Configure Domino REST API IdP with Volt MX Foundry Identity Service</p> </li> <li> <p>Set up oauth.nsf</p> </li> </ul>"},{"location":"howto/VoltMX/configuring-keep-idplite-with-identity-service.html","title":"Configure Domino REST API IdP with Volt MX Foundry Identity Service","text":""},{"location":"howto/VoltMX/configuring-keep-idplite-with-identity-service.html#about-this-task","title":"About this task","text":"<p>Domino REST API implements what essentially amounts to an OAuth2 Provider DominoIDP and Volt MX Foundry implements an Integration Service adapter for OAuth2 providers. The following is a guide for creating a Foundry Identity Service using Domino REST API's OAuth provider.</p>"},{"location":"howto/VoltMX/configuring-keep-idplite-with-identity-service.html#before-you-begin","title":"Before you begin","text":"<p>You must first set up the Domino Rest API IdP.</p>"},{"location":"howto/VoltMX/configuring-keep-idplite-with-identity-service.html#create-foundry-identity-service","title":"Create Foundry Identity Service","text":"<p>Some things to note when creating an identity service in Volt MX Foundry using Domino REST API IdP (also refer to the screenshot below):</p> <ol> <li> <p>Create a new Identity Service in the Foundry browser console by filling in the fields:</p> <ul> <li>Type of identity = OAuth 2.0</li> <li>Grant Type = Authorization Code</li> <li>Authorize Endpoint = <code>[your Domino REST API API server]/oauth/authorization</code></li> <li>Token Endpoint = <code>[your Domino REST API API server]/oauth/token</code></li> <li>IMPORTANT - make sure to select Form Param under Advanced. </li> <li>Take note of the Callback URL.</li> </ul> <p>Pause here for a moment (don't save yet), and complete the steps for setting up Domino REST API application and database.</p> <ul> <li>Scope = database <code>name</code> (API Name) for the database added in the next step; if more than one database, you should be able to enter a list of database names; check Domino REST API documentation to see how the names are delimited (perhaps a comma or space, but to Domino REST API it simple, just enter one db name if uncertain about how to specify multiple).</li> <li>Client ID = <code>App id</code> from the application created in the next section below.</li> <li>Client Secret = Obtained when you first create the application (next section).</li> </ul> </li> <li> <p>Now you can Save.</p> </li> </ol> <p></p>"},{"location":"howto/VoltMX/configuring-keep-idplite-with-identity-service.html#set-up-domino-rest-api-application-and-database","title":"Set up Domino REST API application and database","text":"<p>From the Domino REST API Admin browser client:</p> <ol> <li>Add a database, and note its name (API name, when you create the DB in Domino REST API).</li> <li>Create an application, and note its client id, and client secret.</li> </ol> <p>Note</p> <p>When you create the application, you'll need the callback URL defined earlier.</p> <p></p> <p>The App ID (Client ID) is available any time you view a created application. The secret is shown only when the secret is created the first time. If you forget the secret, generate a new one by clicking the circular arrow as indicated in the following image:</p> <p></p>"},{"location":"howto/VoltMX/setupoauthnsf.html","title":"Set up oauth.nsf","text":""},{"location":"howto/VoltMX/setupoauthnsf.html#about-this-task","title":"About this task","text":"<p>The procedure guides you on creating and setting up an <code>oauth.nsf</code> from a template.</p>"},{"location":"howto/VoltMX/setupoauthnsf.html#procedure","title":"Procedure","text":"<p>To create oauth.nsf from a template</p> <ol> <li>Start the Notes Client.</li> <li> <p>Go to File &gt; Application &gt; New or press Ctrl+N.</p> <ol> <li>Select a target server.</li> <li>Set the filename to <code>oauth.nsf</code>.</li> <li>Set the title as you deem fit.</li> <li>Select <code>KeepOauth.ntf</code> as the application template.</li> </ol> </li> <li> <p>Assign the role <code>[OAuthAdmin]</code> to the server and your administrative user or user group. We suggest <code>[LocalKeepAdmins]</code> using your Notes Client. </p> </li> <li>Make sure there is an access control list (ACL) entry of the type <code>server</code> that has <code>Manager</code> access and <code>OAuthAdmin</code> role. Make sure to select the checkbox corresponding to <code>OAuthAdmin</code>.</li> </ol> <p></p>"},{"location":"howto/VoltMX/setupoauthnsf.html#additional-details","title":"Additional details","text":"<p>If you don't have the ability to connect a Notes Client to your Domino server:</p> <ol> <li>Add the <code>oauth.nsf</code> to your list of Domino REST API databases.</li> <li>Use postman or curl to add the <code>OAuthAdmin</code> role. See the following example, but note that headers are removed for clarity:</li> </ol> <pre><code>curl --location --request PUT 'http://yourkeepserver.io:8880/api/admin-v1/acl/entries/CN%3Dyourkeepserver%2FO%3Dyourorg?dataSource=oauth.nsf' \\\n--data-raw '{\n    \"name\": \"CN=yourkeepserver/O=yourorg\",\n    \"level\": \"MANAGER\",\n    \"roles\": [\"OAuthAdmin\"],\n    \"type\": \"SERVER\",\n    \"flags\": [\"NODELETE\"]\n}'\n</code></pre> <p>Note</p> <p>The part after <code>/entries/</code> and before <code>?dataSource</code> in the URL in the example must be URL encoded.</p>"},{"location":"howto/codesamples/index.html","title":"Code examples","text":"<p>The Domino REST API can be called by any http library in any language following these simple steps:</p> <ol> <li> <p>Obtain a valid JWT Access Token from your configured Identity provider. Out of the box, that would be your REST enabled Domino server using a <code>POST</code> request with JSON <code>username</code> and <code>password</code> as body to the URL <code>/api/v1/auth</code>. In the resulting JSON, the <code>bearer</code> is your JWT Access Token.</p> </li> <li> <p>Pick the operation you want to complete from the OpenAPI spec and provide the bearer in the <code>Authorization</code> header as <code>Bearer [insert bearer here]</code>. You could do a pre-check if the bearer is still valid.</p> </li> </ol>"},{"location":"howto/codesamples/index.html#sample-applications","title":"Sample applications","text":"<p>Look at the implemented source code to see a working implementation</p> Mentioned Source Language Walkthrough Lab 06 Source NodeJS (OAuth) Walkthrough Lab 07 Source JavaScript (Browser) Walkthrough Lab 08 Source Java The landing page use <code>view source</code> JavaScript <p>Read more details in the sub-pages (menu on the left).</p>"},{"location":"howto/codesamples/index.html#on-postman-usage","title":"On Postman usage","text":"<p>Postman offers to handle authentication for a user, which is \"just\" a shiny UI covering what goes into the <code>Authorization</code> header. For our sample collection, we took a different approach following the 2 steps outlined above. We use a Postman environment to capture the bearer in a test:</p> <ol> <li> <p>Have an environment and set the collection to <code>No Auth</code>.</p> <p></p> </li> <li> <p>Have a login action that pulls username/password from the environment (you have to add them there).</p> <p></p> </li> <li> <p>Use the Tests tab to capture the Bearer.</p> <p></p> <p>This simplifies operation. running the login action won't require manual copy &amp; paste bearer information anymore</p> </li> <li> <p>In all operations, set the <code>Authorization</code> header to <code>Bearer {{ AUTH_KEY }}</code>.</p> <p></p> </li> </ol>"},{"location":"howto/codesamples/index.html#postman-provides-code","title":"Postman provides code","text":"<p>Activating the code panel &lt;/&gt; provides over 30 variations in various programming languages, including shell scripting (curl / powershell), how to code a given call.</p> <p></p>"},{"location":"howto/codesamples/index.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"howto/codesamples/javascript.html","title":"JavaScript","text":"<p>Sample code to interact with the Domino REST API in JavaScript. No additional libraries have been harmed.</p> <p>Know your runtime</p> <p>The <code>fetch</code> API is ubiquitous in browsers, but available only in current versions of server side JavaScript environments like NodeJS (so check your documentation).</p> <p>We will look at three functions that can give you a head start.</p>"},{"location":"howto/codesamples/javascript.html#url-collection","title":"URL collection","text":"<p>Instead of sprinkling URLs across the JS functions, use global objects to abstract them away:</p> <pre><code>const urls = {\n  login: '/api/v1/auth',\n  list: '/api/v1/query?dataSource=approvals&amp;action=execute'\n};\n</code></pre> <p>You want to adjust the list to your needs.</p>"},{"location":"howto/codesamples/javascript.html#login-function","title":"Login function","text":"<p>The function returns the bearer or throws an error.</p> <pre><code>const login = async (user, pwd) =&gt; {\n  try {\n    const response = await fetch(urls.login, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ username: user, password: pwd })\n    });\n    const jBody = await response.json();\n    if (jBody.bearer) {\n      return jBody.bearer;\n    }\n    throw new Error('No bearer returned');\n  } catch (err) {\n    console.err(err);\n    throw err;\n  }\n};\n</code></pre>"},{"location":"howto/codesamples/javascript.html#calling-an-api","title":"Calling an API","text":"<p>In this example, you call the query endpoint and return the JSON when successful.</p> <pre><code>const loadApprovals = async (bearer, status) =&gt; {\n  const query = {\n    query: `form = 'equipment' and status = '${status}'`,\n    viewRefresh: true,\n    noViews: false\n  };\n\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${bearer}`\n    },\n    body: JSON.stringify(query)\n  };\n\n  try {\n    const response = await fetch(urls.list, options);\n    if (response.status != 200) {\n      throw new Error(\n        `Query returned failure status ${response.status}: ${response.statusText}`\n      );\n    }\n    const jBody = await response.json();\n    // Add additional checks here\n    return jBody;\n  } catch (err) {\n    console.error(err);\n    throw err;\n  }\n};\n</code></pre>"},{"location":"howto/codesamples/javascript.html#processing-list-results","title":"Processing list results","text":"<p>The Domino REST API uses chunked returns (RFC9112) for anything that returns an array and thus could return a lot of data. Instead of calling <code>await response.json()</code>, we use the http stream API. Browsers implement that API in native code for speedy processing. A fetch request returns a readable stream that can be processed using a TransformStream (a stream that is both readable and writable) to then be consumed by a writeable stream. There are a few steps involved:</p> <p></p> <p>All of these steps get tied together using the <code>pipeThrough</code> method calls. Lets look at it step by step:</p>"},{"location":"howto/codesamples/javascript.html#byte-to-string","title":"Byte to String","text":"<p>The first part \"Byte to String\" is build-in using a <code>TextDecoderStream</code>. As a result, we get a stream of characters and we now chop into parts.</p>"},{"location":"howto/codesamples/javascript.html#string-to-lines","title":"String to lines","text":"<p>String to lines is our first <code>TransformStream</code>. An instance needs to implement two methods:</p> <ul> <li><code>transform(imcoming, controlle)</code> reads incoming data and eventually call the controller's <code>enqueue(output)</code> method 0:n times</li> <li><code>flush(controller)</code> called for cleanup</li> </ul> <p>In our case, the incoming character stream is chopped into lines.</p> <pre><code>/* Chops arriving chunks along new lines,\n    takes into account that a chunk might end middle of line */\nconst splitStream = () =&gt; {\n  const splitOn = '\\n';\n  let buffer = '';\n  return new TransformStream({\n    transform(chunk, controller) {\n      buffer += chunk;\n      const parts = buffer.split(splitOn);\n      parts.slice(0, -1).forEach((part) =&gt; controller.enqueue(part));\n      buffer = parts[parts.length - 1];\n    },\n    flush(controller) {\n      if (buffer) controller.enqueue(buffer);\n    }\n  });\n};\n</code></pre>"},{"location":"howto/codesamples/javascript.html#string-to-json","title":"String to JSON","text":"<p>We chop of the leading <code>[</code> and trailing <code>]</code> and user <code>JSON.parse()</code>. In production code, you could pack the parsing in a try/catch block.</p> <pre><code>/* Parses JSON if row looks like JSON (with eventual comma at end of line) */\nconst parseJSON = () =&gt; {\n  return new TransformStream({\n    transform(chunk, controller) {\n      // IGONRES THE [ and ]\n      if (chunk.endsWith(',')) {\n        controller.enqueue(JSON.parse(chunk.slice(0, -1)));\n      } else if (chunk.endsWith('}')) {\n        controller.enqueue(JSON.parse(part));\n      }\n    }\n  });\n};\n</code></pre>"},{"location":"howto/codesamples/javascript.html#json-to-html","title":"JSON to HTML","text":"<p>This depends very much on your intended output, a table, cards, graphics etc. For our example, we create table rows. You could use a more sophisticated approach using parameters to drive the table shape, your JS skills will help.</p> <pre><code>const rowMaker = () =&gt; {\n  return new TransformStream({\n    transform(json, controller) {\n      const row = document.createElement('tr');\n      const col1 = document.createElement('td');\n      col1.innerText = json.name ?? 'n/a';\n      const col2 = document.createElement('td');\n      col2.innerText = json.age ?? 'unknown';\n      row.appendChild(col1);\n      row.appendChild(col2);\n      controller.enqueue(row));\n    },\n    flush(controller) {\n      // No action here\n    }\n  });\n};\n</code></pre>"},{"location":"howto/codesamples/javascript.html#update-the-ui","title":"Update the UI","text":"<p>We use a <code>WritableStream</code> to update the UI.</p> <pre><code>const updateUI = (parent) =&gt; {\n  return new WritableStream({\n    write(child, controller) {\n      parent.appendChild(child);\n    }\n  });\n};\n</code></pre>"},{"location":"howto/codesamples/javascript.html#putting-it-all-together","title":"Putting it all together","text":"<p>With the object instances in place, we can stick the pipe together to execute the flow</p> <pre><code>const insertPoint = document.getElementById('resultTableBody');\nawait httpResponse = fetch(url, options);\nawait httpResponse.body\n  .pipeThrough(new TextDecoderStream())\n  .pipeThrough(splitStream())\n  .pipeThrough(parseJSON())\n  .pipeThrough(rowMaker())\n  .pipeTo(updateUI(insertPoint));\n</code></pre> <p>based on this article.</p>"},{"location":"howto/codesamples/javascript.html#considerations","title":"Considerations","text":"<ul> <li> <p>Once you retrieve the bearer, you need to keep it somewhere. A simple, but not very secure option is to save it into <code>window.bearer</code>.</p> </li> <li> <p>Advantage: goes away when window closes</p> </li> <li> <p>Challenge: can be read from elsewhere unless your CSP is tightly managed</p> <p>A common way is to use local storage, which also needs to be handled carefully.</p> </li> <li> <p>Tighten your CSP and please only HTTPS.</p> </li> <li>Besides extracting the bearer, you could grab the expiry time and create a function that first validates the token's lifespan before making a call.</li> </ul>"},{"location":"howto/codesamples/js_sdk.html","title":"JavaScript SDK samples","text":"<p>To reduce the amount of boilerplate code you need to write, there's a NodeJS SDK  available.</p>"},{"location":"howto/database/index.html","title":"Database","text":"<p>This is work in progress</p> <p>We are constantly working on improving Domino REST API's functionality and documentation. You have a documentation page which is not quite ready. Feel free to feedback what you would like to see here.</p> <p>Topics to guide you in completing database-related goals and tasks in relation to Domino REST API:</p> <ul> <li> <p>Edit database schema JSON</p> </li> <li> <p>Edit database view of a schema</p> </li> <li> <p>Enable a database</p> </li> <li> <p>Enable excluded database files and directories</p> </li> <li> <p>Export database schema as JSON file</p> </li> <li> <p>Use external names in schema definitions</p> </li> <li> <p>Adjust number of retrieved entries when pulling in view data</p> </li> </ul>"},{"location":"howto/database/editsourcejson.html","title":"Edit database schema JSON","text":""},{"location":"howto/database/editsourcejson.html#about-this-task","title":"About this task","text":"<p>The procedures guide you in editing the database schema JSON in the Tree View mode and Text view mode in the Source tab under Schema Management so you can:</p> <ul> <li>add a new JSON object to the database schema</li> <li>add a JSON object to an existing JSON object</li> <li>edit the value and data type of JSON object</li> <li>delete a JSON object from the database schema</li> <li>duplicate a JSON object</li> </ul>"},{"location":"howto/database/editsourcejson.html#before-you-begin","title":"Before you begin","text":"<ul> <li>You have selected a schema on the Schema Management page.</li> <li>You have selected Source from the menu bar and is in the Tree View mode.  </li> </ul>"},{"location":"howto/database/editsourcejson.html#tree-view-procedures","title":"Tree View procedures","text":""},{"location":"howto/database/editsourcejson.html#to-add-a-json-object-to-the-database-schema","title":"To add a JSON object to the database schema","text":"<ol> <li> <p>Hover over any JSON object and then click the down arrow icon to open the context menu.</p> <p></p> <p>Tip</p> <p>You can also right-click in the value of the JSON object to open the context menu. This option isn't applicable for JSON objects whose data type is Object or Array. </p> </li> <li> <p>Select Add. </p> </li> <li> <p>Enter a Key, select a Type, and then enter a Value.</p> <p></p> <p>Note</p> <ul> <li>The available value Types are String, Boolean, Number, Array, and Object.</li> <li>If you are adding an Array or an Object, you must enter a key-value pair in the Value text box.</li> <li> <p>The entered value is validated according to the selected type. If the value doesn't match the expected format for that type, the Value field is highlighted in red. An error message appears, guiding you to follow the correct format and providing an example for clarification.</p> <p>The following images show examples of correct and incorrect entered values.</p> <p></p> <p></p> </li> </ul> </li> <li> <p>Click Insert. The added JSON object is placed at the end of the list. </p> </li> <li> <p>Click the Save icon to save the changes. </p> <p></p> </li> </ol>"},{"location":"howto/database/editsourcejson.html#to-add-a-json-object-to-an-existing-json-object","title":"To add a JSON object to an existing JSON object","text":"<p>Note</p> <p>You can only add a new JSON object to existing JSON object whose data type is either an Object or an Array. </p> <ol> <li> <p>Hover over the object you want to add a new object to and then click the down arrow icon to open the context menu.</p> </li> <li> <p>Select Add. </p> </li> <li> <p>Enter a Key, select a Type, and then enter a Value.</p> <p>Note</p> <ul> <li>If you are adding an Array or an Object, you must enter a key-value pair in the Value text box.</li> <li>The entered value is validated according to the selected type. If the value doesn't match the expected format for that type, the Value field is highlighted in red. An error message appears, guiding you to follow the correct format and providing an example for clarification.</li> </ul> </li> <li> <p>Click Insert. The added JSON object is placed at the end of the list of JSON objects. </p> </li> <li> <p>Click the Save icon to save the changes.</p> </li> </ol>"},{"location":"howto/database/editsourcejson.html#to-update-a-json-object","title":"To update a JSON object","text":"<p>Note</p> <p>You can only update JSON objects whose data type isn't Object or Array.</p> <ol> <li> <p>Hover over any JSON object and then click the down arrow icon to open the context menu.</p> <p>Tip</p> <p>You can also right-click in the value of the JSON object to open the context menu.</p> </li> <li> <p>Select Edit. </p> </li> <li> <p>Update the Key, Type, and Value as required.</p> </li> <li> <p>Click Insert. </p> </li> <li> <p>Click the Save icon to save the changes.</p> </li> </ol>"},{"location":"howto/database/editsourcejson.html#to-delete-a-json-object-from-the-database-schema","title":"To delete a JSON object from the database schema","text":"<ol> <li> <p>Hover over the JSON object that you want to delete and then click the down arrow icon to open the context menu.   </p> </li> <li> <p>Select Remove. </p> </li> <li> <p>Click the Save icon to save the changes.</p> </li> </ol>"},{"location":"howto/database/editsourcejson.html#to-duplicate-a-json-object","title":"To duplicate a JSON object","text":"<p>Note</p> <p>You can only duplicate JSON objects whose data type is either an Object or an Array.</p> <ol> <li> <p>Hover over any JSON object and then click the down arrow icon to open the context menu.</p> </li> <li> <p>Select Duplicate. The duplicated JSON object is placed at the end of the list.</p> </li> <li> <p>Click the Save icon to save the changes.</p> </li> </ol>"},{"location":"howto/database/editsourcejson.html#text-view-procedure","title":"Text View procedure","text":"<p>With the implementation of the Monaco Editor to the Text View mode on the Source tab, you can now edit the database schema JSON just like using a normal text editor.</p> <p>As an example, you can edit a value of a key. As shown in the images, the name of a view is changed from <code>Customers</code> to <code>Customer1</code>.</p> Before editingAfter editing <p></p> <p></p> <p>You can also enter additional data. As shown in the images, the following are added to <code>agents</code>:</p> <pre><code>{\n   \"name\": \"Fix Body\",\n   \"alias\": [],\n   \"unid\": \"3F8E64B529DA6CF848258435004A37CC\"\n  }\n</code></pre> Before editingAfter editing <p></p> <p></p> <p>Tip</p> <ul> <li>Make sure to click the Save icon, and then select Yes in the Save changes dialog to save your changes.</li> <li>Make sure to follow the correct syntax when adding data.  </li> </ul>"},{"location":"howto/database/editviewcolumn.html","title":"Edit database view of a schema","text":""},{"location":"howto/database/editviewcolumn.html#about-this-task","title":"About this task","text":"<p>The procedures guide you in editing a database view of a schema so you can:</p> <ul> <li>select the columns you want to include in the view </li> <li>edit the external name of each selected column</li> <li>reset an edited view to its initial state</li> </ul>"},{"location":"howto/database/editviewcolumn.html#before-you-begin","title":"Before you begin","text":"<p>The view should be in Active status. For more information, see Activate a view.</p>"},{"location":"howto/database/editviewcolumn.html#procedures","title":"Procedures","text":""},{"location":"howto/database/editviewcolumn.html#to-edit-a-view","title":"To edit a view","text":"<ol> <li>Log in to the Domino REST API Admin UI and click Database Management - REST API.</li> <li>Select a schema on the Schema Management page.</li> <li>Click Database Views from the menu bar. </li> <li>Click the pencil icon corresponding to the name of the view you want to edit. The Edit (view name) Columns page opens. </li> <li> <p>From the left pane, select the columns that you want to include in the view. The names of the selected columns should appear in the right pane under Column Name. </p> <p>Tip</p> <ul> <li>The order in which you select the names of the columns corresponds to the order of the columns.</li> <li>Click Add All if you want to add all the columns. </li> <li>To delete a selected column, click the corresponding trash icon. </li> </ul> <p></p> </li> <li> <p>(Optional) Set the external name of a selected column by entering a name in the corresponding text field under External Name.</p> <p>Note</p> <p>The text field under External Name corresponding to a selected column shows the column name, the column title, or the set external name of the column in a read-only format. </p> </li> <li> <p>Click Save. A notification informs you that the schema has been successfully updated.   </p> </li> </ol>"},{"location":"howto/database/editviewcolumn.html#expected-result","title":"Expected result","text":"<ul> <li>The view now only shows the columns that you have selected. </li> <li>On the Database Views tab, the edited view is shown in bold font as shown in the example image. Hovering over the question mark icon beside the edited view displays a statement that a change has been made in the view.  </li> </ul>"},{"location":"howto/database/editviewcolumn.html#to-reset-an-edited-view","title":"To reset an edited view","text":"<ol> <li>Log in to the Domino REST API Admin UI and click Database Management - REST API.</li> <li>On the Schema Management page, select a schema.</li> <li>Click Database Views from the menu bar. </li> <li>Click the pencil icon corresponding to the name of an edited view you want to reset. The Edit (view name) Columns page opens. </li> <li>Click Reset. A confirmation dialog appears.</li> <li>Click Yes. A notification informs you that the schema has been successfully updated.</li> </ol>"},{"location":"howto/database/editviewcolumn.html#expected-result_1","title":"Expected result","text":"<p>The view is reset to its initial state showing all its columns.</p>"},{"location":"howto/database/enablingadb.html","title":"Enable a database","text":"<p>The Domino REST API doesn't expose any database to HTTP(S) by default. Enabling a database for REST access requires some configuration first:</p> <p></p> <ol> <li> <p>Create a Domino REST API Schema in the NSF database to be enabled. A database can have one or more Domino REST API schemas for different access needs. A Domino REST API schema is stored as JSON file in the database's design file resources.</p> <p></p> <p></p> <p>Most people will use Schema and Scope Management UI, also known as the AdminUI, to modify the schema. This can also be done through the API.</p> <p>A brave developer could use Domino designer to create or update the schema. If you manually modify your schema make sure to refresh the schema cache, see Domino REST API task for details.</p> </li> <li> <p>Link a schema to a scope The scope configuration is stored in the <code>KeepConfig.nsf</code> database. This separation of <code>scope</code> and <code>schema</code> means multiple scopes can link to a single schema. You use the scope name when performing all CRUD operations, it's the value to the query param <code>dataSource</code>. You can create the scope using the API or the AdminUI.</p> </li> <li> <p>Optional Create an OAuth application When you use Domino REST API as your IdP, you can create one or more OAuth applications that can access one or more of the defined scopes.</p> </li> </ol>"},{"location":"howto/database/enablingadb.html#the-domino-rest-api-schema","title":"The Domino REST API Schema","text":"<p>The schema defines what views, folders, document, and agents can be accessed through the Domino REST API. Access to documents is controlled by accessing their <code>Form</code> item and use the value to lookup access definitions, called <code>Mode</code> in Domino REST API's lingo that define the item names and properties accessible read- or writable.</p> <p>Since the exact terminology is long winded and colloquially often no distinction is made between document/item and form/field, the short version is that the Domino REST API schema controls access to forms and fields.</p> <p></p> <p>While the AdminUI helps to generate a Domino REST API schema from an existing form, there no technical need for a form to be present, other than the possibility to open the Notes document in a Notes client too. Creating such a Schema requires direct post to the API.</p>"},{"location":"howto/database/enablingadb.html#schema-components","title":"Schema components","text":"<p>Tip</p> <p>Refer to the OpenAPI specification running on your server. It's the complete reference guide to the APIs available to your deployed version of the Domino REST API.</p> <p>The high level entry contains a few properties and the collection of forms, views, and agents made available:</p> <p></p> Entry Description schemaName internal name, matches the JSON filename in Domino design description visible in AdminUI nsfPath path to nsf relative to data directory iconName name of the icon (fixed set) used in the UI. Alternative <code>icon</code> can contain a Base64 svg isActive Can the API be used now requireRevisionToUpdate Measure to prevent overwrite conflicts allowDecryption When also the user has the permission, decrypt documents formulaEngine domino (current only option) openAccess true - allow access when user has $DATA scope, false: require exact scope allowCode Run supplied external code dqlAccess allow DQL queries dqlFormula Domino formula with @True/@False result to restrict use of DQL query access views collection of available views agents collection of available agents forms collection of available forms formAliases defined aliases to avoid duplicate definitions"},{"location":"howto/database/enablingadb.html#views","title":"Views","text":"<p>An array of entries describing name, alias(es), if any and UNID of the view design element. Views will show all columns contained.</p> <p></p>"},{"location":"howto/database/enablingadb.html#agents","title":"Agents","text":"<p>An array of agent names that can be called from the REST endpoint. The API doesn't check if the agent is suitable for being called individually, it's the developers responsibility to ensure this.</p>"},{"location":"howto/database/enablingadb.html#forms-and-mode","title":"Forms and Mode","text":"<p>The form array has Form entries with 2 elements:</p> <ul> <li>formName: Ideally the value stored in \"<code>Form</code>\" items. Alias resolution provided by <code>formAliases</code> element</li> <li>formModes: Named schema for a form defining fields and access conditions. A form needs at least one FormMode to make documents available on Domino REST API. There are three mode names with special meaning:</li> <li>default : The first (and last) formMode in a Domino REST API schema</li> <li>odata : The mode used when accessing Domino REST API's OData endpoints</li> <li>dql : The mode used when executing a DQL query</li> </ul> <p></p> Entry Description modeName lowercase letters, used in URL addressing fields Array of KeepFields defining field properties (see below) readAccessFormula Domino formula that needs to compute to @True/@False to determine if this mode is available for read access writeAccessFormula Domino formula that needs to compute to @True/@False to determine if this mode is available for write access deleteAccessFormula Domino formula that needs to compute to @True/@False to determine if this mode is available for delete access required Array of field names that must be provided on creation or update. Following the JSON schema specification here"},{"location":"howto/database/enablingadb.html#access-formulas","title":"Access formulas","text":"<p>The availability of access formulas follows typical Notes development pattern where actions are rendered based on Formula conditions (a.k.a HideWhen formula). Typically, those formula include references to the user name, role, or group membership and item values like <code>Status</code> or <code>Approver</code></p>"},{"location":"howto/database/enablingadb.html#domino-rest-api-fields","title":"Domino REST API Fields","text":"<p>We follow the ideas proposed by JSON schema with the intention to support most of the constrains available there at some point in time.</p> <p></p> Entry Description name Field name mapping to item name type Type as permitted by JSON items when type = <code>array</code>, entry with type/format for array entries format data format as specified in JSON schema with the addition of Notes specific <code>names</code>, <code>authors</code>, <code>readers</code> readyOnly* Field value can be read, but not written writeOnly* Field value can be written, but not read * only one can be set true at a time fieldGroup allows to group a set of multi values into records"},{"location":"howto/database/enablingadb.html#fieldgroups","title":"FieldGroups","text":"<p>A typical Notes construct are documents containing a group of multi value fields, where values with the same index position form a record. On the REST API that's an odd construction. A document might get returned like this:</p> <p></p> <p>By assigning the fields <code>Name</code>, <code>age</code> and <code>fruit</code> the fieldGroup <code>LostBoys</code>, Domino REST API will render them as records in an JSON Object. We opted for an object to ease processing and addressing since arrays might not have a guarantee of sequence. The result looks like this:</p> <p></p>"},{"location":"howto/database/enablingadb.html#form-aliases","title":"Form aliases","text":"<p>The form aliases object allows to specify additional values in the form item to be mapped to the form configuration in the schema. The AdminUI will use form alias information extracted from the database design, but the API isn't bound to these settings</p>"},{"location":"howto/database/enablingadb.html#sample-schema","title":"Sample Schema","text":""},{"location":"howto/database/enablingadb.html#enabling-a-database-via-schema-and-scope","title":"Enabling a database via Schema and Scope","text":"<p>Follow the tutorial for instructions on how to do this using AdminUI or Postman or curl.</p> <p>It's worth noting that all the actions that you can do using the Admin UI can also be done using Postman, curl, or any similar tool. Below are some examples to perform additional actions for database and application management, like adding a database, listing views, agents, and forms, and listing and adding application.</p> <p>A group of API requests is known as a collection. Each collection may have subfolders and multiple requests. Request URL or the endpoint is used to identify the link to where the API will communicate with.</p> <p>Note</p> <p>The following examples require a <code>bearer</code> token, which is returned in the response of the <code>/api/v1/auth</code> api. Replace <code>$Bearer</code> in the examples below with that <code>bearer</code> token.</p>"},{"location":"howto/database/enablingadb.html#add-a-database-schema","title":"Add a database schema","text":"<p>To add a database schema, run the following command. Find the applicable Request URL from the OpenAPI Specification document. Provide the body for <code>POST</code> request.</p> <p></p> cURL code snippet <pre><code>curl --location --request POST 'localhost:8880/api/setup-v1/schema?nsfPath=Demo.nsf&amp;configName=demo' \\\n--header 'Authorization: Bearer $Bearer' \\\n--header 'Content-Type: application/json' \\\n--data-raw '\n{\n    \"apiName\": \"demo\",\n    \"name\": \"demo\",\n    \"description\": \"Demo database\",\n    \"nsfPath\": \"Demo.nsf\",\n    \"icon\": \"Base64 stuff, preferably SVG\",\n    \"iconName\": \"mountain\",\n    \"isActive\": true,\n    \"requireRevisionToUpdate\": false,\n    \"formulaEngine\": \"domino\",\n    \"openAccess\": true,\n    \"allowCode\": true,\n    \"dqlAccess\": true,\n    \"dqlFormula\": {\n        \"formulaType\": \"domino\",\n        \"formula\": \"@True\"\n    },\n    \"views\": [\n        {\n            \"name\": \"Customers\",\n            \"alias\": [\n                \"Customers\"\n            ],\n            \"unid\": \"86C72C1BF64B6DF04825847100373215\"\n        },\n        {\n            \"name\": \"MarketingInfo\",\n            \"alias\": [\n                \"MarketingInfo\"\n            ],\n            \"unid\": \"10EA9EC66EA748BC4825851100420810\"\n        },\n        {\n            \"name\": \"ChineseCustomers\",\n            \"alias\": [\n                \"ChineseCustomers\"\n            ],\n            \"unid\": \"3FE5CD63E179F21600258680006DB25B\"\n        },\n        {\n            \"name\": \"($All)\",\n            \"alias\": [\n                \"($All)\"\n            ],\n            \"unid\": \"0E35D520A1EBBB5B48258435003E8284\"\n        },\n        {\n            \"name\": \"Samples\",\n            \"alias\": [\n                \"Samples\"\n            ],\n            \"unid\": \"5318911D496571410025860D00544B17\"\n        }\n    ],\n    \"forms\": [\n        {\n            \"formName\": \"Customer\",\n            \"formModes\": [\n                {\n                    \"modeName\": \"default\",\n                    \"fields\": [\n                        {\n                            \"name\": \"Form\",\n                            \"type\": \"string\",\n                            \"readOnly\": true,\n                            \"fieldGroup\" : \"thing\",\n                            \"multivalue\" : true\n                        },\n                        {\n                            \"name\": \"Pet\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"color\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"email\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"employee_count\",\n                            \"type\": \"integer\"\n                        },\n                        {\n                            \"name\": \"first_name\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"last_name\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"hobbies\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\"\n                            }\n                        },\n                        {\n                            \"name\": \"Owner\",\n                            \"type\": \"string\",\n                            \"format\": \"authors\"\n                        },\n                        {\n                            \"name\": \"Body\",\n                            \"type\": \"object\",\n                            \"format\": \"richtext\"\n                        }\n                    ],\n                    \"required\": [\n                        \"Form\",\n                        \"email\",\n                        \"first_name\"\n                    ],\n                    \"readAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@True\"\n                    },\n                    \"writeAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@True\"\n                    },\n                    \"deleteAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@False\"\n                    },\n                    \"computeWithForm\": false\n                },\n                {\n                    \"modeName\": \"dql\",\n                    \"fields\": [\n                        {\n                            \"name\": \"Form\",\n                            \"type\": \"string\",\n                            \"readOnly\": true\n                        },\n                        {\n                            \"name\": \"Pet\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"color\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"email\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"first_name\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"last_name\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"hobbies\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    ],\n                    \"required\": [\n                        \"Form\",\n                        \"email\",\n                        \"first_name\"\n                    ],\n                    \"readAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@True\"\n                    },\n                    \"writeAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@True\"\n                    },\n                    \"deleteAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@False\"\n                    },\n                    \"computeWithForm\": false\n                }\n            ]\n        },\n        {\n            \"formName\": \"Marketing\",\n            \"formModes\": [\n                {\n                    \"modeName\": \"default\",\n                    \"fields\": [\n                        {\n                            \"name\": \"Form\",\n                            \"type\": \"string\",\n                            \"readOnly\": true\n                        },\n                        {\n                            \"name\": \"Assets\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"Country\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"FullName\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"Industry\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"Newsletter\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"email\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"gender\",\n                            \"type\": \"string\",\n                            \"writeOnly\": true\n                        }\n                    ],\n                    \"readAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@True\"\n                    },\n                    \"writeAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@True\"\n                    },\n                    \"deleteAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@False\"\n                    },\n                    \"computeWithForm\": false\n                }\n            ]\n        },\n        {\n            \"formName\": \"SampleForm\",\n            \"formModes\": [\n                {\n                    \"modeName\": \"default\",\n                    \"fields\": [\n                        {\n                            \"name\": \"Color\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"Form\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"Shape\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"Taste\",\n                            \"type\": \"string\"\n                        }\n                    ],\n                    \"readAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@True\"\n                    },\n                    \"writeAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@True\"\n                    },\n                    \"deleteAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@False\"\n                    },\n                    \"computeWithForm\": false\n                },\n                {\n                    \"modeName\": \"odata\",\n                    \"fields\": [\n                        {\n                            \"name\": \"Color\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"Form\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"Shape\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"Taste\",\n                            \"type\": \"string\"\n                        }\n                    ],\n                    \"readAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@True\"\n                    },\n                    \"writeAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@True\"\n                    },\n                    \"deleteAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@False\"\n                    },\n                    \"computeWithForm\": false\n                }\n            ]\n        }\n    ],\n    \"formAliases\": {\n        \"Entry\": \"Entry\",\n        \"SampleEntry\": \"SampleEntry\",\n        \"Customer\": \"Customer\"\n    }\n}\n'\n</code></pre>"},{"location":"howto/database/enablingadb.html#add-a-database-scope","title":"Add a database scope","text":"<p>To add a database scope, run the following command. Find the applicable Request URL from the OpenAPI Specification document. Provide the body for <code>POST</code> request.</p> <p></p> cURL code snippet <pre><code>curl --location --request POST 'localhost:8880/api/setup-v1/admin/scope' \\\n--header 'Authorization: Bearer $Bearer' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"apiName\": \"demo\",\n    \"schemaName\": \"demo\",\n    \"nsfPath\": \"Demo.nsf\",\n    \"isActive\": true\n}\n'\n</code></pre>"},{"location":"howto/database/enablingadb.html#list-available-views","title":"List available views","text":"<p>To list the views available through this scope, run the following command. Find the applicable Request URL from the OpenAPI Specification document. Execute. For <code>GET</code> request, body isn't needed.</p> <p></p> cURL code snippet <pre><code>curl --location --request GET 'localhost:8880/api/v1/lists?dataSource=demo' \\\n--header 'Authorization: Bearer $Bearer' \\\n--header 'Accept: application/json'\n</code></pre>"},{"location":"howto/database/enablingadb.html#retrieve-documents-from-the-customers-view","title":"Retrieve documents from the Customers view","text":"<p>Find the applicable Request URL from the OpenAPI Specification document. Execute. For <code>GET</code> request, body isn't needed.</p> <p></p> cURL code snippet <pre><code>curl --location -g --request GET 'localhost:8880/api/v1/lists/Customers?dataSource=demo' \\\n--header 'Authorization: Bearer $Bearer' \\\n--header 'Content-Type: application/json' \\\n--data-raw ''\n</code></pre>"},{"location":"howto/database/enablingadb.html#list-available-agents","title":"List available agents","text":"<p>To list the agents, run the following command. Find the applicable Request URL from the OpenAPI Specification document. Execute. For <code>GET</code> request, body isn't needed.</p> <p></p> cURL code snippet <pre><code>curl --location --request GET 'localhost:8880/api/setup-v1/design/agents?dataSource=demo' \\\n--header 'Authorization: Bearer $Bearer '\n</code></pre>"},{"location":"howto/database/enablingadb.html#list-available-forms","title":"List available forms","text":"<p>To list the forms available through this scope, run the following command. Find the applicable Request URL from the OpenAPI Specification document. Execute. For <code>GET</code> request, body isn't needed.</p> <p></p> cURL code snippet <pre><code>curl --location --request GET 'localhost:8880/api/setup-v1/design/forms?dataSource=demo' \\\n--header 'Authorization: Bearer $Bearer '\n</code></pre>"},{"location":"howto/database/enablingadb.html#creating-a-document","title":"Creating a document","text":"<p>Find the applicable Request URL from the OpenAPI Specification document. In Postman, include the request body in JSON format for the <code>POST</code> request.</p> <p></p> cURL code snippet <pre><code>curl --location --request POST 'localhost:8880/api/v1/document?dataSource=demo' \\\n--header 'Authorization: Bearer $Bearer' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"first_name\": \"Madison\",\n    \"last_name\": \"Branthwaite\",\n    \"email\": \"mbranthwaite0@nba.com\",\n    \"Color\": \"Puce\",\n    \"Pet\": \"Black-capped chickadee\",\n    \"Form\": \"Customer\"\n}'\n</code></pre>"},{"location":"howto/database/enablingadb.html#retrieving-a-document","title":"Retrieving a document","text":"<p>Find the applicable Request URL from the OpenAPI Specification document. Execute. For <code>GET</code> request, body isn't needed.</p> <p>Document UniversalID (unid)</p> <p>This API requires the Document's UniversalID (<code>unid</code>). The <code>unid</code> is returned within the response from APIs such as the Create Document (from the previous example) as well as within the list of documents retrieved from a View (from a previous example as well).</p> <p></p> <p>Postman Variables</p> <p>In the image above <code>{{ UNID_0 }}</code> is a Postman Environment Variable that automatically got created if you ran the <code>Create Document</code> Postman test. This is a feature built into the Postman collection we provided. If you aren't using Postman, replace that with the <code>unid</code> of the document you'd like to retrieve.</p> cURL code snippet <pre><code>curl --location -g --request GET 'localhost:8880/api/v1/document/$Unid/default?db=demo' \\\n--header 'Authorization: Bearer $Bearer' \\\n--header 'Content-Type: application/json' \\\n--data-raw ''\n</code></pre>"},{"location":"howto/database/enablingadb.html#list-available-applications","title":"List available applications","text":"<p>To live the available applications, run the following command. Find the applicable Request URL from the OpenAPI Specification document. Execute. For <code>GET</code> request, body isn't needed.</p> <p></p> cURL code snippet <pre><code>curl --location --request GET 'localhost:8880/api/setup-v1/admin/applications/all' \\\n--header 'Authorization: Bearer $Bearer ' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n   \"appName\": \"My Second Application\",\n   \"databasesRequested\": [\n     \"keepconfig\",\n     \"demo\"\n    ]\n}'\n</code></pre>"},{"location":"howto/database/enablingadb.html#add-an-application","title":"Add an application","text":"<p>To add an application, run the following command. Find the applicable Request URL from the OpenAPI Specification document. Provide the body for Post request.</p> <p></p> cURL code snippet <pre><code>curl --location --request POST 'localhost:8880/api/setup-v1/admin/application' \\\n--header 'Authorization: Bearer $Bearer ' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n  \"client_name\": \"My App\",\n  \"client_uri\": \"https://www.projectcastle.io/coolapp\",\n  \"contacts\": [\n    \"admin@projectcastle.io\"\n  ],\n  \"description\": \"Super cool demo App\",\n  \"logo_uri\": \"https://www.projectcastle.io/castle.jpg\",\n  \"redirect_uris\": [\n    \"http://localhost/callback\",\n    \"https://domino.projectcastle.io/identity\",\n    \"https://www.projectcastle.io/oauth\"\n  ],\n  \"scope\": \"demo $DECRYPT\",\n  \"status\": \"isActive\"\n}'\n</code></pre>"},{"location":"howto/database/excludeddb.html","title":"Enable excluded database files and directories","text":""},{"location":"howto/database/excludeddb.html#about-this-task","title":"About this task","text":"<p>The list of databases available when you define a schema in the Admin UI is based on the complete list of NSF files, except for the excluded NSF files and NSF files in the excluded directories defined in the following JSON object in config.json:</p> <pre><code>{\n  \"nsfExclusions\": {\n    \"mail/\": true,\n    \"KeepConfig.nsf\": true,\n    \"KeepConfig.ntf\": true,\n    \"KeepAgents.nsf\": true,\n    \"KeepAgents.ntf\": true,\n    \"KeepOAuth.ntf\": true,\n    \"oauth.nsf\": true,\n    \"names.nsf\": true,\n    \"*.ntf\": true,\n    \"help/\": true,\n    \"as_\": true,\n    \"MJ\": true,\n    \"domino/\": true\n  }\n}\n</code></pre> <p>The procedure guides you on how to include the excluded NSF files and NSF files in excluded directories in the list of databases available when you define a schema.</p>"},{"location":"howto/database/excludeddb.html#procedure","title":"Procedure","text":"<ol> <li>Create a JSON file using a text editor.</li> <li> <p>Copy the complete JSON object to the JSON file.</p> <pre><code>{\n  \"nsfExclusions\": {\n    \"mail/\": true,\n    \"KeepConfig.nsf\": true,\n    \"KeepConfig.ntf\": true,\n    \"KeepAgents.nsf\": true,\n    \"KeepAgents.ntf\": true,\n    \"KeepOAuth.ntf\": true,\n    \"oauth.nsf\": true,\n    \"names.nsf\": true,\n    \"*.ntf\": true,\n    \"help/\": true,\n    \"as_\": true,\n    \"MJ\": true,\n    \"domino/\": true\n  }\n}\n</code></pre> </li> <li> <p>Set the value of the file or directory that you want to enable to <code>false</code>.</p> <p>For example, if you want to include <code>names.nsf</code> in the list of databases available when you define a schema in the Admin UI, set its value to <code>false</code>.</p> <pre><code>{\n  \"nsfExclusions\": {\n    \"mail/\": true,\n    \"KeepConfig.nsf\": true,\n    \"KeepConfig.ntf\": true,\n    \"KeepAgents.nsf\": true,\n    \"KeepAgents.ntf\": true,\n    \"KeepOAuth.ntf\": true,\n    \"oauth.nsf\": true,\n    \"names.nsf\": false,\n    \"*.ntf\": true,\n    \"help/\": true,\n    \"as_\": true,\n    \"MJ\": true,\n    \"domino/\": true\n  }\n}\n</code></pre> </li> <li> <p>Save the JSON file in the <code>keepconfig.d</code> directory.</p> <p>Tip</p> <p>Use a filename for the JSON file that reveals its purpose, such as <code>enable-names-nsf.json</code>. To learn more on how JSON files in <code>keepconfig.d</code> are processed, see Understanding configuration.</p> </li> <li> <p>Restart Domino REST API on all servers.</p> </li> </ol>"},{"location":"howto/database/exportsourcejson.html","title":"Export database schema as JSON file","text":""},{"location":"howto/database/exportsourcejson.html#about-this-task","title":"About this task","text":"<p>The procedure guides you on exporting the database schema in JSON format from the Source tab on the Schema Management page so that you can share the database schema across databases.</p>"},{"location":"howto/database/exportsourcejson.html#before-you-begin","title":"Before you begin","text":"<ul> <li>You have selected a schema on the Schema Management page.</li> </ul>"},{"location":"howto/database/exportsourcejson.html#procedure","title":"Procedure","text":""},{"location":"howto/database/exportsourcejson.html#to-download-a-json-file","title":"To download a JSON file","text":"<ol> <li> <p>Go to the Source tab, and then click the Download icon.</p> From Text ViewFrom Tree View <p></p> <p></p> </li> <li> <p>In the dialog indicating that the schema has been downloaded as <code>schema.json</code>, click OK.</p> </li> </ol> <p>The JSON file with <code>schema.json</code> filename and containing the source text is downloaded to your default download location. </p>"},{"location":"howto/database/exportsourcejson.html#to-create-a-json-file","title":"To create a JSON file","text":"<ol> <li> <p>Go to the Source tab, and then click the Copy icon. </p> From Text ViewFrom Tree View <p></p> <p></p> </li> <li> <p>In the dialog indicating that the schema has been copied to the clipboard, click OK.</p> </li> <li>Create a JSON file using a text editor, and then paste the copied database schema.</li> <li>Save the JSON file.   </li> </ol> <p>Tip</p> <p>For information on importing a schema, see Import a schema.</p>"},{"location":"howto/database/externalnames.html","title":"Use external names in schema definitions","text":"<p>External names allow you to work with fields in configured forms by providing external or specific names for fields. </p> <p>For example, if the field name on the form or document is <code>date</code>, you can set its <code>ExternalName</code> to <code>orderDate</code> to be specific. If you get that document, the resulting field in the JSON will be <code>orderDate</code>. If you update that field by specifying <code>orderDate = \u201c2023/12/6\u201d</code>, it would write the date back to the document as <code>date</code> even if you specified the field based on its external name.  </p>"},{"location":"howto/database/externalnames.html#about-this-task","title":"About this task","text":"<p>The procedures guide you on using external names in schema definitions and in testing external name results in Postman.</p>"},{"location":"howto/database/externalnames.html#use-external-name","title":"Use external name","text":""},{"location":"howto/database/externalnames.html#before-you-begin","title":"Before you begin","text":"<ul> <li>You must have credentials to use the service user interface.</li> <li>Configured schema and scopes</li> </ul>"},{"location":"howto/database/externalnames.html#procedure","title":"Procedure","text":"<ol> <li>Log in to HCL Domino REST API.</li> <li>Click Database Management - REST API option.</li> <li>On the Schema Management page, click the Only show schemas configured with scopes toggle to the on position. </li> <li>Select a schema.</li> <li>Under the Database Forms tab, click the pencil icon corresponding to the configured form that you want to use. This loads the form Access Mode page showing the <code>default</code> access mode.</li> <li>Click Add Mode. </li> <li>Enter a name in the Add New Mode dialog and click Save. The new mode is shown and also selectable from the Mode drop-down list. </li> <li>For every field under Show fields from that you want to add to the new mode, hover over that field and click the + icon to add the field to the new mode.</li> <li> <p>For every added field to the new mode that you want to use an external name, select that field and enter a name in the Field Name under Field Setting. </p> <p>The name you entered for the field in the new mode is used as a translation for the name of the same field in the <code>default</code> mode. When using the new mode to create, get, or update data through the API, the field in the new mode will refer to the field name in the <code>default</code> mode. This is the case regardless of which mode is being used.</p> </li> <li> <p>Click Save. </p> </li> </ol>"},{"location":"howto/database/externalnames.html#expected-result","title":"Expected result","text":"<p>The following image shows the default mode with the field <code>email</code> selected and having the field name <code>email</code>. </p> <p></p> <p>The following image shows the new mode named test with the field <code>email</code> selected and having the changed field name <code>Sulatroniko</code>.</p> <p></p> <p>The service UI will return the field names you put in the new test mode.</p>"},{"location":"howto/database/externalnames.html#test-external-names-result-in-postman","title":"Test external names result in Postman","text":""},{"location":"howto/database/externalnames.html#before-you-begin_1","title":"Before you begin","text":"<ul> <li>Configured Postman</li> </ul>"},{"location":"howto/database/externalnames.html#procedure_1","title":"Procedure","text":"<ul> <li> <p>Modify the schema mode according the mode you have defined in the service URL by using the <code>GET</code> command.</p> <ul> <li>When using the default mode, set <code>mode</code> to <code>default</code>:</li> </ul> <pre><code>{{ HOST }}/document/{{ UNID_0 }}?dataSource=demo&amp;&lt;mark style=\"background-color: #FFFF00\"&gt;mode=default&lt;/mark&gt;&amp;meta=false\n</code></pre> <ul> <li>When using the test mode, set  <code>mode</code> to <code>test</code>:</li> </ul> <pre><code>{{ HOST }}/document/{{ UNID_0 }}?dataSource=demo&amp;&lt;mark style=\"background-color: #FFFF00\"&gt;mode=test&lt;/mark&gt;&amp;meta=false\n</code></pre> </li> </ul> <p>It retrieves the same data result but a different field name translation. The same thing happens if you want to edit the data. It's delivered to the field name of a different schema mode.</p>"},{"location":"howto/database/externalnames.html#expected-result_1","title":"Expected result","text":"<p><code>default</code> mode</p> <pre><code>{\n  \"email\": \"mbranthwaite0@nba.com\",\n  \"first_name\": \"Madisons\",\n  \"last_name\": \"Branthwaite\",\n  \"Pet\": \"Black-capped chickadee\",\n  \"Form\": \"Customer\"\n}\n</code></pre> <p><code>test</code> mode</p> <pre><code>{\n  \"Sulatroniko\": \"mbranthwaite0@nba.com\",\n  \"Pangalan\": \"Madisons\",\n  \"Apelyido\": \"Branthwaite\",\n  \"AlagangHayop\": \"Black-capped chickadee\",\n  \"Form\": \"Customer\"\n}\n</code></pre>"},{"location":"howto/database/pullviewdata.html","title":"Adjust number of retrieved entries when pulling in view data","text":""},{"location":"howto/database/pullviewdata.html#about-this-task","title":"About this task","text":"<p>The procedure guides you in adjusting the number of view entries or documents you can retrieve from a view with more than 1000 entries. Currently, a maximum of 1000 entries are returned when retrieving view data. </p>"},{"location":"howto/database/pullviewdata.html#procedure","title":"Procedure","text":""},{"location":"howto/database/pullviewdata.html#using-count-parameter","title":"Using <code>count</code> parameter","text":"<p>To adjust the number of entries or documents you can retrieve from a view, use the <code>count</code> parameter. A default of 1000 entries is returned if the <code>count</code> parameter is not specified. Add the <code>count</code> parameter to your API request and specify a value to set how many entries are to be returned. </p> <p>For example, to retrieve all the entries from a view that has 1350 entries, set the value of the <code>count</code> parameter to 1350 or more to retrieve all view entries.</p> <p><code>(hostName)/api/v1/lists/(viewName)?dataSource=(scope)&amp;count=1350</code></p> <p>Using the OpenAPI UI</p> <ol> <li> <p>Go to Swagger UI.</p> </li> <li> <p>Follow the authorization steps in Create a document with Swagger UI.</p> </li> <li> <p>Go to and expand data, and then expand the GET /lists/{name} endpoint.</p> </li> <li>Enter the scope name in dataSource.</li> <li>Enter the number of entries to be returned in count. Using the requirements above as an example, enter <code>1350</code>.  </li> <li>Enter the name of the view in name, and then click Execute.</li> </ol>"},{"location":"howto/database/pullviewdata.html#using-start-parameter","title":"Using <code>start</code> parameter","text":"<p>You can also use the <code>start</code> parameter. Add the <code>start</code> parameter to your API request and specify at which entry should return values start. </p> <p>For example, to retrieve all the entries from a view with 1350 entries, execute an API request to return 1000 entries. Execute another API request, but set the value of <code>start</code> parameter to 1000 as shown below.</p> <p><code>(hostName)/api/v1/lists/(viewName)?dataSource=(scope)&amp;start=1000</code></p> <p>This returns the remaining 350 entries not included in the returned entries in the first API request. </p> <p>Using the OpenAPI UI</p> <ol> <li> <p>Go to Swagger UI.</p> </li> <li> <p>Follow the authorization steps in Create a document with Swagger UI.</p> </li> <li> <p>Go to and expand data, and then expand the GET /lists/{name} endpoint.</p> </li> <li>Enter the scope name in dataSource, view name in name, and then click Execute. You have now retrieved 1000 entries of the view.</li> <li>Enter the scope name and view name again, then enter a value in start. Using the requirements above as an example, enter 1000.  </li> <li>Click Execute. You have now retrieved the remaining view entries starting from the 1001 entry.  </li> </ol>"},{"location":"howto/install/index.html","title":"Installation","text":"<p>This is work in progress</p> <p>We are constantly working on improving Domino REST API's functionality and documentation. You have a documentation page which is not quite ready. Feel free to feedback what you would like to see here.</p> <p>Topics to guide you in completing goals and tasks related to installation, configuration, and settings for Domino REST API:</p> <ul> <li> <p>Installation and configuration</p> </li> <li> <p>Create symlink for Domino 14 and Domino REST API</p> </li> <li> <p>Modify configuration of Domino REST API</p> </li> <li> <p>Configure CORS for AdminUI, OAuth and your apps</p> </li> <li> <p>Install the Domino REST API on multiple servers</p> </li> <li> <p>Deploy to HCL Notes Client</p> </li> <li> <p>Remove Domino REST API from Domino server or Notes Client</p> </li> <li> <p>Use passkey to login to Admin UI</p> </li> <li> <p>Configure WebAuthn with Domino REST API and Domino 14 or greater</p> </li> <li> <p>Customize OAuth consent screen (experimental)</p> </li> <li> <p>Obtain authentication token from HCL Container Repository</p> </li> </ul>"},{"location":"howto/install/index.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"howto/install/cors.html","title":"Configure CORS for AdminUI, OAuth and your applications","text":""},{"location":"howto/install/cors.html#about-this-task","title":"About this task","text":"<p>The CORS protocol is designed to prevent accidental data leakage. A client, such as a browser, curl, Postman, Bruno, presents an <code>origin</code> to Domino REST API to gain access to valid responses. Browsers do that automatically when the origin schema, hostname, or port differ from Domino REST API. Command line or developer tools like curl or Bruno don't automatically send the <code>origin</code> header and thus aren't subject to a CORS check. The same applies to server code like NodeJS, Java, or GO.</p> <p>You can avoid CORS</p> <p>Domino REST API allows to host your static applications, which doesn't require additional CORS setup besides your host.</p>"},{"location":"howto/install/cors.html#procedure","title":"Procedure","text":"<p>Assuming the following setup:</p> <ul> <li>Your Domino REST API host is <code>https://drapi.company.com:8880</code>.</li> <li>You have multiple servers hosting static applications: <code>https://sales.company.com</code> and <code>https://***.otherdomain.com</code> (running on different ports).</li> <li>For development, you want to allow <code>http://localhost:5438</code>.</li> </ul> <p>CORS mapping uses Java Regular Expressions (Regex).</p> <p>Use a Regex tool</p> <p>Regex can be hard to decipher and understand due to their syntax and flexibility. To test if a Regex does what you want, use an online interactive tool for validation. Make sure to pick the Java flavor.</p> <p>Create a JSON file in <code>keepconfig.d</code>, for example <code>cors.json</code>, that contains one element per regex with the value <code>true</code>. If you need to temporarily disable an entry, you can set it to false. Make sure you understand Domino REST API configuration.</p> <p>The regex for <code>https://drapi.mycompany.com:8880</code> is <code>https:\\\\/\\\\/.drapi\\\\.mycompany\\.com:8880$</code></p> <p>Note</p> <p>Inside JSON, the <code>\\</code> of Regex gets escaped to <code>\\\\</code>.</p>"},{"location":"howto/install/cors.html#a-few-pointers","title":"A few pointers","text":"<ul> <li><code>^</code> \u2192 beginning of the string</li> <li><code>http</code> \u2192 the literal string <code>http</code></li> <li><code>s?</code> \u2192 optional the string <code>s</code></li> <li><code>\\\\/</code> \u2192 double escape the string <code>/</code></li> <li><code>.*</code> \u2192 one or more characters of any type</li> <li><code>\\\\.</code> \u2192 double escape the string <code>.</code></li> <li><code>(?:\\\\:\\\\d+)?</code> \u2192 double escaped optional colon and port number</li> <li><code>$</code> \u2192 end of string</li> </ul>"},{"location":"howto/install/cors.html#expected-result","title":"Expected result","text":"<pre><code>{\n  \"CORS\": {\n    \"^https?:\\\\/\\\\/localhost(?:\\\\:\\\\d+)?$\": true,\n    \"^https:\\\\/\\\\/.*\\\\.otherdomain\\\\.com(?:\\\\:\\\\d+)?$\": true,\n    \"^https:\\\\/\\\\/drapi.company\\\\.com\\\\:8880$\": true,\n    \"^https:\\\\/\\\\/sales.company\\\\.com$\": true\n  }\n}\n</code></pre> <p>You need to include your host</p> <p>The CORS implementation is designed to be restrictive. any HTTP request presenting an <code>origin</code> header will be checked against your configuration and denied if no match can be found. The CORS specification states:</p> <p>Ultimately, server developers have a lot of freedom in how they handle HTTP responses and these tactics can differ between the response to the CORS-preflight request and the CORS request that follows it.</p> <p>We decided on the side of caution and fail any request that is not a match for a presented <code>origin</code> header. As a result, you have to include your Domino REST API host in your CORS setup.</p> <p>Tip</p> <p>To check Domino REST API settings, see Check Domino REST API settings.</p>"},{"location":"howto/install/cors.html#calling-domino-rest-api-from-your-browser-based-application","title":"Calling Domino REST API from your browser-based application","text":"<p>You can use the browser's build in Fetch API with a simple function:</p> <pre><code>const drapiFetch = async (url, method, token, body) =&gt; {\n  const options = {\n    method: method,\n    mode: 'cors',\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n  if (body) {\n    options.body = JSON.stringify(body);\n  }\n  const response = await fetch(url, options);\n  if (!response.ok) {\n    throw new Error('Fetch failed');\n  }\n  const json = await response.body.json();\n  return json;\n};\n</code></pre> <p>This is just an example, you need to add error handling. To deal with chunked responses, check this out.</p>"},{"location":"howto/install/cors.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"howto/install/modifyconfig.html","title":"Modify configuration of Domino REST API","text":""},{"location":"howto/install/modifyconfig.html#about-this-task","title":"About this task","text":"<p>The procedure guides you on how to modify the Domino REST API configuration. Be sure to check the detailed explanation before proceeding.</p>"},{"location":"howto/install/modifyconfig.html#procedure","title":"Procedure","text":"<ol> <li> <p>Identify the configuration entries that you want to modify.</p> <p>Tip</p> <p>To check Domino REST API settings, see Check Domino REST API settings.</p> </li> <li> <p>Create a JSON file and include the configuration entries that you want to modify with the new values.</p> <p>Note</p> <p>The structure of the configuration entries must be the same as in the config.json file. Only include entries that you want to modify in the JSON file.</p> </li> <li> <p>Save the created JSON file in <code>keepconfig.d</code>. You can use any filename for the JSON file.</p> <p>Note</p> <p>For more information on modifying the configuration, see Overwriting the values.</p> </li> <li> <p>Restart Domino REST API on all servers with this new configuration.</p> </li> </ol>"},{"location":"howto/install/modifyconfig.html#expected-result","title":"Expected result","text":"<p>The updated configuration takes effect the next time you start Domino REST API.</p>"},{"location":"howto/install/modifyconfig.html#example","title":"Example","text":"<p>In this example, the configuration of enabledProtocols is altered by disabling TLSv1.2 and enabling TLSv1.3.</p> <p>Default configuration:</p> <pre><code>{\n  /* Lots of JSON here */\n  \"enabledProtocols\": {\n    \"TLSv1.3\": false,\n    \"TLSv1.2\": true\n  }\n  /* more JSON here */\n}\n</code></pre> <p>Entry in created JSON file to \"swap protocols\".</p> <pre><code>{\n  \"enabledProtocols\": {\n    \"TLSv1.3\": true,\n    \"TLSv1.2\": false\n  }\n}\n</code></pre> <p>Pick a good name</p> <p>Don't call your files <code>mod1.json</code>, <code>mod2.json</code> etc.</p> <p>Use a name that clearly indicates its purpose. e.g. <code>min-tls-v1.3.json</code></p>"},{"location":"howto/install/multiserver.html","title":"Deploy DRAPI to multiple servers","text":"<p>The Domino REST API is designed to be able to share configuration between multiple servers. To do this succesfully, you need to plan carefully and follow the steps outlined here. Sharing configuration works not only for tightly coupled systems, but also for servers that ate just on the same org or even across Domain boundaries (as long as trust and replication are setup correctly and working).</p> <p>Not everything is shared</p> <p>Settings in <code>KeepConfig.nsf</code>, mostly scopes and oauth applications replicate. Configuration settings in <code>keepconfig.d</code> and <code>keepweb.d</code> are per server. When you want to share those, you need to manually copy them over.</p> <p>We are working on improving the config sharing.</p>"},{"location":"howto/install/multiserver.html#planning","title":"Planning","text":"<p>You need to know the following to plan properly:</p> <ul> <li>How are the participating servers replicating? You need to balance timeliness (to avoid replication conflicts) with resource consumption. Revisit these considerations.</li> <li>What will be the source of identity: DRAPI's login/Identity Provider or some external one like Keycloak, Microsoft Entra (formerly known as \"Azure Active Directory\"), Okta or some other OIDC compliant identity service?</li> <li>Do you have or plan DRAPI extensions?</li> <li>What SPA are you planning to deploy to <code>keepweb.d</code>?</li> </ul>"},{"location":"howto/install/multiserver.html#installation","title":"Installation","text":"<ul> <li>Follow the steps outlined here to install DRAPI on your main server. We shall refer to it as hub henceforth.</li> <li>Start DRAPI on the hub using the Domino console command <code>load restapi</code>. This will create the database <code>KeepConfig.nsf</code>. When you upgrade DRAPI, you need to refresh the design of <code>KeepConfig.nsf</code> from <code>KeepConfig.ntf</code>.</li> <li>Use the Domino admin to create replicas of <code>KeepConfig.nsf</code> on all participating servers. You must retain the name and location.</li> <li>If one of the participating servers already has a <code>KeepConfig.nsf</code> with a divergent replicaId, you must remove it. If it has no configuration entries, just delete it. When there are, or you aren't sure, rename it and deal with it later on.</li> <li>Create and/or verify scheduled (or cluster) replication between the participating servers (henceforth referred to as spokes) and the hub.</li> <li>Now install DRAPI on the spokes.</li> </ul>"},{"location":"howto/install/multiserver.html#configuration","title":"Configuration","text":"<p>There are three areas you need to configure:</p> <ul> <li>TLS to secure web traffic</li> <li>OIDC/OAuth</li> <li>Shared JWT Keys to login to DRAPI (if not using an external IdP)</li> </ul> <p>All those will write their configuration entries into <code>keepconfig.d</code>. For now, manually copy them between servers until a more convenient solution is available. Be careful to only copy the settings you want to share.</p>"},{"location":"howto/install/multiserver.html#tls-to-secure-web-traffic","title":"TLS to secure web traffic","text":"<p>The strongly recommended way is to use the Domino Certificate Manager. It's the most secure option and the least work. Create a file <code>keepconfig.d\\DominoCertMgr.json</code> with the following content:</p> <pre><code>{\n  \"TLSCertStore\": true\n}\n</code></pre> <p>Copy the file to all participating servers. This will cause each server to attempt to find a certificate matching its fully qualified domain name as configured in its server document.</p> <p>You have other options, but they require more work.</p>"},{"location":"howto/install/multiserver.html#oidcoauth","title":"OIDC/OAuth","text":"<ul> <li>To activate DRAPI's OAuth support, follow these steps. You might want to split the JSON file into two and take out the only server specific entry <code>url</code> - unless all participating servers sit behind a proxy serving the same URL.</li> <li>Follow these steps for a generic IdP, these steps for Microsoft Entra ID, formerly Azure Active Directory.</li> </ul>"},{"location":"howto/install/multiserver.html#shared-jwt-keys-to-login-to-drapi","title":"Shared JWT Keys to login to DRAPI","text":"<p>When using DRAPI as your JWT provider, as opposed to an external identity provider like Keycloak, it can be useful to share the JWT issuing certificates across servers. The best way to do that is to store them in the Domino Certificate Manager. To do that, create a file <code>keepconfig.d\\DominoCertMgr.json</code> with the following content:</p> <pre><code>{\n  \"JWTCertStore\": true,\n  \"JWTCertStoreName\": \"MyCertForKeep\"\n}\n</code></pre> <p><code>MyCertForKeep</code> needs to match an existing certificate chain in certstore.nsf.</p> <p>You can generate the certificate chain using DRAPI, use the Management Console to generate the Keys for JWT. As of 2025, you should prefer EC certificates. This will create certificates in the certificate store using the common name of the Domino server and configure the local server to use it.</p> <p>To enable access to this certificate for other servers, open the certificate store database and find the newly created certificate document. In that document, modify the Servers with access** field to include the other Domino servers that will access it, and click Submit Request. This causes the Certificate Manager to encrypt the certificate in a way compatible with each named server.</p> <p>Then, set the <code>KeepCertStoreNameJWT</code> notes.ini parameter on each server to the common name of the first server, for example <code>MyServer</code>.</p> <p>Alternately, to share certificates without the certificate store, follow the example and copy the 4 files across servers.</p>"},{"location":"howto/install/multiserver.html#limit-admin-access","title":"Limit admin access","text":"<p>You don't need access to the AdminUI on your spoke servers, it only increases the possibility of replication conflicts by an absent-minded admin. The capability walkthrough Lab 11 outlines the steps to take to disable both the Admin UI and the Admin endpoints. Create a file <code>keepconfig.d/disableadmin.json</code> and copy it to all spokes, but not the hub.</p> <pre><code>{\n  \"versions\": {\n    \"setup\": {\n      \"active\": false\n    },\n    \"admin\": {\n      \"active\": false\n    },\n    \"admin-server\": {\n      \"active\": false\n    }\n  },\n  \"verticles\": {\n    \"Design\": {\n      \"active\": false\n    },\n    \"KeepAdmin\": {\n      \"active\": false\n    },\n    \"AdminAccess\": {\n      \"active\": false\n    }\n  },\n  \"webapps\": {\n    \"webjars\": {\n      \"active\": false\n    }\n  }\n}\n</code></pre> <p>Swagger UI</p> <p>This also disables the Swagger UI. So use a tool like Bruno instead.</p>"},{"location":"howto/install/multiserver.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"howto/install/notesclient.html","title":"Deploy to HCL Notes Client","text":"<p>Domino REST API on Notes Client</p> <p>The HCL Domino REST API is designed for use with the HCL Domino server. The ability to deploy it to a Notes client on Windows or macOS is provided for your convenience so you can evaluate and experiment. You can explore the API without setting up an HCL Domino server. This setup is not supported for any production use. HCL Support won't entertain tickets for it.</p>"},{"location":"howto/install/notesclient.html#about-this-task","title":"About this task","text":"<p>The procedure guides you to try the Domino REST API with a sample demo Notes database with your existing HCL Notes Desktop Client.</p>"},{"location":"howto/install/notesclient.html#prerequisites","title":"Prerequisites","text":"<ul> <li>HCL Notes Desktop Client installed.</li> <li> <p>Domino REST API installed using the <code>restapiInstall.jar</code> from My HCLSoftware Portal.</p> <p>Important</p> <ul> <li>Starting Domino REST API version 1.0.7, the installer jar filename now includes the Domino version, for example, <code>restapiInstall-r12.jar</code>.</li> <li>Starting Domino REST API version 1.0.9, there will be two installer jar files:<ul> <li>For Domino 14, use <code>restapiInstall-r14.jar</code>.</li> <li>For Domino 12, use <code>restapiInstall-r12.jar</code>.</li> </ul> </li> </ul> </li> <li> <p><code>Demo.nsf</code> from Downloads.</p> </li> </ul>"},{"location":"howto/install/notesclient.html#procedure","title":"Procedure","text":"<ol> <li> <p>Locate your Notes Data directory:</p> <ol> <li>Open the HCL Notes Desktop Client.</li> <li>Go to the menu Preferences.</li> <li>Under Basic Notes Client Configuration, look for the Local application folder.</li> </ol> <p>For Mac, it's under <code>/Users/[userid]/Library/Application Support/HCL Notes Data/</code>.</p> </li> <li> <p>Place <code>Demo.nsf</code> in the Notes data folder.</p> </li> <li> <p>Create a functional users file to specify local Domino REST API Users:</p> <ol> <li>Locate your Notes Data directory and find the subdirectory named <code>keepconfig.d</code>.</li> <li>Create a new json file in the <code>keepconfig.d</code> directory. You can use any filename as long as the extension is json. As an example, you can use <code>localusers.json</code>.</li> <li>Copy the following data into the <code>localusers.json</code>file:</li> </ol> <pre><code>{\n  \"identity\": {\n    \"managementAPI\": {\n      \"Rest Admin\": {\n        \"active\": true,\n        \"secret\": \"E4B321EBA91B7F92D9BF5EAFA5322824FEC2287B8A6C133D7C31EFB706A2BA30:1A57478185E7AF3A98F01ECA08F0BA881DBC88BEC60AE8C6F1B1CC5CC55C11A20F676E082BF2D28BB96DB5A8CFB091C767C035B380DB4CBC7D1001EA8BE01663\"\n      }\n    },\n    \"singleDbModeUsers\": {\n      \"Joshua Falken\": {\n        \"active\": true,\n        \"CN\": \"CN=Joshua Falken/O=LocalUser\",\n        \"secret\": \"E4B321EBA91B7F92D9BF5EAFA5322824FEC2287B8A6C133D7C31EFB706A2BA30:1A57478185E7AF3A98F01ECA08F0BA881DBC88BEC60AE8C6F1B1CC5CC55C11A20F676E082BF2D28BB96DB5A8CFB091C767C035B380DB4CBC7D1001EA8BE01663\"\n      },\n      \"John Doe\": {\n        \"active\": true,\n        \"CN\": \"CN=John Doe/O=Mauraders\",\n        \"secret\": \"E4B321EBA91B7F92D9BF5EAFA5322824FEC2287B8A6C133D7C31EFB706A2BA30:1A57478185E7AF3A98F01ECA08F0BA881DBC88BEC60AE8C6F1B1CC5CC55C11A20F676E082BF2D28BB96DB5A8CFB091C767C035B380DB4CBC7D1001EA8BE01663\"\n      }\n    }\n  }\n}\n</code></pre> <p>Note</p> <p>The json file creates temporary users that Domino REST API recognizes while the API is running. The users include a Management API user and 2 local users. To use these users, you may need to add their CN to the Database's ACL. <code>John Doe/Mauraders</code> should already be in the <code>Demo.nsf</code>'s ACL. The password for each user is <code>password</code>. For more information, see Functional Accounts.</p> </li> <li> <p>Open an elevated terminal and navigate to where Domino REST API was installed.</p> </li> <li> <p>Run either the Windows cmd file (<code>runrestapi.cmd</code>) or Mac bash script (<code>runrestapi.sh</code>) that was installed by the installer.</p> <p>On Mac, you may have to change file permission to execute the script. To do that, issue the command:</p> <p><code>chmod 755 runrestapi.sh</code></p> <p>Beware of the JRE</p> <p>For different versions of Notes, the Notes JRE path in the script may vary. You may need to change the path in the script.</p> </li> <li> <p>When prompted for a password for your notes.id file in the Java window, enter your password in that Java window. If any error occurs, stop the running process (kill -9 for Mac) and restart the script. For more information, see Troubleshooting guide.</p> <p>Password Prompt</p> <p>To avoid being prompted for a password each time you start the Domino REST API, go to File &gt; Security &gt; User Security in your HCL Notes Client, and then select the Don't prompt for a password from other Notes-based programs checkbox in the Security Basics* tab.</p> <p></p> </li> </ol>"},{"location":"howto/install/notesclient.html#expected-result","title":"Expected result","text":"<p>If everything is set up correctly, you should get the following message in the terminal console output:</p> <pre><code>   *** HCL Domino REST API open for business ***\n</code></pre>"},{"location":"howto/install/notesclient.html#additional-details","title":"Additional details","text":"<p>When run, the Domino REST API starts and checks for any issues. On the first time run, the Domino REST API creates the databases <code>KeepConfig.nsf</code> and <code>KeepAgents.nsf</code> that are crucial for its operation.</p> <p>For any issues with the installation, see the Troubleshooting guide.</p> <p>To shutdown the Domino REST API, go to the Management console located at <code>http://localhost:8889</code>, enter the Management credentials as specified in the <code>localusers.json</code> file described above, and click Shutdown.</p>"},{"location":"howto/install/oauthoscreen.html","title":"Customize OAuth consent screen","text":"<p>Expert understanding required!</p> <p>Modifiying the consent screen is not for the faint of heart and should only be attempted when corporate identity mandates altering the look and feel. Exercise caution when attempting this. You must be proficient in HTML, CSS, CSP and Javascript.</p> <p></p> <p>The OAuth consent screen uses 3 files:</p> <ul> <li><code>authorization.html</code> located in <code>resources/oauth</code></li> <li><code>authorization.css</code> located in <code>resources/webroot</code></li> <li><code>authorization.js</code> located in <code>resources/webroot</code></li> </ul> <p>They are located inside the jar or the container and need to be extracted from there. You can't modify the original file.</p> <p>The most likely change might be adjustment of the CSS values. You must do this in a CSS file. The CSP will not entertain inline styles. Host your custom CSS in <code>keepweb.d</code>, so it is accessible on the same host.</p> <p>The HTML file uses the Mustache templating system to fill in the values for the current consent request. In a nutshell: Mustache variables look like this: {{\u00a0}}. A good introduction tutorial can be found here.</p>"},{"location":"howto/install/oauthoscreen.html#about-this-task","title":"About this task","text":"<p>Steps to be taken to alter the look &amp; feel of the consent screen</p>"},{"location":"howto/install/oauthoscreen.html#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>You must be proficient in using the HTML, CSS, CSP and Javascript</p> </li> <li> <p>You must understand Mustache.</p> </li> <li>You must understand the URLs of the Domino REST API and the difference between a file location and its URL</li> </ul> <p>Content Security Policy in place!</p> <p>The consent screen uses a tight CSP, You can't use inline CSS or JavaScript or load CSS or JavaScript from a different server.</p>"},{"location":"howto/install/oauthoscreen.html#procedure","title":"Procedure","text":"<p>There are 2 steps required: configure the REST API to load an alternate screen and creating a modified screen. In the simplest case, editing the html file and point to a different or additional CSS file. The worst case: you try to mess with the JavaScript, which we strongly discourage.</p>"},{"location":"howto/install/oauthoscreen.html#pointing-to-a-different-html-file","title":"Pointing to a different HTML file","text":"<p>You need to create or edit a json file in <code>keepconfig.d</code> that has the <code>oauth</code> key. This can be an existing file with <code>oauth</code> or a new and otherwise empty file</p> <pre><code>{\n  \"oauth\": {\n    \"alternateConsentDir\": \"some-directory-that-must-exist\"\n  }\n}\n</code></pre> <p>That directory must contain you custom <code>authorization.html</code>. It doesn't need to be accessible via http(s), since the REST task will pick it up. You can use <code>keepconfig.d</code> for this. For CSS and JS (again: don't mess with the JS) you need http(s) accessible locations, like <code>keepweb.d</code> that is visible as <code>/keepweb</code>.</p> <p>Use a name matching the purpose</p> <p>Use a filename for the JSON file that reveals its purpose. To learn more on how JSON files in <code>keepconfig.d</code> are processed, see Understanding configuration.</p>"},{"location":"howto/install/oauthoscreen.html#modifying-the-html-files","title":"Modifying the HTML files","text":"<p>The HTML file contains only HTML and links to CSS and JavaScript. It does not contain inline CSS or inline JS. The HTML body consists of 4 main sections:</p> <ul> <li>error DIV: usually hidden, shows up when things go wrong</li> <li><code>splashScreen</code> : The initial screen shown while consent is checking if there is an active user session or an existing consent</li> <li><code>loginScreen</code> : Initially hidden, shows up when user needs to login</li> <li><code>consentScreen</code> : Initially hidden, shows up when user needs to provide their consent. Contains <code>{{ mustache }}</code> variables</li> </ul>"},{"location":"howto/install/oauthoscreen.html#list-of-mustache-variables","title":"List of Mustache variables","text":"Name Purpose <code>{{ client_name }}</code> Application name as configured in the AdminUI <code>{{ claims }}</code> Repeat element for each scope requested, closes with <code>{{ claims }}</code> <code>{{ logoURL }}</code> Points to the scope icon configured in the AdminUI <code>{{ claim }}</code> Scope name as configured in the AdminUI <code>{{ description }}</code> Scope description as configure in the adminUI <code>{{ client_id }}</code> UniqueId of the requesting application <code>{{ state }}</code> application state, required by OAUTH flow (don't touch) <code>{{ redirect_uri }}</code> sends you to your app, configured in AdminUI (don't touch) <code>{{ scope }}</code> requested scopes, matched again app configuration (don't touch) <code>{{ response_type }}</code> response type, required by OAUTH flow (don't touch) <p>Don't alter any of the input fields (they are hidden anyway) or the button ids. You can modify anything inside the <code>form</code> tag before the first <code>input</code> element.</p> <p>Good luck with the changes.</p> <p>When things go wrong</p> <p>If you encounter any issues with the OAuth consent screen, you can revert to the default settings by removing the <code>alternateConsentDir</code> in the <code>oauth</code> section of your JSON configuration file.</p>"},{"location":"howto/install/obtainauthenticationtoken.html","title":"Obtain authentication token from HCL Container Repository","text":""},{"location":"howto/install/obtainauthenticationtoken.html#about-this-procedure","title":"About this procedure","text":"<p>The container images for Domino REST API can be pulled from the HCL Container Repository. This requires you to get your authentication token from the HCL Container Repository. This procedure guides you on how to obtain your authentication token or password.</p>"},{"location":"howto/install/obtainauthenticationtoken.html#to-obtain-your-authentication-token","title":"To obtain your authentication token","text":"<ol> <li> <p>Go to the HCL Container Repository .</p> </li> <li> <p>On the login page, click LOGIN VIA OIDC Provider, and then login using your corporate email address.</p> </li> <li> <p>On the Projects page, click your username and select User Profile.</p> <p></p> </li> <li> <p>On the User Profile dialog, copy the value of the CLI secret by clicking the copy icon.</p> <p></p> </li> <li> <p>Save the CLI secret value as you will use it as your authentication token or password when using Docker or Helm CLI to access HCL Container Repository.</p> </li> <li>Take note of exactly how your email address or username is written in the User Profile dialog as authentication is case sensitive on the user email.</li> </ol>"},{"location":"howto/install/passkey.html","title":"Use WebAuthn (Passkey) to log in to Admin UI","text":"<p>Important</p> <p>This feature is only applicable if your host is using HTTPS.</p>"},{"location":"howto/install/passkey.html#about-this-task","title":"About this task","text":"<p>The procedures guide you in using a passkey to log in to Admin UI. The procedures involve:</p> <ul> <li>signing up with passkey</li> <li>logging in to Admin UI using a passkey</li> <li>clearing the passkey</li> </ul> <p>Passkeys are better options to passwords as they use public key cryptography to create secure experiences. Passkeys allow sign-in to websites without remembering and managing passwords by using a biometric sensor, PIN, or pattern. For more information, see passkey.org.</p>"},{"location":"howto/install/passkey.html#prerequisites","title":"Prerequisites","text":""},{"location":"howto/install/passkey.html#for-mac-using-keychain","title":"For Mac using Keychain","text":"<ul> <li> <p>You have set up iCloud Keychain to create a passkey.</p> </li> <li> <p>You have an Apple ID to set up iCloud Keychain.</p> </li> <li>Your Mac has a Touch ID sensor, you have a connected iPhone or iPad, or you have an external security key.</li> </ul> <p>Note</p> <p>Chrome supports passkeys on iCloud Keychain starting in Chrome 118, on macOS 13.5 or later. For more information, see Chrome for Developers blog post.</p>"},{"location":"howto/install/passkey.html#for-windows","title":"For Windows","text":"<ul> <li>You have set up Windows Hello as Chrome on Windows stores passkeys in Windows Hello.</li> <li>Your Windows machine supports the Windows Hello options.  </li> </ul>"},{"location":"howto/install/passkey.html#other-passkey-managers","title":"Other Passkey Managers","text":"<p>Some third-party password managers, such as 1Password support Passkeys as well. Refer to their documentation for details on configuration and requirements.</p>"},{"location":"howto/install/passkey.html#procedures","title":"Procedures","text":""},{"location":"howto/install/passkey.html#to-sign-up-with-passkey","title":"To sign up with passkey","text":"<ol> <li>Open the Domino REST API Admin UI sign-in page in your browser.</li> <li> <p>Enter your Username and Password, and then click Sign up with Passkey.</p> <p></p> <p>Tip</p> <p>If the Username and Password fields are not visible by default, click LOG IN WITH PASSWORD for the fields to be displayed. </p> <p>A dialog opens. The following image shows an example of the dialog opened in Chrome on macOS.</p> <p></p> </li> <li> <p>Using the provided example, you can click Continue or click Save another way to choose where to save your passkey from the available options. Follow the succeeding instructions to complete the process.</p> </li> </ol> <p>You have now logged in to the Domino REST API Admin UI.</p>"},{"location":"howto/install/passkey.html#to-log-in-with-passkey","title":"To log in with passkey","text":"<p>Note</p> <p>See Configure WebAuthn with Domino REST API and Domino 14 to use the same passkey.</p> <ol> <li>Open the Domino REST API Admin UI sign-in page in your browser.</li> <li> <p>Click LOG IN WITH PASSKEY. The Username field is already filled with the username you used when you signed up with your passkey.  </p> <p></p> </li> <li> <p>Click LOG IN.</p> </li> <li>Follow the instructions to use your passkey. The instructions vary depending on what you have chosen on how to create the passkey.</li> </ol> <p>You have now logged in to the Domino REST API Admin UI.</p>"},{"location":"howto/install/passkey.html#to-clear-your-passkey","title":"To clear your passkey","text":"<p>Check and follow the instructions for clearing a passkey on the Internet based on how you created your passkey. The following are links to some of those instructions:</p> <ul> <li>Remove a passkey or password from your Mac and iCloud Keychain</li> <li>Manage your passkeys in Windows</li> <li>Manage passkeys in Chrome</li> </ul>"},{"location":"howto/install/symlink.html","title":"Create symlink for Domino 14 and Domino REST API","text":"<p>When using Domino 14.0 with Domino REST API on Windows, 2 files need to be symbolically linked (symlink) to the <code>(DominoDir)\\jvm\\bin</code> directory.</p>"},{"location":"howto/install/symlink.html#about-this-task","title":"About this task","text":"<p>This procedure guides you through creating symbolic links for 2 files on Domino 14 in case there were errors creating these during the installation of Domino REST API.</p>"},{"location":"howto/install/symlink.html#before-you-begin","title":"Before you begin","text":"<p>Domino Rest API v1.0.9 or greater must be installed.</p>"},{"location":"howto/install/symlink.html#procedure","title":"Procedure","text":"<ol> <li>Open an elevated Windows Command Prompt (run as administrator).</li> <li> <p>Run the following commands replacing <code>c:\\domino</code> with the path to your Domino program directory.</p> <pre><code>     mklink c:\\domino\\jvm\\bin\\nskn50en.dll c:\\domino\\nskn50en.dll\n     mklink c:\\domino\\jvm\\bin\\nsen50en.dll c:\\domino\\nsen50en.dll \n</code></pre> </li> </ol>"},{"location":"howto/install/uninstall.html","title":"Remove Domino REST API from Domino server or Notes Client","text":""},{"location":"howto/install/uninstall.html#about-this-task","title":"About this task","text":"<p>The Domino REST API doesn't have an uninstaller. If you'd like to remove it from your system, follow these procedures.</p> <p>Caution</p> <p>The following procedures permanently remove Domino REST API, including all configurations and customizations. Make a complete backup before proceeding.</p>"},{"location":"howto/install/uninstall.html#domino-server","title":"Domino Server","text":""},{"location":"howto/install/uninstall.html#before-you-begin","title":"Before you begin","text":"<ul> <li>You must have the correct permissions for this procedure, typically <code>Administrator</code> for Windows and <code>root</code> for Linux.</li> </ul> <p>Tip</p> <ul> <li> <p>The following conventions are used:</p> <ul> <li> <p>Domino program directory refers to the location of the executables on a specific system. For example:</p> <ul> <li> <p>Windows - <code>C:\\Program Files\\HCL\\Domino</code></p> </li> <li> <p>Linux - <code>/opt/hcl/domino/notes/latest/linux</code></p> </li> </ul> </li> <li> <p>Domino Data directory refers to where databases are typically stored. For example:</p> <ul> <li> <p>Windows - <code>C:\\Program Files\\HCL\\Domino\\Data</code></p> </li> <li> <p>Linux - <code>/local/notesdata</code></p> </li> </ul> </li> </ul> </li> <li> <p>Take note of where Domino REST API is installed by noting the value of the setting <code>KeepInstallDir=</code> in the <code>notes.ini</code>.</p> </li> </ul>"},{"location":"howto/install/uninstall.html#procedure","title":"Procedure","text":"<ol> <li>Shut down your Domino server.</li> <li>Make a complete backup of your system.</li> <li> <p>Edit your Domino Server's <code>notes.ini</code> file and remove:</p> <ul> <li><code>,restapi</code> from the <code>ServerTasks=</code> line</li> <li>entire <code>KeepInstallDir=</code> line</li> <li>entire <code>KeepManagementURL=</code> line</li> </ul> </li> <li> <p>Remove runtime files in the Domino program directory:</p> <ul> <li> <p>Windows:</p> <ul> <li><code>nrestapi.*</code></li> <li><code>nkeepevents.*</code></li> </ul> </li> <li> <p>Linux:</p> <ul> <li><code>restapi</code></li> <li><code>libkeepevents.so</code></li> <li><code>libidvaultapi.so</code></li> </ul> </li> </ul> </li> <li> <p>Remove databases from your Domino Data directory:</p> <ul> <li><code>KeepConfig.nsf</code></li> <li><code>KeepConfig.ntf</code></li> <li><code>KeepAgents.nsf</code></li> <li><code>KeepAgents.ntf</code></li> <li><code>KeepOAuth.ntf</code></li> <li><code>oauth.nsf</code></li> </ul> </li> <li> <p>Remove the following directories and their contents from your Domino Data directory:</p> <ul> <li><code>keepconfig.d</code></li> <li><code>keepweb.d</code></li> </ul> </li> <li> <p>Remove the <code>Domino REST API</code> directory and all it's contents.</p> </li> </ol>"},{"location":"howto/install/uninstall.html#expected-result","title":"Expected result","text":"<p>Domino REST API has been removed from your system.</p>"},{"location":"howto/install/uninstall.html#notes-client","title":"Notes Client","text":"<p>Tip</p> <p>The following conventions are used:</p> <p>Notes Data directory refers to where databases are typically stored. For example:</p> <ul> <li> <p>Windows - <code>C:\\Program Files\\HCL\\Notes\\Data</code></p> </li> <li> <p>mac - <code>/Users/[your user name]/Library/Application Support/HCL Notes Data</code></p> </li> </ul>"},{"location":"howto/install/uninstall.html#procedure_1","title":"Procedure","text":"<ol> <li> <p>Remove databases from your Notes Data directory:</p> <ul> <li><code>KeepConfig.nsf</code></li> <li><code>KeepConfig.ntf</code></li> <li><code>KeepAgents.nsf</code></li> <li><code>KeepAgents.ntf</code></li> <li><code>KeepOAuth.ntf</code></li> <li><code>oauth.nsf</code></li> </ul> </li> <li> <p>Remove the following directories and their contents from your Notes Data directory:</p> <ul> <li><code>keepconfig.d</code></li> <li><code>keepweb.d</code></li> </ul> </li> <li> <p>Remove the <code>Domino REST API</code> directory and all it's contents.</p> </li> </ol>"},{"location":"howto/install/uninstall.html#expected-result_1","title":"Expected result","text":"<p>Domino REST API has been removed from your system.</p>"},{"location":"howto/install/webauthn.html","title":"Configure WebAuthn with Domino REST API and Domino 14 or greater","text":"<p>WebAuthn (Passkey) authentication is enabled by default and can be configured to integrate with the Passkey support in Domino 14 via JSON files in <code>keepconfig.d</code>. </p>"},{"location":"howto/install/webauthn.html#about-this-task","title":"About this task","text":"<p>The procedure guides you to log in to both Domino REST API and Domino 14 using the same passkey.</p>"},{"location":"howto/install/webauthn.html#prerequisites","title":"Prerequisites","text":"<ul> <li>You must be an administrator in Domino REST API WebUI.</li> <li>You must be using Domino 14 or greater.</li> <li>The passkey had been created by the administrator of Domino and saved as a <code>passkey.nsf</code>.</li> </ul>"},{"location":"howto/install/webauthn.html#procedure","title":"Procedure","text":"<ol> <li>Create a JSON file using text/code app such as VS Code, Notepad, Notepad++.</li> <li> <p>Copy the JSON object named <code>webauthn</code> to the JSON file.</p> <p><pre><code>{\n    \"webauthn\": {\n        \"attestation\": \"direct\",\n        \"rpName\": \"Keep RP\",\n        \"rpId\": \"domino.URL.com\"\n    }\n}\n</code></pre> 3. Change the value of the <code>rpId</code> parameter with the same URL configured in the Domino directory. </p> <pre><code>    {\n    \"webAuthnActive\": true,\n    \"webauthn\": {\n        \"attestation\": \"direct\",\n        \"rpName\": \"Keep RP\",\n        \"rpId\": \"domino.somecompany.com\"\n    }\n}\n</code></pre> Items Description <code>attestation</code> Can be one of \"none\", \"indirect\", \"direct\", or \"enterprise\" <code>rpName</code> It's a name that the user might see when logging in, depending on their user interface. The default setting is \"Domino REST API IdP\", whereas the core Domino HTTP stack uses the name of the website document, which could be viewed as \"Production Servers\" or any other chosen name. <code>rpId</code> The <code>rpId</code> is a single value only. It's important to connect\u00a0it with Domino. Given the scenario where there is a single value present and multiple websites\u00a0hosted by Domino, the usefulness of this will vary depending on the user's requirements. In the default case, if the user has \"domino.somecompany.com\" as their server and Domino REST API is listening on the same hostname (although ports may differ), they can sign in with Passkey in Domino REST API and apply the same stored key on Domino HTTP, and vice versa. See Passkey authentication of HCL Domino. </li> <li> <p>Save the file in <code>.json</code> format inside the <code>keepconfig.d</code> directory.</p> <p>Tip</p> <p>Use a filename for the JSON file that reveals its purpose. To learn more on how JSON files in <code>keepconfig.d</code> are processed, see Understanding configuration.</p> </li> <li> <p>Restart Domino REST API on all servers with this new configuration.</p> </li> </ol> <p>Note</p> <ul> <li>If you disable the <code>webAuthnActive</code> in the settings, you won't be able to use passkey authentication.</li> <li>The actual WebAuthn keys are stored in each user's device. Domino and Domino REST API store only the public-key part to verify it. </li> </ul>"},{"location":"howto/management/index.html","title":"Management console","text":"<p>This is work in progress</p> <p>We are constantly working on improving Domino REST API's functionality and documentation. You have a documentation page which is not quite ready. Feel free to feedback what you would like to see here.</p> <p>Topics to guide you in completing goals and tasks about Domino REST API requiring access to the Management console:</p> <ul> <li>Check Domino REST API settings</li> <li>Create support package</li> <li>Disable and enable module in production</li> <li>Find configuration sources</li> <li>Identify known users with valid JWT token</li> <li>JWT multi server</li> <li>Release suspended users</li> <li>Use Domino console</li> </ul>"},{"location":"howto/management/checksettings.html","title":"Check Domino REST API settings","text":"<p>This is work in progress</p> <p>We are constantly working on improving Domino REST API's functionality and documentation. You have a documentation page which is not quite ready. Feel free to feedback what you would like to see here.</p>"},{"location":"howto/management/checksettings.html#about-this-task","title":"About this task","text":"<p>The procedure guides you on how to check the Domino REST API settings.</p>"},{"location":"howto/management/checksettings.html#before-you-begin","title":"Before you begin","text":"<ul> <li>You must have access to the Management console (Port 8889).</li> </ul>"},{"location":"howto/management/checksettings.html#procedure","title":"Procedure","text":"<p>Note</p> <p>Make sure the Management console is secure. For more information, see Functional Accounts.</p> <ol> <li> <p>Log in to the Management console (Port 8889).    </p> <p>Note</p> <p>The credentials for the management console aren't managed by the configured IdP but derived from the configuration of functional accounts.</p> </li> <li> <p>Click Config. The config tab opens showing the Domino REST API settings in JSON. </p> </li> </ol>"},{"location":"howto/management/configsrc.html","title":"Find configuration sources","text":""},{"location":"howto/management/configsrc.html#about-this-task","title":"About this task","text":"<p>You can check the Domino REST API settings via the Config tab in the Management console. The Config tab shows you all the default configuration of the Domino REST API and all the additional configuration made using the JSON files saved in the <code>keepconfig.d</code> directory. This procedure guides you on how to identify the source files of all the configuration parameters that you see in the Config tab by using the Config src tab.</p>"},{"location":"howto/management/configsrc.html#before-you-begin","title":"Before you begin","text":"<p>You must have access to the Management console.</p> <p>Note</p> <ul> <li>Make sure the Management console is secure. For more information, see Functional Accounts.</li> <li>Credentials for the Management console aren't managed by the configured IdP, but are derived from the configuration of functional accounts.</li> </ul>"},{"location":"howto/management/configsrc.html#procedure","title":"Procedure","text":"<ol> <li> <p>Log in to the Management console (Port 8889).</p> <p></p> </li> <li> <p>Click Config src. The Configuration page opens.</p> <p>The Configuration page includes the Key column that shows the configuration parameters or keys, the Value column that shows the value of the respective configuration parameters or keys, and the Source column that shows in which configuration files you can find the configuration parameters/keys and their values.</p> <p></p> </li> </ol>"},{"location":"howto/management/configsrc.html#additional-information","title":"Additional information","text":"<p>Using the following example image, you can find the configuration parameter <code>AllowJwtMail</code> in the <code>config.json</code> file located in the <code>/opt/hcl/keep/resources/config</code> directory.</p> <p>Using the same example image, you can see that the configuration parameter <code>AllowLocalMailFile</code> doesn't have a corresponding entry under the Source column. When you see instances like this, it means that you can find the configuration parameter in the preceding file entry in the Source column. Based on this example, you can also find the configuration parameter <code>AllowLocalMailFile</code> in the <code>config.json</code> file located in the <code>/opt/hcl/keep/resources/config</code> directory.</p> <p></p> <p>Using the following example image, you can find <code>identity.managementAPI.Doctor Notes.active</code> and <code>identity.managementAPI.Doctor Notes.secret</code> in the <code>Login.json</code> file added to the <code>keepconfig.d</code> directory. You can also see that the value of <code>identity.managementAPI.Doctor Notes.secret</code> has random characters that doesn't provide understandable meaning. This means that the value of <code>identity.managementAPI.Doctor Notes.secret</code> can't be exposed. </p> <p></p>"},{"location":"howto/management/console.html","title":"Use Domino Console","text":"<p>The Domino Console lets an administrator send commands and listen to messages from the Domino server. The Domino Console can be opened from the Management console and has a remote console feature that lets the administrator get real-time command responses and logs from the Domino server. The remote console feature also enables sending and receiving messages to and from other Domino consoles in real time and viewing interactions between other Domino consoles and the Domino server.</p>"},{"location":"howto/management/console.html#about-this-task","title":"About this task","text":"<p>This topic guides you in using the different features of the Domino console.</p>"},{"location":"howto/management/console.html#before-you-begin","title":"Before you begin","text":"<p>You must enable the remote console feature by adding <code>DEBUG_ALLOW_REMOTE_CON_SERVER=1</code> to your server's notes.ini.</p>"},{"location":"howto/management/console.html#procedures","title":"Procedures","text":""},{"location":"howto/management/console.html#open-the-domino-console","title":"Open the Domino Console","text":"<p>Note</p> <p>Make sure the Management console is secure. For more information, see Functional Accounts.</p> <ol> <li> <p>Log in to the Management console (Port 8889).</p> <p></p> <p>Take note that credentials for the management console aren't managed by the configured IdP, but are derived from the configuration of functional accounts.</p> </li> <li> <p>Click Console. The Domino Console opens.</p> <p></p> </li> </ol>"},{"location":"howto/management/console.html#show-the-domino-server-commands","title":"Show the Domino server commands","text":"<p>On the Domino Console, enter <code>help</code> in the Enter command text box, and then press Enter or click Send.</p> <p>The command output shows the server commands, their corresponding descriptions, arguments if any, and proper syntax.</p>"},{"location":"howto/management/console.html#see-live-console-output","title":"See live console output","text":"<p>On the Domino Console, select the Live checkbox.</p> <p>The command output shows a <code>web socket opened</code> message. When clearing the Live checkbox, the command output shows the <code>Live connection closed</code> and <code>web socket closed</code> messages.</p>"},{"location":"howto/management/console.html#send-commands-to-the-domino-server","title":"Send commands to the Domino Server","text":"<p>On the Domino Console, enter the Domino server command in the Enter command text box, and then press Enter or click Send.</p> <p>Note</p> <p>The output from an entered command is shown even if you don't select the Live checkbox.</p> <p>When the Live feature is enabled, the command output shows the corresponding command response from the Domino server. When disabled, the command is executed, but you might not get a command response.</p>"},{"location":"howto/management/console.html#show-and-enter-previously-entered-commands","title":"Show and enter previously entered commands","text":"<ol> <li>On the Domino Console window, click V at the end of the Enter command text box. A Command history dialog opens and shows the list of previously entered commands.</li> <li>Select a command from the list shown in the Command history dialog to enter it in the Enter command text box.</li> <li>Press Enter or click Send.</li> </ol>"},{"location":"howto/management/disablemodule.html","title":"Disable and enable module in production","text":""},{"location":"howto/management/disablemodule.html#about-this-task","title":"About this task","text":"<p>Guides you in enabling or disabling modules in your Domino REST API configuration.</p>"},{"location":"howto/management/disablemodule.html#before-you-begin","title":"Before you begin","text":"<ul> <li>You must have access to the Management console.</li> </ul> <p>Note</p> <ul> <li>Make sure the Management console is secure. For more information, see Functional Accounts.</li> <li>Credentials for the Management console aren't managed by the configured IdP, but are derived from the configuration of functional accounts.</li> </ul> <ul> <li>Check the Configuration parameters to learn more about the configurable parameters to modify the settings.</li> </ul>"},{"location":"howto/management/disablemodule.html#procedure","title":"Procedure","text":"<ol> <li>Log in to the Management console (Port 8889).</li> <li>Click Config. The actual configuration settings open.</li> <li>Identify and copy the configuration parameter or JSON object of the module in the configuration that you need to enable or disable.</li> <li> <p>Create a JSON file using a text editor and paste the copied configuration parameter or JSON object to the JSON file.</p> <p>Example:</p> <p>The following is a JSON object in the configuration related to the Design verticles that's currently not enabled.</p> <pre><code>{\n  \"verticles\": {\n    \"Design\": {\n      \"active\": false\n    }\n  }\n}\n</code></pre> </li> <li> <p>Change the value of the <code>active</code> parameter to <code>true</code> or <code>false</code> based on whether you want to enable or disable the module in the configuration.</p> <p>Example:</p> <p>The following is a JSON object in the configuration related to the Design verticles that has been modified to be enabled by setting the value of the <code>active</code> parameter to <code>true</code>.</p> <pre><code>{\n  \"verticles\": {\n    \"Design\": {\n      \"active\": true\n    }\n  }\n}\n</code></pre> </li> <li> <p>Save the JSON file in the <code>keepconfig.d</code> directory.</p> <p>Naming your JSON file</p> <p>The config loader processes json files in alphabetical order, so when you have conflicting entries, the last one wins. Use a name that reveals its purpose such as <code>inactive-design.json</code>.</p> </li> <li> <p>Restart Domino REST API on all servers.</p> </li> </ol>"},{"location":"howto/management/jwtmultiserver.html","title":"JWT Multi-Server","text":""},{"location":"howto/management/jwtmultiserver.html#about-this-task","title":"About this task","text":"<p>The API uses JWT Bearer tokens for verification, but because the access tokens come from different token servers, the validation of the tokens needs to be changed. </p>"},{"location":"howto/management/jwtmultiserver.html#before-you-begin","title":"Before you begin","text":"<p>You must have access to the Management console.</p> <p>Note</p> <ul> <li>Make sure the Management console is secure. For more information, see Functional Accounts.</li> <li>Credentials for the Management console aren't managed by the configured IdP, but are derived from the configuration of functional accounts.</li> </ul>"},{"location":"howto/management/jwtmultiserver.html#procedure","title":"Procedure","text":"<ol> <li> <p>Login into the Management console (Port 8889).</p> </li> <li> <p>Type a name you want to call this certificate into the Certificate Name. No spaces or special characters.</p> <ul> <li>for example: MultiDomain</li> </ul> </li> <li> <p>Click Create IdP certificate.</p> <p>Domino REST API generates 4 files in this server's <code>[notesdata]/keepconfig.d</code> directory:</p> <ul> <li>MultiDomain.cert.pem</li> <li>MultiDomain.json</li> <li>MultiDomain.private.key.pem</li> <li>MultiDomain.public.key.pem</li> </ul> </li> <li> <p>Copy these 4 files to your other Domino servers into the <code>[notesdata]/keepconfig.d</code> directory.</p> </li> <li>Restart Domino REST API on all servers with this new configuration and now share the same JWT keys.</li> </ol>"},{"location":"howto/management/supportpackage.html","title":"Create support package","text":""},{"location":"howto/management/supportpackage.html#about-this-task","title":"About this task","text":"<p>Guides you on how to create a support package from the Management console. The support package can help the support team to better identify, troubleshoot, and resolve encountered issues. The support package is a zip file that includes:</p> <ul> <li>all files in the <code>IBM_TECHNICAL_SUPPORT</code> directory</li> <li>JSON files in the <code>keepconfig.d</code> directory</li> <li>text file containing a list of all the files in <code>keepconfig.d</code></li> <li><code>config.json</code> file containing data output from the Config in the Management console </li> <li><code>configSrc.json</code> file containing data output from the Config scr in the Management console</li> <li><code>info.json</code> file containing data output from the Info in the Management console</li> <li><code>threads.json</code> file containing data output from the Threads in the Management console</li> </ul> <p>There is also an option to include <code>KeepConfig.nsf</code> in the support package.   </p>"},{"location":"howto/management/supportpackage.html#before-you-begin","title":"Before you begin","text":"<p>You must have access to the Management console.</p> <p>Note</p> <ul> <li>Make sure the Management console is secure. For more information, see Functional Accounts.</li> <li>Credentials for the Management console aren't managed by the configured IdP, but are derived from the configuration of functional accounts.</li> </ul>"},{"location":"howto/management/supportpackage.html#procedure","title":"Procedure","text":"<ol> <li>Log in to the Management console (Port 8889).</li> <li> <p>On the Management console page, click Create in the Support package section. </p> <p></p> <p>Tip</p> <p>The Include KeepConfig.nsf checkbox is selected by default to include the <code>KeepConfig.nsf</code> in the support package. Clear the checkbox to exclude <code>KeepConfig.nsf</code> from the support package.</p> <p>You are then notified that the support package has been created at the <code>IBM_TECHNICAL_SUPPORT</code> directory with a specific filename.</p> <p></p> </li> </ol>"},{"location":"howto/management/supportpackage.html#additional-information","title":"Additional information","text":""},{"location":"howto/management/supportpackage.html#filename","title":"Filename","text":"<p>The support package is a zip file that has the filename format <code>support-package-&lt;datetime\\&gt;.zip</code>. The <code>&lt;datetime\\&gt;</code> variable indicates when the support package is created and has the format YYYYMMDDTHHMMSSZ. YYYY is the four-digit year, MM is the two-digit month, DD is the two-digit day, T is the time indicator, HH is the two-digit hour, MM is the two-digit minutes, SS is the two-digit seconds, and Z is the indicator that the time is in Zulu Time or Greenwich Mean Time.</p>"},{"location":"howto/management/supportpackage.html#console-command","title":"Console command","text":"<p>You can also generate the support package by running the console command <code>tell restapi support</code> or <code>tell restapi support -includensf</code> on the Domino console. The console command <code>tell restapi support</code> creates the support package without the <code>KeepConfig.nsf</code>, while the <code>tell restapi support -includensf</code> creates the support package that includes the <code>KeepConfig.nsf</code>.</p>"},{"location":"howto/management/suspendeduser.html","title":"Release suspended users","text":""},{"location":"howto/management/suspendeduser.html#about-this-task","title":"About this task","text":"<p>Users who enter incorrect credentials more than a predetermined number of times (the default is five times) when accessing the Admin UI are locked out for 60 minutes. This procedure guides you in identifying those users and releasing them from lockout, so they can access the Admin UI without waiting for the 60 minutes to pass.</p>"},{"location":"howto/management/suspendeduser.html#before-you-begin","title":"Before you begin","text":"<p>You must have access to the Management console.</p> <p>Note</p> <ul> <li>Make sure the Management console is secure. For more information, see Functional Accounts.</li> <li>Credentials for the Management console aren't managed by the configured IdP, but are derived from the configuration of functional accounts.</li> </ul>"},{"location":"howto/management/suspendeduser.html#procedure","title":"Procedure","text":"<ol> <li> <p>Log in to the Management console (Port 8889).</p> <p></p> </li> <li> <p>Click Suspended users. The Temporary Suspended Users page opens.</p> <p>The Temporary Suspended Users page shows the username of the suspended user, the date and time of the first failed attempt, and the number of failed attempts.</p> <p></p> </li> <li> <p>Click Release corresponding to the temporarily suspended user that you want to unban so that user can now access Admin UI without waiting for the lockout period to end. </p> </li> </ol>"},{"location":"howto/management/usersmc.html","title":"Identify known users with valid JWT token","text":""},{"location":"howto/management/usersmc.html#about-this-task","title":"About this task","text":"<p>Guides you on how to identify known users with valid JWT tokens. </p>"},{"location":"howto/management/usersmc.html#before-you-begin","title":"Before you begin","text":"<p>You must have access to the Management console.</p> <p>Note</p> <ul> <li>Make sure the Management console is secure. For more information, see Functional Accounts.</li> <li>Credentials for the Management console aren't managed by the configured IdP, but are derived from the configuration of functional accounts.</li> </ul>"},{"location":"howto/management/usersmc.html#procedure","title":"Procedure","text":"<ol> <li> <p>Log in to the Management console (Port 8889).</p> <p></p> </li> <li> <p>Click Users. The Known users with valid JWT Token page opens. </p> <p></p> <p>The Known users with valid JWT Token page includes the following columns:</p> Column name Description User It shows the usernames, in the canonical format, of known users who have or had valid JWT tokens. First seen It shows the date and time when the known user has first logged in to Domino REST API.The succeeding row indicates how long it has been since the known user first logged in to Domino REST API based on the server time after the Users tab is opened or refreshed. Last seen It shows the date and time when the known user has logged out of the Domino REST API, or closed the Domino REST API.The succeeding row indicates how long it has been since the known user logged out or closed the Domino REST API based on the server time after the Users tab is opened or refreshed. Expiry It shows the date and time the validity of the user's JWT token starts.The succeeding row indicates how long before the JWT token will expire or how long the JWT token has expired based on the server time after the Users tab is opened or refreshed. <p>Note</p> <p>If the user accesses Domino REST API after the token expires, the user must go through the login process.</p> </li> </ol>"},{"location":"howto/production/index.html","title":"Configuration for Production","text":"<p>This is work in progress</p> <p>We are constantly working on improving Domino REST API's functionality and documentation. You have a documentation page which is not quite ready. Feel free to feedback what you would like to see here.</p> <p>Topics to guide you in completing configuration goals and tasks in relation to deploying Domino REST API to production:</p> <ul> <li> <p>Change file size limit</p> </li> <li> <p>Configure HTTPS</p> </li> <li> <p>Configure parameters</p> </li> <li> <p>Configure Ports</p> </li> <li> <p>Customize available API schemas and endpoints</p> </li> <li> <p>Enable HTTPS using Domino Certificate Manager</p> </li> <li> <p>Hardened production setup</p> </li> <li> <p>Host SPA in Domino REST API with ReactJS</p> </li> <li> <p>Investigate OAuth</p> </li> <li> <p>Set up Office Round Trip Experience</p> </li> <li> <p>Set up Virtual Spreadsheet</p> </li> </ul> <ul> <li> <p>Set up Domino REST API for encryption, decryption, and signing</p> </li> <li> <p>Test formulas</p> </li> <li> <p>Update Domino REST API</p> </li> </ul>"},{"location":"howto/production/changefilesize.html","title":"Change file size limit","text":""},{"location":"howto/production/changefilesize.html#about-this-task","title":"About this task","text":"<p>The procedure guides you on how to change the file size limit in Domino REST API. The procedure addresses the 413 Request Entity Too Large error when trying to POST an attachment to the Domino REST API. </p>"},{"location":"howto/production/changefilesize.html#procedure","title":"Procedure","text":"<ol> <li>Create a JSON file using a text editor.</li> <li> <p>Copy the JSON object to the JSON file.</p> <pre><code>{\n  \"bodyHandler\": {\n    \"uploadsDirectory\": \"keep-file-uploads.d\",\n    \"bodyLimit\": 10000000\n  }\n}\n</code></pre> </li> <li> <p>Change the value of the <code>bodyLimit</code> parameter to your preferred file size limit in bytes. In the example, the file size limit is set to 128 MB. </p> <pre><code>{\n  \"bodyHandler\": {\n    \"uploadsDirectory\": \"keep-file-uploads.d\",\n    \"bodyLimit\": 128000000\n  }\n}  \n</code></pre> <p>Tip</p> <p>You can set the value of the bodyLimit parameter to <code>-1</code> to remove the file size limit. </p> </li> <li> <p>Save the JSON file in the <code>keepconfig.d</code> directory.</p> <p>Tip</p> <p>Use a filename for the JSON file that reveals its purpose. To learn more on how JSON files in <code>keepconfig.d</code> are processed, see Understanding configuration.</p> </li> <li> <p>Restart Domino REST API on all servers.</p> </li> </ol>"},{"location":"howto/production/computeform.html","title":"Set compute with form","text":""},{"location":"howto/production/computeform.html#about-this-task","title":"About this task","text":"<p>The procedure guides you on configuring the Formula for Write Access under Mode Settings in the Admin UI with the ComputeWithForm method. For more information about the method, see ComputeWithForm  in the HCL Domino Designer documentation.</p>"},{"location":"howto/production/computeform.html#before-you-begin","title":"Before you begin","text":"<p>You are aware of how to change the form configuration in the Admin UI as it's the starting point of this procedure.</p>"},{"location":"howto/production/computeform.html#procedure","title":"Procedure","text":"<ol> <li> <p>Under Mode Settings, click the pencil icon corresponding to the Formula for Write Access.</p> <p></p> <p>The Formula for Write Access dialog opens.</p> <p></p> </li> <li> <p>Click the Compute with Form toggle to the on position.</p> </li> <li> <p>Click the Continue on Error toggle to the on position.</p> <p>Note</p> <ul> <li>Continue on Error toggle is only enabled when the Compute with Form toggle is set to the on position. The Continue on Error toggle is set to the on position by default.</li> <li>When set to the on position, the process continues even if the document validation fails. </li> </ul> </li> <li> <p>Click Save.</p> </li> </ol> <p>The text Computed with Form - enabled in the Formula for Write Access card provides a visual indication that the Formula for Write Access has been configured to be computed with form.</p> <p></p>"},{"location":"howto/production/computeform.html#additional-information","title":"Additional information","text":"<p>Continue with the steps in changing the form configuration.</p>"},{"location":"howto/production/configparam.html","title":"Modify configuration parameters","text":""},{"location":"howto/production/configparam.html#about-this-task","title":"About this task","text":"<p>Domino REST API is preconfigured with settings that allow you to get started right away. This task guides you on how to modify the settings by modifying the configuration parameters.</p>"},{"location":"howto/production/configparam.html#before-you-begin","title":"Before you begin","text":"<ul> <li> <p>You must have access to the Management console to see the preconfigured settings.</p> <p>Note</p> <ul> <li>Make sure the Management console is secure. For more information, see Functional Accounts.</li> <li>Credentials for the Management console aren't managed by the configured IdP, but are derived from the configuration of functional accounts.</li> </ul> </li> <li> <p>Check the Configuration parameters to learn more about the configurable parameters to modify the settings.</p> </li> </ul>"},{"location":"howto/production/configparam.html#procedure","title":"Procedure","text":"<ol> <li> <p>Log in to the Management console (Port 8889).</p> <p></p> </li> <li> <p>Click Config to see the preconfigured settings.</p> </li> <li>Identify and copy the configuration parameter or JSON object that you need to modify to change the preconfigured settings.</li> <li> <p>Create a JSON file using a text editor and paste the copied configuration parameter or JSON object to the JSON file.</p> <p>The following is an example of a JSON object related to Domino REST API's metrics endpoint.</p> <pre><code>{\n  \"metrics\" : {\n    \"enabled\" : true,\n    \"jvmMetricsEnabled\" : false\n   } \n}\n</code></pre> </li> <li> <p>Modify the value of the parameter and save the JSON file in the <code>keepconfig.d</code> directory.</p> <p>The following example shows the JSON object after modifying the value of the <code>enabled</code> parameter to <code>false</code> to disable Domino REST API's <code>metrics</code> endpoint. In this example, the metrics endpoint is disabled when you don't want to take advantage of the Prometheus formatted runtime metrics by using a metric server, such as Grafana.</p> <pre><code>{\n  \"metrics\" : {\n     \"enabled\": false,\n     \"jvmMetricsEnabled\": false\n   }\n}\n</code></pre> <p>Naming your JSON files</p> <p>The config loader processes JSON files in alphabetical order. So when you have conflicting entries, the last one wins. Use a name that reveals its purpose such as <code>disable-metrics.json</code>.</p> </li> <li> <p>Restart Domino REST API on all servers.</p> </li> </ol>"},{"location":"howto/production/configparam.html#additional-information","title":"Additional information","text":""},{"location":"howto/production/configparam.html#understanding-configuration","title":"Understanding configuration","text":"<p>The configuration follows the concept of an Overlay File System. The base configuration is retrieved from the installation directory or <code>jar</code> files.</p> <p>When jar files contain a resource <code>/config/config.json</code>, that configuration file is added to total configuration.</p> <p>Then, it's overlaid with any JSON files in the <code>keepconfig.d</code> directory within the <code>notesdata</code> directory and then finally, with any environment parameters.</p>"},{"location":"howto/production/configparam.html#hierarchy","title":"Hierarchy","text":"<p>All files contribute JSON, which are overlaid on top of each other. JSON elements with same names get overwritten. Arrays are replaced and not overwritten.</p> <p>The JSON files in <code>keepconfig.d</code> are processed in alphabetical order. Last entry wins. This processing order allows you, for example, to disable elements temporarily through settings in a <code>z-final-words.json</code> file without impacting the permanent configuration.</p>"},{"location":"howto/production/customAPI.html","title":"Customize available API schemas and endpoints","text":""},{"location":"howto/production/customAPI.html#about-this-task","title":"About this task","text":"<p>Guides you on how to customize which API schemas and endpoints are available or visible to meet your specific requirements or use cases. </p>"},{"location":"howto/production/customAPI.html#before-you-begin","title":"Before you begin","text":"<p>Note</p> <p>This prerequisite is applicable to Customize available endpoints in a specific API schema.</p> <p>You have to take note of the <code>operationId</code> of the endpoints in a specific API schema that you want to be unavailable. </p> <p>To know the operationId:</p> <ol> <li>Go to OpenAPI (Swagger UI).</li> <li> <p>Select the API schema that contains the endpoints that you don't want to be available.</p> <p></p> <p>As an example, basis API schema is selected.</p> </li> <li> <p>Select the endpoint or endpoints that you don't want to be available. You will see the value of the <code>operationId</code> after the endpoint description.</p> <p>In the example image, the <code>operationId</code> of each listed endpoint is enclosed in the red box. </p> <p></p> </li> <li> <p>Take note of the <code>operationId</code> of each endpoint you don't want to be available. </p> </li> </ol>"},{"location":"howto/production/customAPI.html#procedure","title":"Procedure","text":""},{"location":"howto/production/customAPI.html#customize-available-api-schemas","title":"Customize available API schemas","text":"<p>This procedure enables you customize which API schemas are unavailable to end users. </p> <ol> <li>Create a JSON file using a text editor.</li> <li> <p>Add the <code>versions</code> JSON object with the entry name of the API schema you want to be unavailable and the <code>active</code> property.</p> <pre><code>{\n    \"versions\" : {\n        \"entry name\" : {\n            \"active\" : true\n        }\n    }\n\n}\n</code></pre> <p>Refer to the table for the entry name of the API schema:</p> entry name API schema basis HCL Domino REST API basis setup HCL Domino REST API setup admin HCL Domino REST API admin admin-server HCL Domino REST API admin-server poi HCL Domino REST API poi pim HCL Domino REST API pim webdav HCL Domino REST API webdav wopi Online collaborative editing </li> <li> <p>Set the value of the <code>active</code> property to <code>false</code> to make the API schema unavailable.</p> <pre><code>{\n    \"versions\" : {\n        \"entry name\" : {\n            \"active\" : false\n        }\n    }\n\n}\n</code></pre> <p>For example, if you want to make the HCL Domino REST API admin 1.0.2 API schema unavailable, you will add the following to the JSON file:</p> <pre><code>{\n    \"versions\" : {\n        \"admin\" : {\n            \"active\" : false\n        }\n    }\n\n}\n</code></pre> </li> <li> <p>Save the JSON file in the <code>keepconfig.d</code> directory.</p> </li> <li>Restart Domino REST API on all servers.</li> </ol> <p>The following image shows the available API schemas before saving the example JSON file, which makes the HCL Domino REST API admin API schema unavailable, in the <code>keepconfig.d</code> directory.</p> <p></p> <p>The following image shows the available API schemas after saving the example JSON file, which makes the HCL Domino REST API admin API schema unavailable, in the <code>keepconfig.d</code> directory.</p> <p></p>"},{"location":"howto/production/customAPI.html#customize-available-endpoints-in-a-specific-api-schema","title":"Customize available endpoints in a specific API schema","text":"<p>This procedure enables you to customize which endpoints in a specific API schema are unavailable to end users by using the endpoint's <code>operationId</code>.</p> <ol> <li>Create a JSON file using a text editor.</li> <li> <p>Add the <code>versions</code> JSON object with the entry name of the API schema you want to customize and the <code>disabledOperationIds</code> property.</p> <pre><code>{\n    \"versions\" : {\n        \"entry name\" : {\n            \"disabledOperationIds\" : [\"value1\",\"value2\"]\n        }\n    }\n\n}\n</code></pre> <p>Note</p> <p><code>disabledOperationIds</code> is an array.</p> </li> <li> <p>Enter the <code>operationID</code> of each endpoint you want to be unavailable as an array value for the <code>disabledOperationIds</code> property.</p> <p>For example, if you want to make the <code>POST v1/document</code> and <code>GET v1/document/{unid}</code> endpoints on the HCL Domino REST API basis API schema, and the <code>GET setup-v1/schema</code> endpoint on the HCL Domino REST API setup API schema to be unavailable, add the <code>operationId</code> of each of those endpoints in the JSON file as array values of the <code>disabledOperationIds</code> property. </p> <pre><code>{\n    \"versions\" : {\n        \"basis\" : {\n            \"disabledOperationIds\" : [\"createDocument\",\"getDocument\"]\n        },\n        \"setup\" : {\n            \"disabledOperationIds\" : [\"getSchema\"]\n        }\n    }\n\n}\n</code></pre> </li> <li> <p>Save the JSON file in the <code>keepconfig.d</code> directory.</p> </li> <li>Restart Domino REST API on all servers.</li> </ol> <p>The following images show the availability of the <code>POST v1/document</code> and <code>GET v1/document/{unid}</code> endpoints on the HCL Domino REST API basis API schema, and the <code>GET setup-v1/schema</code> endpoint on the HCL Domino REST API setup API schema before saving the example JSON file in the <code>keepconfig.d</code> directory.</p> Example images before making the endpoints unavailable <p></p> <p></p> <p>The following images show the availability of the <code>POST v1/document</code> and <code>GET v1/document/{unid}</code> endpoints on the HCL Domino REST API basis API schema, and the <code>GET setup-v1/schema</code> endpoint on the HCL Domino REST API setup API schema after saving the example JSON file in the <code>keepconfig.d</code> directory.</p> Example images after making the endpoints unavailable <p></p> <p></p>"},{"location":"howto/production/customAPI.html#customize-accessible-endpoints-according-to-the-api-version","title":"Customize accessible endpoints according to the API version","text":"<p>This procedure enables you to make endpoints in API schemas available to end users according to the <code>keepVersion</code> parameter. Each endpoint in an API schema has an <code>x-keep-version</code> attribute whose value corresponds to the supported API version defined by the <code>keepVersion</code> parameter. By modifying the value of the <code>keepVersion</code> parameter, you can make endpoints that are experimental or endpoints under development that might be supported in future releases available to meet your specific use case.  </p> <p>Important</p> <p>Even if experimental endpoints or endpoints to be supported in future releases can be made available, there is no guarantee that they will function as expected.</p> <ol> <li>Create a JSON file using a text editor.</li> <li> <p>Add the <code>keepVersion</code> parameter with a value of <code>5</code>.</p> <pre><code>{\n    \"keepVersion\" : 5\n}\n</code></pre> </li> <li> <p>Save the JSON file in the <code>keepconfig.d</code> directory.</p> </li> <li>Restart Domino REST API on all servers.</li> </ol> <p>The following image shows the currently supported endpoints for running code against data before making experimental endpoints or endpoints under development available.</p> <p></p> <p>The following image shows some supported and experimental endpoints for running code against data after making the experimental endpoints or endpoints under development available.</p> <p></p>"},{"location":"howto/production/dominohttps.html","title":"Enable HTTPS using Domino Certificate Manager","text":"<p>Note</p> <p>This feature is only available starting from the Domino REST API v1.1.0 release.</p> <p>Domino REST API can now enable HTTPS setup in Domino using Domino's certificate configuration.</p>"},{"location":"howto/production/dominohttps.html#about-this-task","title":"About this task","text":"<p>The procedure guides you on how Domino REST API can enable HTTPS setup in Domino using Domino's certificate configuration.</p>"},{"location":"howto/production/dominohttps.html#before-you-begin","title":"Before you begin","text":"<p>For Domino REST API to enable HTTPS setup in Domino using Domino's certificate configuration, the following conditions must be met:</p> <ul> <li> <p>Certs are stored using the Domino Certificate Manager.</p> <p>Note</p> <p>The <code>certsrv</code> method is not supported.</p> </li> <li> <p>An entry matching the Domino FQDN exists.</p> </li> </ul> <p>To learn more about Domino Certificate Manager, see Managing TLS certificates with Certificate Manager.</p>"},{"location":"howto/production/dominohttps.html#procedure","title":"Procedure","text":"<ol> <li> <p>Create or update a JSON file in the <code>{notesdata}/keepconfig.d</code> directory with the following configuration:</p> <pre><code>{\n    \"TLSCertStore\" : true\n}\n</code></pre> </li> <li> <p>Restart Domino REST API on all servers with this new configuration.</p> </li> </ol> <p>This configuration will attempt to load a certificate matching the server's \"Fully qualified Internet host name\" from the server document, either directly or with a matching wildcard certificate. To specify one or more certificate host names to load, use this configuration:</p> <pre><code>{\n    \"TLSCertStore\" : true,\n    \"TLSCertStoreName\" : [\"foo.bar.com\", \"api.bar.com\"]\n}\n</code></pre> <p><code>TLSCertStoreName</code> can be a string or array. When multiple are specified, they will be matched to requests via SNI.</p> <p>For more information on creating or updating a JSON file, see Modify configuration of Domino REST API.</p>"},{"location":"howto/production/hardening.html","title":"Hardened production setup","text":"<p>The Domino REST API can be configured to run without configuration and admin access on the server that hosts production databases. Let us outline how.</p> <p></p> <ul> <li>The admin server is only accessible by administrators and not reachable from the general network.</li> <li>The Domino REST API is installed on both servers.</li> <li>The <code>KeepConfig.nsf</code> replicates between admin and production server.</li> <li>We have a TLS certificate <code>thecertificate.pem</code>.</li> <li>The password for the TLS certificate is provided as environment parameter <code>TLSPassword</code>.</li> <li>The production server has a hardened config using <code>hardening.json</code>.</li> <li>Domino's nhttp isn't running or isn't using Port 443.</li> </ul>"},{"location":"howto/production/hardening.html#hardeningjson","title":"hardening.json","text":"<p>The name, as long as it ends in <code>.json</code>, can be chosen freely. It needs to be placed into the <code>keepconfig.d</code> directory.</p> <p></p> <pre><code>{\n  \"CORS\": {\n    \"localhost\": false,\n    \".local\": false\n  },\n  \"DEBUG\": false,\n  \"DisableEventBusSocket\": true,\n  \"enabledProtocols\": {\n    \"TLSv1.3\": true,\n    \"TLSv1.2\": false\n  },\n  \"PORT\": 443,\n  \"showDeprecatedEndpoints\": false,\n  \"showPreviewFeatures\": false,\n  \"TLSFile\": \"thecertificate.pem\",\n  \"TLSType\": \"pem\",\n  \"versions\": {\n    \"setup\": {\n      \"active\": false\n    },\n    \"admin\": {\n      \"active\": false\n    }\n  },\n  \"verticles\": {\n    \"Design\": {\n      \"active\": false\n    },\n    \"KeepAdmin\": {\n      \"active\": false\n    },\n    \"AdminAccess\": {\n      \"active\": false\n    },\n    \"Firehose\": {\n      \"active\": false\n    }\n  }\n}\n</code></pre>"},{"location":"howto/production/hardening.html#things-to-consider","title":"Things to consider","text":"<ul> <li>Are all API consumers capable of TLS 1.3?</li> <li>Do you need CORS support for static application on other servers?</li> <li>Shall the Domino REST API serve as Identity Provider (IdP) or is there a corporate IdP to be used?</li> </ul> <p>YMMV</p>"},{"location":"howto/production/hardening.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"howto/production/httpsprod.html","title":"HTTPS for production","text":"<p>Best practice for any REST API access is to secure the connection using TLS (colloquial, still referred to as SSL). This applies to the Domino REST API too. In general you have two options:</p>"},{"location":"howto/production/httpsprod.html#use-a-reverse-proxy","title":"Use a Reverse Proxy","text":"<p>Terminate your TLS connection at a proxy. When the proxy runs on the same \"machine\", this is a common and accepted practice. We have outlined the steps using nginx as reference.</p>"},{"location":"howto/production/httpsprod.html#enable-https-using-the-domino-certificate-manager","title":"Enable HTTPS using the Domino Certificate Manager","text":"<p>If you are using Domino 14 or above and your certificates are stored in the Domino Certificate Manager, you may be able to enable HTTPS automatically. For more information, see Enable HTTPS using the Domino Certificate Manager.</p> <p>To learn more about Domino Certificate Manager, see Managing TLS certificates with Certificate Manager.</p>"},{"location":"howto/production/httpsprod.html#use-a-tls-certificate","title":"Use a TLS Certificate","text":"<p>The REST API can directly use TLS and is HTTP 1.1 and HTTP/2 compliant. You would obtain a TLS certificate from your IT security team or your favorite supplier (We like LetsEncypt, it's free) and set the configuration parameters in a json file.</p> <p>Use the following entry to configure TLS for jks or pfx (set TLSType to the correct type): </p> <p><pre><code>{\n  \"TLSFile\": \"path.to.file\",\n  \"TLSPassword\": \"password-in-clear-protect-this\",\n  \"TLSType\": \"pfx\"\n}\n</code></pre> Use the following to configure TLS for pem:</p> <pre><code>{\n  \"TLSFile\": \"path.to.file\",\n  \"PEMCert\": \"path.to.crt.file\",\n  \"TLSType\": \"pem\"\n}\n</code></pre> <p>Note</p> <ul> <li><code>TLSfile</code> must point to private key, while the <code>PEMCert</code> must point to the certificate chain. </li> <li>If you won't define a password, you must set the value of <code>TLSPassword</code> to <code>\"\"</code>.</li> </ul> <ul> <li> <p>JKS: The Java Key Store. Only used by Java, follow the JKS documentation</p> </li> <li> <p>PEM: defined in RFC 1422, commonly used in http server</p> </li> <li> <p>PFX: defined in RFC 7292, the RSA provided Public-Key Cryptography Standards</p> </li> </ul> <p>Tip</p> <p>It's your choice which key you want to use. Main considerations are the assessment of your security team and the ease of acquisition of a specific key format in your organization.</p>"},{"location":"howto/production/httpsprod.html#example-of-private-key-and-a-self-signed-certificate-using-openssl","title":"Example of private key and a self-signed certificate using openSSL:","text":""},{"location":"howto/production/httpsprod.html#bash-code","title":"Bash code:","text":""},{"location":"howto/production/httpsprod.html#generate-a-private-key","title":"Generate a private key","text":"<p><code>openssl genpkey -algorithm RSA -out server-key.pem</code></p>"},{"location":"howto/production/httpsprod.html#generate-a-certificate-signing-request-csr","title":"Generate a certificate signing request (CSR)","text":"<p><code>openssl req -new -key server-key.pem -out server.csr</code></p>"},{"location":"howto/production/httpsprod.html#self-sign-the-certificate","title":"Self-sign the certificate","text":"<p><code>openssl x509 -req -days 365 -in server.csr -signkey server-key.pem -out server-cert.pem</code></p>"},{"location":"howto/production/httpsprod.html#generate-ca-certificate","title":"Generate CA certificate","text":"<p><code>openssl req -new -x509 -days 365 -key server-key.pem -out ca-cert.pem</code></p> <p>The configuration for TLS for pem would look like:</p> <pre><code>{\n  \"TLSFile\": \u201cserver-key.pem\u201d,\n  \"PEMCert\": \u201cserver-cert.pem\u201d,\n  \"TLSType\": \"pem\"\n}\n</code></pre> <p>Read the details here: configure certificate.</p>"},{"location":"howto/production/oauthinvstgtn.html","title":"Investigate OAuth","text":""},{"location":"howto/production/oauthinvstgtn.html#about-this-task","title":"About this task","text":"<p>Guides you into OAuth authentication to use Domino REST API using Bruno.</p>"},{"location":"howto/production/oauthinvstgtn.html#before-you-begin","title":"Before you begin","text":"<ul> <li> <p>You have installed Bruno.</p> <p>Bruno is available as a native desktop app for macOS, Windows, and Linux. For more information, see Download Bruno's Desktop Application .</p> </li> <li> <p>Take note of the Environment variables.</p> <p>In the APIs used in the OAuth investigation, you will see fields surrounded by double brackets like <code>{{ OAUTHHOST }}</code> or <code>{{ AdminName }}</code>. These fields represent user inputs and should generally not be hard coded. You can use the following as reference:</p> <pre><code>vars {\n  AdminName: John Doe\n  OAUTHHOST: http://localhost:8880\n  state: someRandomValue\n}\nvars:secret [\n  AdminPassword\n] \n</code></pre> </li> </ul>"},{"location":"howto/production/oauthinvstgtn.html#procedure","title":"Procedure","text":""},{"location":"howto/production/oauthinvstgtn.html#get-oauth-endpoints","title":"Get OAuth endpoints","text":"<p>Use the following API to get the OAuth endpoints. Make sure to add the variables in the Vars tab and assertions in the Assert tab as shown in the following images.</p> <p></p> <p></p>"},{"location":"howto/production/oauthinvstgtn.html#log-in-to-check-the-app","title":"Log in to check the app","text":"<p>Use the following API to log in. Make sure to add the required details in the Body and the Headers tabs, and also add the variables in the Vars tab and assertions in the Assert tab as shown in the following images.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"howto/production/oauthinvstgtn.html#get-the-scopes","title":"Get the scopes","text":"<p>Use the following API to get the scopes. Make sure to add the required details in the Headers tab and add the assertions in the Assert tab as shown in the following images.</p> <p></p> <p></p>"},{"location":"howto/production/oauthinvstgtn.html#get-the-app","title":"Get the app","text":"<p>Use the following API to get the app. Make sure to add the required details in the Headers tab, and also add the variables in the Vars tab and assertions in the Assert tab as shown in the following images.</p> <p></p> <p></p> <p></p>"},{"location":"howto/production/oauthinvstgtn.html#reset-client-secret","title":"Reset client secret","text":"<p>Use the following API to reset the client secret. Make sure to add the required details in the Body and the Headers tabs. Also add the parameters in the Params tab, the variables in the Vars tab, and the assertions in the Assert tab as shown in the following images.</p> <p>Important!</p> <p>Take extra caution when resetting the client secret. You have to update it where ever it's used. Otherwise, you won't be able to establish a connection to the app. Also, make sure to take note of the client secret you will be using.</p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"howto/production/oauthinvstgtn.html#send-oauth-authorization-request","title":"Send OAuth authorization request","text":"<p>Use the following API to send the OAuth authorization request. Make sure to add the parameters in the Params tab, the variables in the Vars tab, the script in the Script tab, and the assertions in the Assert tab as shown in the following images.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"howto/production/oauthinvstgtn.html#send-oauth-authorization-request-after-an-http-302-response","title":"Send OAuth authorization request after an HTTP 302 response","text":"<p>Use the following API to send the OAuth authorization request after getting an HTTP 302 response. </p> <p></p>"},{"location":"howto/production/oauthinvstgtn.html#log-in-for-oauth-acceptance","title":"Log in for OAuth acceptance","text":"<p>Use the following API to log in for OAuth acceptance. Make sure to add the required details in the Body and the Headers tabs. Also add the variables in the Vars tab and the assertions in the Assert tab as shown in the following images.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"howto/production/oauthinvstgtn.html#create-authorization-decision","title":"Create authorization decision","text":"<p>Use the following API to create the authorization decision. Make sure to add the required details in the Body and the Headers tabs. Also add the variables in the Vars tab, and the assertions in the Assert tab as shown in the following images.</p> <p></p> <p></p> <p></p> <p></p>"},{"location":"howto/production/oauthinvstgtn.html#exchange-authorization-code-for-access-token","title":"Exchange authorization code for access token","text":"<p>Use the following API to post the authorization decision. Make sure to add the required details in the Body tab. Also add the variables in the Vars tab, and the assertions in the Assert tab as shown in the following images.</p> <p></p> <p></p> <p></p>"},{"location":"howto/production/oauthinvstgtn.html#check-if-access-token-works","title":"Check if access token works","text":"<p>Use the following API to get the scopes to check if the access token works. Make sure to add the required details in the Headers tab and the assertions in the Assert tab as shown in the following images.</p> <p></p> <p></p>"},{"location":"howto/production/oauthinvstgtn.html#exchange-refresh-token-for-access-token","title":"Exchange refresh token for access token","text":"<p>Use the following API to exchange the refresh token for the access token. Make sure to add the required details in the Body tab. Also add the variables in the Vars tab, and the assertions in the Assert tab as shown in the following images.</p> <p></p> <p></p> <p></p>"},{"location":"howto/production/oauthinvstgtn.html#check-if-the-refresh-token-works","title":"Check if the refresh token works","text":"<p>Use the following API to get the scopes to check if the refresh token works. Make sure to add the required details in the Headers tab and the assertions in the Assert tab as shown in the following images.</p> <p></p> <p></p>"},{"location":"howto/production/prodports.html","title":"Configure ports in production","text":"<p>Domino REST API uses ports which have different purposes. Each of these ports have a default port number. For example, the main API port has a default port number of 8880 and the port for Prometheus metrics has a default port number of 8890.</p>"},{"location":"howto/production/prodports.html#about-this-task","title":"About this task","text":"<p>The procedure guides you on how to create a new configuration setting to change the default port number of the ports.</p>"},{"location":"howto/production/prodports.html#before-you-begin","title":"Before you begin","text":"<p>Check the configuration parameters to learn the parameters and allowed port numbers to use in the new configuration setting.</p>"},{"location":"howto/production/prodports.html#procedure","title":"Procedure","text":"<ol> <li>Create a JSON file using a text editor.</li> <li> <p>Add a JSON object to the JSON file. The JSON object includes the parameter corresponding to the port to be configured and the new port number.</p> <p>For example:</p> <pre><code>{\n\"PORT\": 8857,\n\"MANAGEMENTPORT\": 9000\n}\n</code></pre> <p>The example JSON object will change the port number of the main API port from 8880, which is the default, to 8857. The example will also change the port number of the port for accessing the Management Console from 8889, which is the default, to 9000.</p> </li> <li> <p>Save the JSON file in the <code>keepconfig.d</code> directory.</p> <p>Tip</p> <p>Use a filename for the JSON file that reveals its purpose. To learn more on how JSON files in <code>keepconfig.d</code> are processed, see Understanding configuration.</p> </li> <li> <p>Restart Domino REST API on all servers.</p> </li> </ol>"},{"location":"howto/production/reactjs.html","title":"Host SPA in Domino REST API with ReactJS","text":"<p>The Domino REST API allows hosting SPA in its <code>keepweb.d</code> directory. This page highlights the procedure to make this work with ReactJS.</p> <p>This is not a ReactJS tutorial</p> <p>When you are not familiar with ReactJS, this is not the place for you. Rather, learn open standards. But if you insist, check these tutorials.</p>"},{"location":"howto/production/reactjs.html#before-you-begin","title":"Before you begin","text":"<ul> <li> <p>You are familiar with ReactJS.</p> </li> <li> <p>You have installed NodeJS and ReactJs CLI.</p> </li> </ul>"},{"location":"howto/production/reactjs.html#procedure","title":"Procedure","text":"<p>In the steps below, the name of the application, and thus the folder name, will be <code>mydominoreact</code>. Each application needs its own name, so replace <code>mydominoreact</code> with the name of your choice. Following web conventions, use lowercase characters and nothing special in the name, especially no spaces or slashes in any direction.</p> <ol> <li> <p>To ensure proper path resolution, you need to add <code>PUBLIC_URL=/keepweb/mypromydominoreactject</code> parameter to <code>.env</code> file.</p> <p>Note</p> <p><code>keepweb</code> can be something else in your configuration.</p> </li> <li> <p>Reconfigure React to use HashRouter instead of BrowserRouter.</p> </li> <li> <p>Make sure that all links have <code>%PUBLIC_URL%</code> prefix. For example, for favicon.ico, it's <code>&lt;link rel=\"shortcut icon\" href=\"%PUBLIC_URL%/favicon.ico\"&gt;</code>.</p> </li> <li>Execute <code>npm run build</code>, or whatever build process you use.</li> <li>Rename <code>build</code> folder to <code>mydominoreact</code> and copy to the <code>keepweb.d</code> folder on your Domino server. To avoid the rename step, you can alter your build script to directly build into <code>mydominoreact</code> by adding to the <code>.env</code> file the entry <code>BUILD_PATH='./mydominoreact'</code>.</li> </ol>"},{"location":"howto/production/reactjs.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"howto/production/roundtrip.html","title":"Set up Office Round Trip Experience","text":"<p>Microsoft<sup>1</sup> Office Round Trip Experience is a feature included in Domino REST API that simplifies editing of a supported Microsoft Office file attached to a Domino document. The feature enables you to access, edit, and save the changes to the attached file using the applicable Microsoft Office application without having to download and re-attach the file to the Domino document.</p>"},{"location":"howto/production/roundtrip.html#about-this-task","title":"About this task","text":"<p>The procedure guides you on how to setup and use the Microsoft Office Round Trip Experience feature included in Domino REST API.</p>"},{"location":"howto/production/roundtrip.html#before-you-begin","title":"Before you begin","text":"<ul> <li>Make sure your computer has Microsoft\u00a0Office installed or can access Office 365.</li> <li>You must run your Domino REST API in HTTPs.</li> </ul>"},{"location":"howto/production/roundtrip.html#procedures","title":"Procedures","text":""},{"location":"howto/production/roundtrip.html#to-add-an-ms-office-attachment-and-create-a-link","title":"To add an MS Office attachment and create a link","text":"<ol> <li> <p>Add a Microsoft Office file as an attachment to a Domino document.</p> <p>Tip</p> <p>You can use the <code>POST /attachments/{unid}</code> endpoint in the OpenAPI UI to add the file as attachment.</p> </li> <li> <p>Create a link to access the attached file. You can do this by either:</p> <ul> <li> <p>Manually creating the link to access the attached file using the following format.</p> <pre><code>&lt;scheme name&gt;:&lt;command name&gt;|u|&lt;DRAPI HTTPs hostname&gt;/api/webdav-v1/attachment/&lt;dataSource&gt;/&lt;document UNID&gt;/&lt;filename&gt;\n</code></pre> Property Description scheme name Scheme name of Microsoft Office applicationWhen Microsoft Office is installed, each scheme name is registered with the operating system to be handled by the Office product of the same name. Below is a list of scheme names:ms-wordms-powerpointms-excelms-visioms-access command name Describes the action that the application should perform.ofv - to view the file attachmentofe - to edit the file attachment DRAPI HTTPs hostname Domino REST API HTTPS hostname dataSource Domino database where your current document is uploaded or attached. document UNID Universal ID of the Domino document. filename Filename of the Microsoft Office file attached to the Domino document. <p>Example link: <code>ms-word:ofv|u|whitepalace.keepproject.io:8880/api/webdav-v1/attachment/attachmentdb/2D88CDF9549379C700258A9F002797CA/sample.docx</code></p> <p>Info</p> <p>The link format is based on the Office URI Schemes.</p> </li> </ul> <p>OR</p> <ul> <li> <p>Using the <code>GET /attachmentnames/{unid}</code> endpoint to retrieve URLs to access the attached files.</p> <p>Important</p> <p>Make sure to set the value of the <code>includeProtocolUrl</code> query parameter to <code>true</code> to include the attachment URLs in the query response.</p> <p>The query response shows the filenames of the attachments and the URLs of the attachments with supported file extensions. There are two URLs for each attachment, one for viewing as indicated by the <code>ofv</code> command name and one for editing as indicated by the <code>ofe</code> command name included in the URLs. Attachments with unsupported file extensions will have no URLs.</p> <p>The query response example below shows the attachment file named <code>document.docx</code> has two URLs, as the file extension <code>.docx</code> is supported. However, no URLs are available for the attachment file named <code>sample.png</code> as the file extension <code>.png</code> isn't yet supported.</p> <pre><code>{\n\"Files\": [\n    {\n    \"filename\": \"document.docx\",\n    \"urls\": [\n        \"ms-word:ofv|u|http://localhost:8880/api/webdav-v1/attachment/dataSource/documentUNID/document.docx\",\n        \"ms-word:ofe|u|http://localhost:8880/api/webdav-v1/attachment/dataSource/documentUNID/document.docx\"\n            ]\n    },\n    {\n    \"filename\": \"sample.png\",\n    \"urls\": []\n    }\n        ]\n} \n</code></pre> </li> </ul> </li> </ol>"},{"location":"howto/production/roundtrip.html#to-access-and-edit-the-ms-office-file-attachment","title":"To access and edit the MS Office file attachment","text":"<p>Round-trip editing on Windows</p> <p>For successfully performing round-trip editing on Windows, it's recommended to deactivate the protected view for files originating from the Internet before executing this procedure. To do this:</p> <ol> <li>Open the Microsoft application that you will use for round-trip editing.</li> <li>Click\u00a0File\u00a0\u2192\u00a0Options.</li> <li>Click\u00a0Trust Center\u00a0\u2192\u00a0Trust Center Settings\u00a0\u2192\u00a0Protected View.</li> <li>Clear the Enable Protected View for files originating from the Internet checkbox, and then click OK.</li> </ol> <ol> <li>Open the created link to the MS Office file attachment in a web browser.</li> <li> <p>In the Open MS Office application dialog, click Open.</p> <p>The following image shows an example of the Open Microsoft Word dialog when trying to open a Microsoft Word attachment.</p> <p></p> </li> <li> <p>In the login dialog, enter your Domino REST API login credentials and click Login.</p> <p>The authentication is based on the Office Forms Based Authentication (OFBA) protocol. This is necessary since browsers and office applications don't currently support cookie and header sharing.</p> <p></p> <p>Note</p> <p>You might see a different login dialog with less functionality for OFBA when doing this on Windows. It's because some Microsoft applications in Windows still use Internet Explorer, and many of the functionalities we use in the original login dialog are unsupported.</p> <p>The MS Office file attachment is now opened in the applicable MS Office application. In the following image, you see an opened MS Word document as an example.</p> <p></p> </li> <li> <p>Edit the attachment.</p> <p>Note</p> <p>Editing is only possible if the specified command name in the created link is <code>ofe</code>.</p> <p>As an example, the content of the opened MS Word document is changed from Nothing to see here to Hello Sprint playback 114!!.</p> </li> <li> <p>Save your changes, and close the MS Office application. You have now edited the attachment without downloading it and reattaching it again to the Domino document.</p> </li> </ol>"},{"location":"howto/production/roundtrip.html#to-verify-your-updates-to-the-ms-office-file-attachment","title":"To verify your updates to the MS Office file attachment","text":"<ol> <li>Open the created link to the MS Office file attachment that you have edited in a web browser.</li> <li>In the Open MS Office application dialog, click Open.</li> <li> <p>In the login dialog, enter your Domino REST API login credentials and click Login. The MS Office file attachment is now opened in applicable MS Office application and you can verify the updates that you have made.</p> <p>As an example, the following image shows that the content of the edited Microsoft Word attachment has been updated.  </p> <p></p> </li> </ol>"},{"location":"howto/production/roundtrip.html#additional-information","title":"Additional information","text":"<p>For more information on MS Office file extensions recognized by Office Forms Based Authentication, see Extensions used to open Microsoft Office in OFBA.</p> <ol> <li> <p>Microsoft, Windows, and Office 365 are registered trademarks or trademarks of Microsoft Corporation in the United States and/or other countries.\u00a0\u21a9</p> </li> </ol>"},{"location":"howto/production/signencrypt.html","title":"Set up Domino REST API for encryption, decryption, and signing","text":"<p>Note</p> <p>This feature is only available starting from the Domino REST API v1.1.0 release.</p> <p>Domino REST API can encrypt or decrypt document fields and sign a document with keys stored in your Notes ID file using the setup described in this topic.</p>"},{"location":"howto/production/signencrypt.html#about-this-task","title":"About this task","text":"<p>The procedure guides you in making changes to the Domino ID vault configuration, the IdP Catalog, the Domino Server configuration, the OIDC provider configuration, and the Domino REST API configuration to enable Domino REST API to encrypt or decrypt document fields and sign a document.</p>"},{"location":"howto/production/signencrypt.html#before-you-begin","title":"Before you begin","text":"<ul> <li>You have Domino 14 or later.</li> <li>IDs are stored in an ID Vault.</li> <li>Domino is configured with an OIDC provider.</li> </ul>"},{"location":"howto/production/signencrypt.html#procedure","title":"Procedure","text":"<p>Note</p> <p>The steps require you to define your OIDC provider for Domino REST API. In this case, we'll be using a Keycloak installation as an example. If you haven't yet set up Keycloak, see Configure Keycloak before proceeding.</p>"},{"location":"howto/production/signencrypt.html#1-configure-keycloak","title":"1. Configure Keycloak.","text":"<p>You need to make some modifications in your Keycloack installation to allow access to the IDs in the ID Vault.</p> <ol> <li>In Keycloack, choose the realm you created as part of the Keycloak setup and then go to Client Scopes.</li> <li> <p>Create a client scope.</p> <ol> <li>Click Create client scope.</li> <li>Set the Name to Domino.user.all.</li> <li>Click the Include in token scope toggle to the on position.</li> <li>Click Save.</li> </ol> </li> <li> <p>Create another client scope.</p> <ol> <li>Go back to Client Scopes and click Create client scope.</li> <li> <p>Set the Name to Domino.vault.{DominoOrg}-O={VaultName}.</p> <p>where: - DominoOrg is the organization the members of your vault are part of. - VaultName is the name of the ID vault that contains those members IDs.  </p> </li> <li> <p>Click the Include in token scope toggle to the on position.</p> </li> <li>Click Save.</li> </ol> </li> <li> <p>Add a mapper.</p> <ol> <li>After saving, you will see the Mappers tab. Click it.</li> <li>Click Add Mapper and then Configure a new mapper.</li> <li>In the Configure a new mapper dialog, select Audience.</li> <li>Set the Name to VaultAud.</li> <li>Set Included Custom Audience to {DominoOrg}-O={VaultName}.</li> <li>Click the Add to ID token toggle to the on position.</li> <li>Click Save.</li> </ol> </li> <li> <p>Add the scopes to the client.</p> <ol> <li>Click Clients in the left navigator.</li> <li>Select the client you created as part of the Keycloak setup.</li> <li>Click the Client Scopes tab.</li> <li>Click Add client scope.</li> <li>Select the 2 scopes you just created.</li> <li>Click Add, and then select Default.</li> </ol> </li> <li> <p>Take note of needed information.</p> <ul> <li> <p>Get the Client name.</p> <ol> <li>Click Clients in the left navigator.</li> <li>Find the name of the client you created previously.</li> </ol> </li> <li> <p>Get the Client Secret.</p> <ol> <li>Clicking Clients and then select your Client.</li> <li>Click the Credentials tab. </li> <li>In the Client Secret field, click the Copy to clipboard icon to copy to clipboard the client secret.</li> </ol> </li> <li> <p>Get the Base URL.</p> <ol> <li>Go to Realm settings.</li> <li>At the bottom of the General tab, click the <code>OpenID Endpoint Configuration</code> link. A JSON will display.</li> <li>Find the key <code>\"issuer\"</code>, it's value is the value of the Base URL.  </li> </ol> </li> </ul> </li> </ol>"},{"location":"howto/production/signencrypt.html#2-update-notesini","title":"2. Update <code>notes.ini</code>.","text":"<ul> <li>Add <code>$$TEST_JWTIDVAULT=1</code> to the Domino Administrator client's <code>notes.ini</code> and restart Domino Administrator. This is necessary for certain functionalities to be exposed.</li> </ul>"},{"location":"howto/production/signencrypt.html#3-configure-domino","title":"3. Configure Domino.","text":"<ol> <li> <p>Go to People / Policies / Settings and edit the Security Settings document for the vault.  </p> <ol> <li>Set <code>Allow Notes-based programs to use the Notes ID Vault</code> to <code>Yes</code>.</li> <li>Set <code>Bearer token (JWT)</code> to <code>Yes</code></li> <li>Save and close.</li> </ol> </li> <li> <p>Go to Configuration / Web / Internet sites and edit the website document for this host.</p> <p>Note</p> <p>You must have an Internet site document for this specific hostname and not use the <code>DEFAULT_SITE</code> configuration.</p> <ol> <li>Go to the <code>Security</code> tab and set <code>Bearer token (JWT)</code> to <code>Yes</code>.</li> <li>Save and close.</li> </ol> </li> <li> <p>Open the IdP Catalog (idpcat.nsf) and click <code>OIDC Providers</code> in the navigator.</p> <ol> <li>If you have an existing OIDC provider, edit that document; otherwise, create a new document.</li> <li> <p>In <code>Host Name or addresses mapped to this site</code>, this should contain your site's host address that you should be able to select with the dropdown, but then add <code>; bearer.vault.{Same host address}</code>.</p> <p>Example: <code>my.site.com; bearer.vault.my.site.com</code> </p> <p>Note</p> <p>Make sure to note the bearer.vault address as it will be used in the ID Vault.</p> </li> <li> <p>The Provider name can be anything. As an example, you can call it <code>keycloak</code>.</p> </li> <li>The Base URL is the URL you took earlier from Keycloak, typically in the form <code>https://keycloakserver/realms/yourrealm</code>.</li> <li>The <code>Client ID</code> is the client name you took earlier from Keycloak.</li> <li>The <code>Client secret</code> is the client secret you took earlier from Keycloak.</li> <li>Set <code>Client authentication type</code> to <code>Private key JWT</code>.</li> <li>Save and close.</li> </ol> </li> <li> <p>Open the ID Vault database itself.</p> <ol> <li>Click Configuration in the left-hand navigator.</li> <li>Edit the Vault configuration document.</li> <li> <p>Set the <code>Bearer token (JWT) approved OIDC provider configurations</code> with the same <code>bearer.vault</code> that you entered in the IdP catalog.</p> <p>Example: <code>bearer.vault.my.site.com</code></p> </li> <li> <p>Save and close.</p> </li> </ol> </li> </ol>"},{"location":"howto/production/signencrypt.html#4-configure-domino-rest-api","title":"4. Configure Domino REST API.","text":"<p>When you configured Keycloak using the documentation, it had you set a configuration setting in the <code>keepconfig.d</code> directory. You'll be modifying this same file because it needs to change a little based on the following configuration. If you didn't create this configuration, create a new JSON file in <code>keepconfig.d</code> that contains the following configuration.</p> <pre><code>{\n  \"oidc-idpcat\": {\n    \"yourRealm\": {\n      \"active\": true,\n      \"providerUrl\": \"https://keycloakserver/realms/yourRealm\",\n      \"scope\" : \"$DATA\",\n      \"aud\" : \"Domino\",\n      \"additionalClientIds\" : [\n         \"yourClient\"\n      ]\n    }\n  }\n}\n</code></pre> <p>wherein:</p> <ul> <li>The <code>jwt</code> object from the Keycloak documentation is changed to <code>oidc-idpcat</code>.</li> <li>The <code>providerUrl</code> is the Base URL you took earlier from Keycloak.</li> <li>The <code>additionalClientIds</code> array should contain the client name you took earlier from Keycloak.</li> </ul>"},{"location":"howto/production/signencrypt.html#5-restart-domino","title":"5. Restart Domino.","text":"<p>You need to restart Domino.</p>"},{"location":"howto/production/testformulas.html","title":"Test formulas","text":""},{"location":"howto/production/testformulas.html#about-this-task","title":"About this task","text":"<p>Guides you on testing if a user has read, write, and delete access to the database form based on the Formula for Read Access, Formula for Write Access, and Formula for Delete Access in the Mode Settings in the Admin UI.</p> <p></p>"},{"location":"howto/production/testformulas.html#before-you-begin","title":"Before you begin","text":"<ul> <li>You have the hierarchical or canonical name of the user whose access you want to test. </li> <li>You have obtained the UNID of the database form for which you want to test the user's access.</li> <li>You are already in the database form Access Mode page. For more information, see Change form configuration.</li> </ul>"},{"location":"howto/production/testformulas.html#procedure","title":"Procedure","text":"<ol> <li>Under Mode Settings, click Test Formulas. The Test Formulas pane opens. </li> <li>Select the checkbox corresponding to the formula you want to test.</li> <li>Enter the name of the user, whose access you want to test, in either a hierarchical format or canonical format in the User Name text box.</li> <li>Enter the UNID of the document or database form in the Document Id text box.</li> <li>Click Run Test.</li> </ol> <p>Note</p> <p>The test takes into account the assigned access level of the user with respect to the Domino database.</p>"},{"location":"howto/production/testformulas.html#expected-result","title":"Expected result","text":"<p>The default formula for read and write access is <code>@True</code>, while the default formula for delete access is <code>@False</code>. If the tested user has read and write access and doesn't have delete access to the database form, the test result should be as shown below:</p> <p></p>"},{"location":"howto/production/testformulas.html#additional-information","title":"Additional information","text":"<p>You can also add a formula based on Formula Language to the On Save Formula and On Load Formula and have it tested using the same procedure. For more information, see Formula Language. </p>"},{"location":"howto/production/versionupdate.html","title":"Update Domino REST API to the latest release version","text":""},{"location":"howto/production/versionupdate.html#about-this-task","title":"About this task","text":"<p>The procedure guides you on how to update your installed Domino REST API to the latest release version. It's recommended to always update to the latest release version to take advantage of the new features and improvements of Domino REST API.</p>"},{"location":"howto/production/versionupdate.html#before-you-begin","title":"Before you begin","text":"<ul> <li> <p>When updating installed Domino REST API on Linux, Mac, or Windows, download the latest release version of the Domino REST API multi-platform installer.</p> </li> <li> <p>When updating Domino REST API running with Docker image:</p> <ul> <li> <p>Download the docker image of the latest release version of Domino REST API.</p> </li> <li> <p>You can also take note of the latest Docker image version for docker compose <code>.env</code> file from Harbor in What\u2019s New.</p> </li> </ul> </li> </ul>"},{"location":"howto/production/versionupdate.html#procedure","title":"Procedure","text":"<p>Follow the procedure based on the installation option you used when installing the existing version of your Domino REST API.</p> <p>Note</p> <p>For more information on the parameters used for updating Domino REST API in Linux, Mac, and Windows, see Explanation of parameters.</p>"},{"location":"howto/production/versionupdate.html#docker","title":"Docker","text":"<ol> <li>Remove the existing docker container.</li> <li> <p>If using the docker image from My HCLSoftware Portal, load the docker image using the following command: </p> <pre><code>docker load -i [name_of_tar_file].tar\n</code></pre> <p>Note</p> <ul> <li> <p>Make sure you extract the tar.gz file first.</p> </li> <li> <p>This step isn't applicable if using the docker image from Harbor. </p> </li> </ul> </li> <li> <p>Take note of the image name.</p> <ul> <li> <p>When using the docker image from My HCLSoftware Portal, take note of the image name that was output after being loaded. The image name is also indicated in the What\u2019s New for each version of the Domino REST API and marked Docker image version for docker compose .env file (CONTAINER_IMAGE).</p> <p>Example loaded image name</p> <ul> <li>From earlier releases: <code>docker.qs.hcllabs.net/hclcom/projectkeep-r12:1.10.0</code></li> <li>Starting v1.0.7 release: <code>domino-rest-api:1.0.7</code></li> </ul> </li> <li> <p>When using the docker image from HCL Container Repository (Harbor), take note of the latest Docker image version for docker compose .env file from Harbor indicated in What\u2019s New.</p> <p>Example image version name</p> <p>hclcr.io/domino/restapi:1.0.6 </p> </li> </ul> </li> <li> <p>Update the value of the <code>CONTAINER_IMAGE</code> variable in your existing .env file with the noted Docker image name.</p> <p>Note</p> <p>It's recommended to use your existing .env file, but you can also use a new .env file. If you use a new .env file, make sure to update the variable values as needed. </p> </li> <li> <p>Run the following command in the directory where you stored the <code>server.id</code> and <code>docker-compose.yml</code> files, which you used in your initial installation.</p> <pre><code>docker-compose up\n</code></pre> <p>Note</p> <p>If prompted for access to HCL Container Repository (Harbor), obtain your HCL Container Repository username and password, and then sign-in using <code>docker login hclcr.io</code> command and the obtained credentials. </p> </li> <li> <p>Validate that an instance is successfully running on a container.</p> </li> </ol>"},{"location":"howto/production/versionupdate.html#linux","title":"Linux","text":"<p>Note</p> <ul> <li>Don't install using the java executable in <code>/opt/hcl/domino/bin/</code>. </li> <li>If your system doesn't have Java installed, you can use the java executable in the <code>/opt/hcl/domino/notes/latest/linux/jvm/bin/</code> directory.</li> </ul> <p>To update to the latest release version, run the following command:</p> <p>Important</p> <ul> <li>Starting Domino REST API version 1.0.7, the installer jar filename now includes the Domino version, for example, <code>restapiInstall-r12.jar</code>.</li> <li>Starting Domino REST API version 1.0.9, there will be two installer jar files:<ul> <li>For Domino 14, use <code>restapiInstall-r14.jar</code>.</li> <li>For Domino 12, use <code>restapiInstall-r12.jar</code>.</li> </ul> </li> </ul> <pre><code>sudo java -jar restapiInstall.jar \\ \n -d=\"/local/notesdata\" \\ \n -i=\"/local/notesdata/notes.ini\" \\ \n -r=\"/opt/hcl/restapi\" \\ \n -p=\"/opt/hcl/domino/notes/latest/linux\" \\ \n -u \\\n -a\n</code></pre>"},{"location":"howto/production/versionupdate.html#mac","title":"Mac","text":"<p>To update to the latest release version, run the following command:</p> <p>Important</p> <ul> <li>Starting Domino REST API version 1.0.7, the installer jar filename now includes the Domino version, for example, <code>restapiInstall-r12.jar</code>.</li> <li>Starting Domino REST API version 1.0.9, there will be two installer jar files:<ul> <li>For Domino 14, use <code>restapiInstall-r14.jar</code>.</li> <li>For Domino 12, use <code>restapiInstall-r12.jar</code>.</li> </ul> </li> </ul> <pre><code>java -jar restapiInstall.jar \\ \n -d=\"/Users/[your user name]/Library/Application Support/HCL Notes Data\" \\ \n -i=\"/Users/[your user name]/Library/Preferences/Notes Preferences\" \\ \n -r=\"/Users/[your user name]/Applications/restapi\" \\ \n -p=\"/Applications/HCL Notes.app\" \\ \n -u \\\n -a\n</code></pre> <p>Note</p> <p>For more information on the installation-related support and limitations to client use, see Install on Mac.</p>"},{"location":"howto/production/versionupdate.html#windows","title":"Windows","text":"<p>To update to the latest release version, run the following command:</p> <p>Note</p> <p>Domino REST API installer needs to be run as administrator.</p> <p>Important</p> <ul> <li>Starting Domino REST API version 1.0.7, the installer jar filename now includes the Domino version, for example, <code>restapiInstall-r12.jar</code>.</li> <li>Starting Domino REST API version 1.0.9, there will be two installer jar files:<ul> <li>For Domino 14, use <code>restapiInstall-r14.jar</code>.</li> <li>For Domino 12, use <code>restapiInstall-r12.jar</code>.</li> </ul> </li> </ul> <p>For Windows Domino Server</p> <pre><code>java -jar restapiInstall.jar ^ \n -d=\"C:\\Program Files\\HCL\\Domino\\Data\" ^ \n -i=\"C:\\Program Files\\HCL\\Domino\\notes.ini\" ^ \n -p=\"C:\\Program Files\\HCL\\Domino\" ^ \n -r=\"C:\\Program Files\\HCL\\Domino\\restapi\" ^ \n -u ^\n -a\n</code></pre> <p>For Windows Notes Client</p> <pre><code>java -jar restapiInstall.jar ^\n -d=\"C:\\Program Files\\HCL\\Notes\\Data\" ^\n -i=\"C:\\Program Files\\HCL\\Notes\\notes.ini\" ^\n -r=\"C:\\Program Files\\HCL\\Notes\\restapi\" ^\n -p=\"C:\\Program Files\\HCL\\Notes\" ^\n -u ^\n -a\n</code></pre> <p>When running the command for Windows Notes Client, the installer creates a <code>runrestapi.cmd</code> script in the Domino REST API installation directory. Run it to launch the Domino REST API.</p> <p>Note</p> <p>For more information on the installation-related support and limitations to client use, see Install on Windows. </p>"},{"location":"howto/production/virtualsheet.html","title":"Set up Virtual Spreadsheet","text":"<p>Virtual Spreadsheet enables you to open and edit view entries using Microsoft Excel<sup>1</sup>. This feature uses the round trip editing feature of Domino REST API for Microsoft Office applications.</p> <p>Coming from the word virtual, virtual spreadsheet doesn't exist as a spreadsheet file anywhere. It's only created on demand and returned as a spreadsheet file to the user. It's also not saved back as a whole spreadsheet file. Instead, Domino REST API reads each row and updates each document tied to its respective view entry.</p> <p>Virtual spreadsheet is best used when viewing a list view using Microsoft Excel and performing bulk updates.</p>"},{"location":"howto/production/virtualsheet.html#about-this-task","title":"About this task","text":"<p>The procedure guides you on how to set up and use the Virtual Spreadsheet feature.</p>"},{"location":"howto/production/virtualsheet.html#before-you-begin","title":"Before you begin","text":"<ul> <li>Make sure your computer has Microsoft\u00a0Excel installed.</li> <li>You must run your Domino REST API in HTTPs.</li> </ul>"},{"location":"howto/production/virtualsheet.html#procedure","title":"Procedure","text":"<ol> <li> <p>Choose an active view that you want to open.</p> <p>Tip</p> <ul> <li>To get a list of your views from your target schema, see List available database views.</li> <li>You can set up the view schema however you wish as Virtual Spreadsheet respects the configured view schema.</li> </ul> </li> <li> <p>Create a <code>vsheet</code> mode for each form that your view exposes by following the steps for adding a mode.</p> <p>If you aren't sure which form or forms are available in the view, you may use the view's selection formula. To do this:</p> <ul> <li>You can use the Domino Designer to open the view and look at its selection formula.</li> <li> <p>You can use the <code>GET /design/{designType}/{designName}</code> endpoint by setting <code>designType</code> parameter to views and <code>designName</code> parameter to your view name, and then find the <code>selectionFormula</code> in the response.</p> <p>For example, if your view's selection formula states <code>SELECT Form = 'Customers' | Form = 'Leads'</code>, both the <code>Customers</code> form and the <code>Leads</code> form need to have the <code>vsheet</code> mode. \u00a0</p> </li> </ul> <p>If your selection formula doesn't contain a form name, determine which forms are available in the view and add the <code>vsheet</code> mode to those forms.</p> <p>Once the <code>vsheet</code> mode is created, it's recommended to add all the fields from the form in the <code>vsheet</code> mode. This way, you can make sure that each field is available for update using the Virtual Spreadsheet.</p> </li> <li> <p>Form the MS Office Excel URI scheme you need to open the virtual spreadsheet using the following format:</p> <p><code>ms-excel:&lt;command name&gt;|u|&lt;DRAPI HTTPs hostname&gt;/api/webdav-v1/view/&lt;dataSource&gt;/&lt;view name&gt;.xlsx</code></p> Property Description command name Describes the action that the application should perform.ofv - to view the spreadsheetofe - to edit the spreadsheet DRAPI HTTPs hostname Domino REST API HTTPS hostname. dataSource Domino database where your view is in. view name URL encoded name of your view. <p>Example link: <code>ms-excel:ofe|u|https://whitepalace.projectkeep.io:8880/api/webdav-v1/view/sales/Customers.xlsx</code></p> </li> <li> <p>Enter the URI in a browser and approve when prompted if you want to open Microsoft Excel.</p> </li> <li> <p>In the login dialog, enter your Domino REST API login credentials and click Login.</p> <p>If successful, you can see a spreadsheet like the example image below:</p> <p></p> <p>Note</p> <ul> <li>Protected cells have colored backgrounds. These cells are formula columns or view entry metadata. Cell protection also applies to the cells outside the main table.</li> <li>Editable cells are cells inside the main table and has a white background.</li> </ul> </li> <li> <p>Implement updates as needed and save them using the Microsoft Excel save command. You should see a prompt indicating Saving.... If the prompt changes to Saved., it means your updates have been saved.</p> </li> </ol> <p>Important</p> <p>Changes that result into an error when updating the corresponding document of the view entry won't be saved.</p> <p>For example, if you edited 10 rows and 1 row encountered an error, Microsoft Excel would prompt a successful save, but in reality, that 1 row's changes wouldn't get reflected back in its corresponding document.</p> <p>This also includes trying to save the changes made with no <code>vsheet</code> mode, Microsoft Excel would show that it's saved, but in reality it's not.</p>"},{"location":"howto/production/virtualsheet.html#additional-information","title":"Additional information","text":"<ul> <li>Virtual spreadsheet for MS Excel is read and write. If you want it to be read-only using MS Excel, you can try out OData Feed for MS Excel.</li> </ul> <ol> <li> <p>Microsoft and Excel are registered trademarks or trademarks of Microsoft Corporation in the United States and/or other countries.\u00a0\u21a9</p> </li> </ol>"},{"location":"howto/web/index.html","title":"Web configuration","text":"<p>This is work in progress</p> <p>We are constantly working on improving Domino REST API's functionality and documentation. You have a documentation page which is not quite ready. Feel free to feedback what you would like to see here.</p> <p>Topics to guide you in completing web configuration goals and tasks related to Domino REST API: </p> <ul> <li> <p>Configure nginx as HTTPS proxy with subdomains</p> </li> <li> <p>Configure nginx as HTTPS proxy - single domain</p> </li> </ul>"},{"location":"howto/web/httpsproxy.html","title":"Configure nginx as HTTPS proxy with subdomains","text":""},{"location":"howto/web/httpsproxy.html#about-this-task","title":"About this task","text":"<p>The provided information guides you in configuring nginx as an HTTPS proxy with subdomains.</p> <p>Tip</p> <p>Know more about Domino REST API and Proxy.</p>"},{"location":"howto/web/httpsproxy.html#configuring-nginx-as-an-https-proxy-with-subdomains","title":"Configuring nginx as an HTTPS proxy with subdomains","text":"<p>A typical deployment using a proxy looks like this:</p> <p></p> <p>Domino's own http runs on Port 81 and HTTPS is handled by the nginx proxy. The proxy also handles the assignment of subdomains to the correct ports. We will use three domains:</p> <ul> <li>keep.someserver.keep - access to the API</li> <li>domino.someserver.keep - access to Domino</li> <li>quatto.someserver.keep - access to an application</li> </ul> <p>Alternatively, the proxy can be configured to use a single Domain and use location routing to achieve the same result.</p> <p>We start with a Port 80 configuration and then let CertBot handle the SSL configuration thereafter.</p> <p>This example is using Nginx and Let's Encrypt.</p> <pre><code>server {\n server_name domino.projectkeep.rocks projectkeep.rocks;\n\n root /usr/share/nginx/html;\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n\n location / {\n     proxy_cache_bypass $http_upgrade;\n     proxy_set_header Upgrade $http_upgrade;\n     proxy_set_header Connection \"upgrade\";\n     proxy_set_header X-Real-IP $remote_addr;\n     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n     proxy_set_header X-Forwarded-Proto $scheme;\n     proxy_set_header X-Forwarded-Host $host;\n     proxy_set_header X-Forwarded-Port $server_port;\n     proxy_pass http://127.0.0.1:81;\n }\n\n\n    listen [::]:80;\n    listen 80;\n\n}\n\nserver {\n server_name keep.projectkeep.rocks;\n\n root /usr/share/nginx/html;\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n\n location / {\n     proxy_cache_bypass $http_upgrade;\n     proxy_set_header Upgrade $http_upgrade;\n     proxy_set_header Connection \"upgrade\";\n     proxy_set_header X-Real-IP $remote_addr;\n     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n     proxy_set_header X-Forwarded-Proto $scheme;\n     proxy_set_header X-Forwarded-Host $host;\n     proxy_set_header X-Forwarded-Port $server_port;\n     proxy_pass http://127.0.0.1:8880;\n }\n\n\n    listen [::]:80;\n    listen 80;\n\n}\n\nserver {\n server_name jmap.projectkeep.rocks;\n\n root /usr/share/nginx/html;\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n\n location / {\n     proxy_cache_bypass $http_upgrade;\n     proxy_set_header Upgrade $http_upgrade;\n     proxy_set_header Connection \"upgrade\";\n     proxy_set_header X-Real-IP $remote_addr;\n     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n     proxy_set_header X-Forwarded-Proto $scheme;\n     proxy_set_header X-Forwarded-Host $host;\n     proxy_set_header X-Forwarded-Port $server_port;\n     proxy_pass http://127.0.0.1:3001;\n }\n\n\n    listen [::]:80;\n    listen 80;\n\n}\n\nserver {\n        server_name ews.projectkeep.rocks mail.projectkeep.rocks autodiscover.projectkeep.rocks;\n\n        root /usr/share/nginx/html;\n\n        error_page 500 502 503 504 /50x.html;\n            location = /50x.html {\n        }\n\n location / {\n     proxy_cache_bypass $http_upgrade;\n     proxy_set_header Upgrade $http_upgrade;\n     proxy_set_header Connection \"upgrade\";\n     proxy_set_header X-Real-IP $remote_addr;\n     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n     proxy_set_header X-Forwarded-Proto $scheme;\n     proxy_set_header X-Forwarded-Host $host;\n     proxy_set_header X-Forwarded-Port $server_port;\n     proxy_pass http://127.0.0.1:3000;\n }\n\n    listen [::]:80;\n    listen 80;\n\n}\n</code></pre> <p>Once deployed, use Certbot to activate SSL. Remember to adjust your host name.</p>"},{"location":"howto/web/httpsproxy.html#expected-result","title":"Expected result","text":"<p>The resulting system layout looks as follows. Domino REST API can also be installed together with Domino directly on the server (or virtual machine), but the diagram is the same.</p> <p></p> <p>The flow is the same as single domain flow. The key is the nginx configuration.</p>"},{"location":"howto/web/httpsproxy2.html","title":"Configure nginx as HTTPS proxy - single domain","text":""},{"location":"howto/web/httpsproxy2.html#about-this-task","title":"About this task","text":"<p>The information in this section guides you in configuring nginx as an HTTPS proxy - single domain.</p> <p>Tip</p> <p>Know more about Domino REST API and Proxy.</p>"},{"location":"howto/web/httpsproxy2.html#configuring-nginx-as-an-https-proxy-single-domain","title":"Configuring nginx as an HTTPS proxy - single domain","text":"<p>When the installation requires limiting to a single Domain, routing needs to be configured on a path basis. Again, Domino would run on port 81, but this version uses path settings instead of subdomains. When you prefer to use subdomains, check these instructions instead.</p> <p>The path assignment looks like this:</p> <ul> <li>/api: Domino REST API on port 8880</li> <li>/admin/ui/: Domino REST API Admin UI on port 8880</li> <li>/keep: Domino REST API Homepage on port 8880</li> <li>/openapi: OpenAPI spec files and UI on port 8880</li> <li>/EWS: custom app on port 3000</li> <li>/autodiscover: custom app on port 3000</li> <li>/oab: custom app on port 3000</li> <li>/.wellknown/jmap: custom app on port 3001</li> <li>/jmap custom app on port 3001</li> <li>/jmapupload custom app on port 3001</li> <li>/jmapdownload custom app on port 3001</li> <li>All the rest: Domino on port 81</li> </ul> <p>This example is using Nginx and Let's Encrypt. We start with a Port 80 configuration and then let CertBot handle the SSL configuration thereafter.</p>"},{"location":"howto/web/httpsproxy2.html#initial-configuration","title":"Initial configuration","text":"<p>Depending on your platform, the following <code>keep.conf</code> in nginx's configuration directory, typical <code>conf.d</code> or <code>sites-enabled</code>:</p> <pre><code>server {\n    server_name domino.projectkeep.rocks;\n\n    listen [::]:80;\n    listen 80;\n\n    root /usr/share/nginx/html;\n\n    error_page 500 502 503 504 /50x.html;\n    location = /50x.html {\n    }\n\n     proxy_cache_bypass $http_upgrade;\n     proxy_set_header Upgrade $http_upgrade;\n     proxy_set_header Connection \"upgrade\";\n     proxy_set_header X-Real-IP $remote_addr;\n     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n     proxy_set_header X-Forwarded-Proto $scheme;\n     proxy_set_header X-Forwarded-Host $host;\n     proxy_set_header X-Forwarded-Port $server_port;\n\n    # /api: Domino REST API on port 8880\n    location /api {\n        proxy_pass http://127.0.0.1:8880/api;\n    }\n\n    # /admin: Domino REST API admin UI on port 8880\n    location /admin/ui/ {\n        proxy_pass http://127.0.0.1:8880/admin/ui/;\n    }\n\n    # /keep: Domino REST API Homepage on port 8880\n    location /keep {\n        proxy_pass http://127.0.0.1:8880/keep;\n    }\n\n    # /openapi: OpenAPI spec files and UI on port 8880\n    location /openapi {\n        proxy_pass http://127.0.0.1:8880/openapi;\n    }\n\n    # /EWS: ews app on port 3000\n    location /EWS {\n        proxy_pass http://127.0.0.1:3000/EWS;\n    }\n\n    # /autodiscover: ews app on port 3000\n    location /autodiscover {\n        proxy_pass http://127.0.0.1:3000/autodiscover;\n    }\n\n    # /oab: ews app on port 3000\n    location /oab {\n        proxy_pass http://127.0.0.1:3000/oab;\n    }\n\n    # /.wellknown/jmap: jmap app on port 3001\n    location /.wellknown/jmap {\n        proxy_pass http://127.0.0.1:3001/.wellknown/jmap;\n    }\n\n    # /jmap custom app on port 3001\n    location /jmap {\n        proxy_pass http://127.0.0.1:3001/jmap;\n    }\n\n    # /jmapupload jmap app on port 3001\n    location /jmapupload {\n        proxy_pass http://127.0.0.1:3001/jmapupload;\n    }\n\n    # /jmapdownload jmap app on port 3001\n    location /jmapdownload {\n        proxy_pass http://127.0.0.1:3001/jmapdownload;\n    }\n\n    # All the rest is Domino Port 81\n    # Remember: index.html still gets served by nginx\n    location / {\n        proxy_pass http://127.0.0.1:81;\n    }\n\n    location /metrics {\n        auth_basic \"You shall not pass to metrics\";\n        auth_basic_user_file /etc/nginx/.htpasswd;\n        proxy_pass http://127.0.0.1:8890/metrics;\n    }\n\n}\n</code></pre> <p>Once deployed, use Certbot to activate SSL. Remember to adjust your host name.</p>"},{"location":"howto/web/httpsproxy2.html#expected-result","title":"Expected result","text":"<p>The resulting system layout looks as follows. Domino REST API can also be installed together with Domino directly on the server (or virtual machine), but the diagram still applies.</p> <p></p> <p>As you can see, the flow is the same as multi-subdomain flow. The key is the nginx configuration.</p>"},{"location":"references/index.html","title":"References","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p> <p>This section provides technical references and descriptions for using HCL Domino REST API.</p>"},{"location":"references/index.html#system-requirements","title":"System requirements","text":"<p>Provides the minimum system requirements for Domino REST API.</p>"},{"location":"references/index.html#installation-and-configuration","title":"Installation and configuration","text":"<p>Provides information related to the installation and configuration of Domino REST API.</p> <ul> <li> <p>Functional accounts</p> </li> <li> <p>Understanding configuration</p> </li> </ul>"},{"location":"references/index.html#openapi","title":"OpenAPI","text":"<p>OpenAPI definition and specifications</p>"},{"location":"references/index.html#access-control","title":"Access control","text":"<p>Access control for various parts of the REST API</p>"},{"location":"references/index.html#using-domino-rest-api","title":"Using Domino REST API","text":"<ul> <li> <p>Overview</p> </li> <li> <p>Domino REST API CLI</p> </li> <li> <p>Domino REST API task</p> </li> <li> <p>Domino REST API roles</p> </li> <li> <p>Domino REST API Applications</p> </li> <li> <p>DataFormats</p> </li> <li> <p>Form and Alias handling</p> </li> <li> <p>Scopes</p> </li> <li> <p>Rich Text</p> </li> <li> <p>Metrics</p> </li> <li> <p>Reserved Form Modes</p> </li> </ul>"},{"location":"references/index.html#security","title":"Security","text":"<ul> <li> <p>Security overview</p> </li> <li> <p>Auth*</p> </li> <li> <p>JSON Web Token configuration</p> </li> <li> <p>Configuration parameters</p> </li> <li> <p>Encryption keys</p> </li> <li> <p>Set up oauth.nsf</p> </li> <li> <p>Custom Identity Provider</p> </li> <li> <p>Securing Domino REST API endpoints</p> </li> </ul>"},{"location":"references/index.html#user-tools","title":"User tools","text":"<ul> <li> <p>Overview</p> </li> <li> <p>curl</p> </li> <li> <p>Postman</p> </li> <li> <p>Swagger UI</p> </li> </ul>"},{"location":"references/index.html#configuration-parameters","title":"Configuration parameters","text":"<p>To learn more information about parameters used in configuration, see Configuration parameters</p>"},{"location":"references/index.html#domino-rest-api-sdks","title":"Domino REST API SDKs","text":"<p>List of available Domino REST API SDKs</p>"},{"location":"references/index.html#troubleshooting","title":"Troubleshooting","text":"<p>For addressing common errors in installing and running the Domino REST API service, see Troubleshooting</p>"},{"location":"references/index.html#quick-reference","title":"Quick reference","text":"<ul> <li> <p>Standards used by Domino REST API</p> </li> <li> <p>Glossary</p> </li> </ul>"},{"location":"references/index.html#contact-support","title":"Contact support","text":"<p>Helps you understand what information to provide to ensure that your support needs are addressed effectively. To learn more, see Contact support</p>"},{"location":"references/index.html#downloads","title":"Downloads","text":"<p>For scripts, Postman collections, sample databases, and more, see Downloads.</p>"},{"location":"references/index.html#admin-cheat-sheet","title":"Admin cheat sheet","text":"<p>For information that administrator users need to know, see Admin cheat sheet.</p>"},{"location":"references/index.html#extensions","title":"Extensions","text":"<ul> <li> <p>Extensions to open Microsoft Office in OFBA</p> </li> <li> <p>Rich Text extensions</p> </li> </ul>"},{"location":"references/index.html#deprecated-features","title":"Deprecated features","text":"<p>Deprecated features from the current and earlier releases</p>"},{"location":"references/index.html#documentation-references","title":"Documentation references","text":"<p>HCL Domino Documentation</p> <ul> <li>Provides documentation, release information, and more details on how to install, configure, and manage Domino servers and related components.</li> </ul> <p>HCL Volt MX Go Documentation</p> <ul> <li>Provides documentation and release information about HCL Volt MX Go. </li> </ul>"},{"location":"references/index.html#acknowledgements","title":"Acknowledgements","text":"<p>Database icons by monkik from www.flaticon.com.</p>"},{"location":"references/accesscontrol.html","title":"Access control","text":"<p>The Domino REST API requires the various roles to have matching Access control levels as follows:</p>"},{"location":"references/accesscontrol.html#domino-api-administrator","title":"Domino API administrator","text":"<ul> <li>should be member of the group <code>LocalKeepAdmins</code></li> <li><code>LocalKeepAdmins</code> by default has <code>Editor</code> access to <code>KeepConfig.nsf</code></li> </ul> <p>The Domino API Administrator creates scopes and (OAuth) applications. They don't create schemas, that's the responsibility of the Domino Developer. They need reader access to the application databases.</p>"},{"location":"references/accesscontrol.html#domino-developer","title":"Domino developer","text":"<p>The Domino Developer creates schemas. A schema resides in the individual database. To create, update, or delete a schema, they need <code>Designer</code> access to the application database. Access to <code>KeepConfig.nsf</code> can be as little as <code>Reader</code>,which is the default.</p> <p>Roles aren't mutually exclusive</p> <p>The various roles aren't mutually exclusive. A user can have both administrator and developer roles. In this case, they need the sum of access rights.</p>"},{"location":"references/accesscontrol.html#application-access","title":"Application access","text":"<p>The Domino REST API provides its own IdP (Identity Provider) implementation following OIDC standards. Applications are configured using a <code>client_id</code> and a <code>client_secret</code> to request access on behalf of an user.</p> <p>When an enterprise IdP shall be used, the resulting <code>AccessToken</code> needs to comply with the Domino REST API JWT specification.</p>"},{"location":"references/accesscontrol.html#anonymous-access","title":"Anonymous access","text":"<p>The Domino REST API does NOT support anonymous access.</p>"},{"location":"references/accesscontrol.html#access-via-curl-postman","title":"Access via curl / Postman","text":"<p>Direct access to configuration via <code>curl</code> or <code>Postman</code> has the same access requirements as the AdminUI. The request header needs to have a <code>Authorization: Bearer heading</code> with a valid JWT token. Since direct access doesn't perform lookups, only access to the target database, <code>KeepConfig.nsf</code> for administrators and the application databases for developers will need to be set correctly.</p>"},{"location":"references/admincheatsheet.html","title":"Admin cheat sheet","text":"<p>This is work in progress</p> <p>We are constantly working on improving Domino REST API's functionality and documentation. You have a documentation page which is not quite ready. Feel free to feedback what you would like to see here.</p> <p>The topic provides information that administrator users need to know.</p>"},{"location":"references/admincheatsheet.html#installation","title":"Installation","text":"<ul> <li>There might be an instance where Domino REST API might not load and would fail after a successful installation due to an installed protection software.</li> </ul>"},{"location":"references/deprecated.html","title":"Deprecated features","text":"<p>The following features are deprecated from this and future releases. </p>"},{"location":"references/deprecated.html#v109","title":"v1.0.9","text":"Deprecation Recommendation Additional information Use of <code>dataSource</code> or a path to an NSF in the <code>dataSource</code> parameter by most admin-v1 endpoints. Use the parameter <code>nsfPath</code> to specify the path to an NSF. The use of <code>dataSource</code> or path to an NSF in the <code>dataSource</code> parameter has been deprecated."},{"location":"references/downloads.html","title":"Downloadable assets to get you started","text":""},{"location":"references/downloads.html#domino-rest-api","title":"Domino REST API","text":"<p>Download from My HCLSoftware Portal.</p>"},{"location":"references/downloads.html#presentations","title":"Presentations","text":"<p>Engage 2022 Presentation</p>"},{"location":"references/downloads.html#docker","title":"Docker","text":"<ul> <li> <p>Docker compose file for primary server</p> </li> <li> <p>Docker compose file for additional servers</p> </li> <li> <p>Docker compose <code>sample.env</code> file</p> <p>.env</p> <p>Rename this file to <code>.env</code> and update your values before use.</p> </li> </ul>"},{"location":"references/downloads.html#postman","title":"Postman","text":"<ul> <li> <p>Domino REST API Postman collection to exercise Domino REST APIs for configuring and consuming databases.</p> </li> <li> <p>Domino REST API Postman environment for both collections.</p> </li> <li> <p>Demo.nsf - Demo database for the Postman and Tutorial examples.</p> </li> </ul>"},{"location":"references/downloads.html#bruno","title":"Bruno","text":"<ul> <li>Domino REST API Bruno collection and environment.</li> </ul> <p>This is a conversion of the Postman collection and environment, where still appropriate. It expects the Demo.nsf installed in the root of the Domino data directory.</p> <p>The following scripts are for reference only. They have been superseded by the scripts provided by the installer, so there's no need beyond satisfying curiosity to download them.</p>"},{"location":"references/downloads.html#mac","title":"Mac","text":"<ul> <li> <p>Shell script to start Domino REST API on MacOS.</p> </li> <li> <p>Modify the script and replace all instances in the Shell script before using as follows:</p> <ul> <li>programDir with the directory Notes is located in</li> <li>dataDir with the directory the Notes Data is located in</li> <li>keepDir with the directory Domino REST API is located in</li> </ul> </li> </ul>"},{"location":"references/downloads.html#windows","title":"Windows","text":"<ul> <li> <p>Command file to start Domino REST API on a Windows client.</p> </li> <li> <p>Modify the script and replace all instances in the Command file before using as follows:</p> <ul> <li>programDir with the directory Notes is located in</li> <li>dataDir with the directory the Notes Data is located in</li> <li>keepDir with the directory Domino REST API is located in</li> </ul> </li> </ul>"},{"location":"references/downloads.html#microsoft-entra-id-formerly-azure-active-directory","title":"Microsoft Entra ID formerly Azure Active Directory","text":"<p>AzureTester.zip is a simple test application you run on a local http server to check if a registered App in Microsoft Entra ID, formerly Azure Active Directory, can be used as JWT provider for the Domino REST API.</p> <p>Warning</p> <p>This is for testing only. Do NOT use this code in production.</p>"},{"location":"references/functionalUsers.html","title":"Functional accounts","text":"<p>There are a series of endpoints that aren't associated with regular user ids:</p> <ul> <li>Management console (Port 8889)</li> <li>Metrics endpoint (Port 8890)</li> <li> <p>Health check (Port 8886)</p> <p>Tip</p> <p>You can also configure access to Health check (Port 8886) using the following environment parameters:</p> <ul> <li>HEALTHCHECK_USER</li> <li>HEALTHCHECK_PASSWORD</li> </ul> </li> </ul> <p>To enable access to those, you need functional accounts. The same applies to the use of Domino REST API in a local context when running on a client.</p> <p>There are many reasons to keep these users separate from your enterprise directory:</p> <ul> <li>They need to be available when the directory isn't available.</li> <li>They don't need access to regular end points.</li> </ul> <p>Note</p> <p>Functional account names are verbatim. Domino REST API doesn't accept any variations as you expect in a Domino login.</p> <p>For information on setting up a functional account, see Set up a functional account.</p>"},{"location":"references/functionalUsers.html#functional-users-configuration-file","title":"Functional users configuration file","text":"<p>Create a file <code>functionalUsers.json</code> in the directory <code>[NotesData]/keepconfig.d</code>. Add the following JSON structure:</p> <p></p> <pre><code>{\n  \"identity\": {\n    \"healthcheckAPI\": {},\n    \"managementAPI\": {},\n    \"metricsAPI\": {},\n    \"singleDbModeUsers\": {}\n  }\n}\n</code></pre> <p>In each of the sections you specify a user object in the same way:</p> <p></p> <p>Example 1</p> <pre><code>{\n  \"metrics\": {\n    \"active\": true,\n    \"secret\": \"13549ED65AD8760294B9DC898C44F8ABEED399ABB1CA7DC51E8CCFF461D56D13:32BDC8A5DF60FCE424299543DFFF408F500DB1B1EEC4FAB848AA0ED794F5D89AA65A5449EC36BF9CBF53980E4B7DF2B3A3581186E409F5B69BC0C16E51237CC8\"\n  }\n}\n</code></pre> <p>Example 2</p> <pre><code>{\n  \"John Doe\": {\n    \"active\": true,\n    \"CN\": \"CN=John Doe/O=Mauraders\",\n    \"secret\": \"E4B321EBA91B7F92D9BF5EAFA5322824FEC2287B8A6C133D7C31EFB706A2BA30:1A57478185E7AF3A98F01ECA08F0BA881DBC88BEC60AE8C6F1B1CC5CC55C11A20F676E082BF2D28BB96DB5A8CFB091C767C035B380DB4CBC7D1001EA8BE01663\"\n  }\n}\n</code></pre> Key Purpose JSON key UserId for authentication, case sensitive, no variations. In the examples, <code>metrics</code> and <code>John Doe</code> are JSON keys. You can use other values for the JSON key. active true/false to temporarily disable an account. CN Optional: Common name in X500 format. When defined, the name is for display only. You still need to login using the JSON key as your username. secret Salted and encrypted password."},{"location":"references/functionalUsers.html#obtain-salted-passwords","title":"Obtain salted passwords","text":"<p>The management endpoint (Port 8889) has, besides others, a utility function to salt and encrypt passwords. To access the management endpoint, you need to have a salted password already. To solve this, create a file <code>tempmanagement.json</code> in your <code>keepconfig.d</code> directory and copy in the following content:</p> <pre><code>{\n  \"identity\": {\n    \"managementAPI\": {\n      \"Doctor Notes\": {\n        \"active\": true,\n        \"secret\": \"E4B321EBA91B7F92D9BF5EAFA5322824FEC2287B8A6C133D7C31EFB706A2BA30:1A57478185E7AF3A98F01ECA08F0BA881DBC88BEC60AE8C6F1B1CC5CC55C11A20F676E082BF2D28BB96DB5A8CFB091C767C035B380DB4CBC7D1001EA8BE01663\"\n      }\n    }\n  }\n}\n</code></pre> <p>This creates the user \"Doctor Notes\" with the password <code>password</code> to access the management console.</p> <p>Tip</p> <p>Don't leave default passwords in your system. When done with creating new salted passwords, securely back-up <code>tempmanagement.json</code> to prevent unauthorized access, and then restart Domino REST API. </p>"},{"location":"references/hostingstatic.html","title":"Hosting static applications","text":"<p>A typical use case for Domino REST API is to build a web UI with the flavor of the day web development framework like Angular, ReactJS, Swelte etc. These frameworks usually generate a <code>build</code> directory with a set of static files.</p> <p>You can copy that directory to <code>keepweb.d</code> in your Domino data directory and Domino REST API will serve them on the <code>/keepweb/</code> URL path. This eliminates the need for CORS configuration.</p> <p>This is similar to Domino's feature serving static files from its <code>domino/html</code> directory.</p>"},{"location":"references/ofba.html","title":"Extensions used to open the Microsoft Office in OFBA","text":"<p>Here are the file formats often used by various applications within the Microsoft Office suite and Office 365 apps. Office Forms Based Authentication\u00a0can access these file types through the Domino REST API to open and modify office documents.</p>"},{"location":"references/ofba.html#generic","title":"Generic","text":"<pre><code>csv=ms-excel:ofv|u|%s,ms-excel:ofe|u|%s\n</code></pre>"},{"location":"references/ofba.html#microsoft-word","title":"Microsoft Word","text":"<pre><code>doc=ms-word:ofv|u|%s,ms-word:ofe|u|%s\ndocm=ms-word:ofv|u|%s,ms-word:ofe|u|%s\ndocx=ms-word:ofv|u|%s,ms-word:ofe|u|%s\ndot=ms-word:ofv|u|%s,ms-word:ofe|u|%s\ndotm=ms-word:ofv|u|%s,ms-word:ofe|u|%s\ndotx=ms-word:ofv|u|%s,ms-word:ofe|u|%s\n</code></pre>"},{"location":"references/ofba.html#microsoft-powerpoint","title":"Microsoft Powerpoint","text":"<pre><code>pot=ms-powerpoint:ofv|u|%s,ms-powerpoint:ofe|u|%s\npotm=ms-powerpoint:ofv|u|%s,ms-powerpoint:ofe|u|%s\npotx=ms-powerpoint:ofv|u|%s,ms-powerpoint:ofe|u|%s\nppt=ms-powerpoint:ofv|u|%s,ms-powerpoint:ofe|u|%s\npptm=ms-powerpoint:ofv|u|%s,ms-powerpoint:ofe|u|%s\npptx=ms-powerpoint:ofv|u|%s,ms-powerpoint:ofe|u|%s\npps=ms-powerpoint:ofv|u|%s,ms-powerpoint:ofe|u|%s\nppsm=ms-powerpoint:ofv|u|%s,ms-powerpoint:ofe|u|%s\nppsx=ms-powerpoint:ofv|u|%s,ms-powerpoint:ofe|u|%s\nsldm=ms-powerpoint:ofv|u|%s,ms-powerpoint:ofe|u|%s\nsldx=ms-powerpoint:ofv|u|%s,ms-powerpoint:ofe|u|%s\n</code></pre>"},{"location":"references/ofba.html#microsoft-excel","title":"Microsoft Excel","text":"<pre><code>xla=ms-excel:ofv|u|%s,ms-excel:ofe|u|%s\nxlam=ms-excel:ofv|u|%s,ms-excel:ofe|u|%s\nxlm=ms-excel:ofv|u|%s,ms-excel:ofe|u|%s\nxls=ms-excel:ofv|u|%s,ms-excel:ofe|u|%s\nxlsb=ms-excel:ofv|u|%s,ms-excel:ofe|u|%s\nxlsm=ms-excel:ofv|u|%s,ms-excel:ofe|u|%s\nxlsx=ms-excel:ofv|u|%s,ms-excel:ofe|u|%s\nxlt=ms-excel:ofv|u|%s,ms-excel:ofe|u|%s\nxltm=ms-excel:ofv|u|%s,ms-excel:ofe|u|%s\nxltx=ms-excel:ofv|u|%s,ms-excel:ofe|u|%s\nxlw=ms-excel:ofv|u|%s,ms-excel:ofe|u|%s\n</code></pre>"},{"location":"references/ofba.html#microsoft-visio","title":"Microsoft Visio","text":"<pre><code>vdx=ms-visio:ofv|u|%s,ms-visio:ofe|u|%s  \nvsd=ms-visio:ofv|u|%s,ms-visio:ofe|u|%s\nvsdx=ms-visio:ofv|u|%s,ms-visio:ofe|u|%s\nvss=ms-visio:ofv|u|%s,ms-visio:ofe|u|%s\nvst=ms-visio:ofv|u|%s,ms-visio:ofe|u|%s\nvsw=ms-visio:ofv|u|%s,ms-visio:ofe|u|%s\nvsx=ms-visio:ofv|u|%s,ms-visio:ofe|u|%s\nvtx=ms-visio:ofv|u|%s,ms-visio:ofe|u|%s\n</code></pre>"},{"location":"references/ofba.html#microsoft-access","title":"Microsoft Access","text":"<pre><code>accda=ms-access:ofv|u|%s,ms-access:ofe|u|%s\naccdb=ms-access:ofv|u|%s,ms-access:ofe|u|%s\naccdc=ms-access:ofv|u|%s,ms-access:ofe|u|%s\naccde=ms-access:ofv|u|%s,ms-access:ofe|u|%s\naccdp=ms-access:ofv|u|%s,ms-access:ofe|u|%s\naccdr=ms-access:ofv|u|%s,ms-access:ofe|u|%s\naccdt=ms-access:ofv|u|%s,ms-access:ofe|u|%s\naccdu=ms-access:ofv|u|%s,ms-access:ofe|u|%s\nmdb=ms-access:ofv|u|%s,ms-access:ofe|u|%s\n</code></pre>"},{"location":"references/ofba.html#microsoft-project","title":"Microsoft Project","text":"<pre><code>mpd=ms-project:ofv|u|%s,ms-project:ofe|u|%s\nmpp=ms-project:ofv|u|%s,ms-project:ofe|u|%s\nmpt=ms-project:ofv|u|%s,ms-project:ofe|u|%s\n</code></pre>"},{"location":"references/ofba.html#microsoft-publisher","title":"Microsoft Publisher","text":"<pre><code>pub=ms-publisher:ofv|u|%s,ms-publisher:ofe|u|%s\n</code></pre>"},{"location":"references/ofba.html#microsoft-infopath","title":"Microsoft InfoPath","text":"<pre><code>xsn=ms-infopath:ofv|u|%s,ms-infopath:ofe|u|%s\nxsf=ms-infopath:ofv|u|%s,ms-infopath:ofe|u|%s\n</code></pre>"},{"location":"references/openapidefinitions.html","title":"OpenAPI definitions and specifications","text":"<p>The Domino REST API is driven by multiple OpenAPI 3.0.2 specifications. Every Domino server is surfacing the specifications according to its configuration. Additionally each configured access to a database (referred to as scope) is available on your server.</p> <p>The definitions below serve as reference and guide, so you can learn about the API without having the API installed.</p> <p>API definitions are individual</p> <p>Depending on your server configuration, not all endpoints will be active. Custom access definitions are not visible here</p>"},{"location":"references/openapidefinitions.html#basis","title":"Basis","text":"<p>The main API of the Domino REST API. It allows access to documents, views, folders, and agents. An external application will only need this specification.</p> <p>Explore the basis API using the ReDoc viewer</p> <p>Open the <code>openapi.basis.json</code> file</p>"},{"location":"references/openapidefinitions.html#admin","title":"Admin","text":"<p>Access to administrative functions allowing to manage:</p> <ul> <li>Users</li> <li>Groups</li> <li>Access control lists (ACL)</li> </ul> <p>Explore the admin API using the ReDoc viewer</p> <p>Open the <code>openapi.admin.json</code> file</p>"},{"location":"references/openapidefinitions.html#setup","title":"Setup","text":"<p>The setup API provides endpoints to configure access to databases. You can specify what documents, views, folders, agents, and items are made available in the REST API. Requires designer access to databases and <code>LocalKeepAdmins</code> membership.</p> <p>Explore the setup API using the ReDoc viewer</p> <p>Open the <code>openapi.setup.json</code> file</p>"},{"location":"references/openapidefinitions.html#pim","title":"PIM","text":"<p>PIM stands for \"Personal Information Management\" and includes access to mail, calendar, contacts, todos, and notebook. Access is based on users ownership of mail resources.</p> <p>Explore the PIM API using the ReDoc viewer</p> <p>Open the <code>openapi.pim.json</code> file</p>"},{"location":"references/openapidefinitions.html#poi","title":"POI","text":"<p>We named this API in honor of an Apache project that enables the access to Microsoft office formats.</p> <p>Explore the POI API using the ReDoc viewer</p> <p>Open the <code>openapi.poi.json</code> file</p>"},{"location":"references/openapidefinitions.html#webdav","title":"WebDAV","text":"<p>Web Distributed Authoring and Versioning or WebDAV API provides endpoints to perform remote Web content authoring operations that support the Office Round Trip Experience and Virtual Spreadsheet features of Domino REST API.  </p> <p>Note</p> <p><code>PROPFIND</code>, <code>LOCK</code>, and <code>UNLOCK</code> methods aren't included since these aren't supported by OpenAPI.</p> <p>Open the <code>openapi.webdav.json</code> file</p>"},{"location":"references/openapidefinitions.html#wopi","title":"WOPI","text":"<p>Web Application Open Platform Interface or WOPI protocol provides a set of endpoints that enable online collaborative editing of document attachments in Domino. WOPI is a well documented open protocol, for more information, see the WOPI documentation.</p> <p>Open the <code>openapi.wopi.json</code> file</p>"},{"location":"references/openapidefinitions.html#openapi-extensions","title":"OpenAPI extensions","text":"<p>The OpenAPI specification is extensible, for one you can define new data types beyond the default types and you can introduce new method attributes prefixed with <code>x-</code>. We added the following data types:</p> <ul> <li>Names : translate from/to a Domino names item</li> <li>Authors: translate from/to a Domino authors item</li> <li>Readers: translate from/to a Domino readers item</li> <li>RichText</li> </ul>"},{"location":"references/openapidefinitions.html#custom-attributes","title":"Custom attributes","text":"Name Value Purpose x-keep-version number active since which API version, governed by config.json x-keep-nofly enum (SERVER,CLIENT,EOS) In which mode client, server, light is this unavailable x-preview boolean Is the endpoint available as preview only x-keep-scope string ANY, $SETUP -&gt; scope requirements for endpoint x-content-disposition string specify content use (attachment vs. inline)"},{"location":"references/openapidefinitions.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"references/parameters.html","title":"Configuration parameters","text":"<p>The configuration is assembled from JSON files and a few selected environment parameters. We use those environment parameters because they're a commonly used way to configure instances in virtual environments such as Docker, IBM Cloud, and Kubernetes.</p> <p>The Domino REST API ships with default settings in internal files <code>config.json</code> and <code>security.json</code>. These are internal files and not subject to user modifications.</p> <p>CaSe SeNsItIvE</p> <p>Parameters are case sensitive</p> <p>To alter a parameter, either set an environment parameter, if one exists (there aren't that many) or create a JSON file in <code>keepconfig.d</code> by following the the steps in Modify configuration of Domino REST API.</p>"},{"location":"references/parameters.html#environment","title":"Environment","text":"Parameter Description PORT: 8880 HTTP(S) port for the Domino REST API service. METRICSPORT: 8890 Endpoint for Prometheus Metrics. JwtDuration Lifetime in seconds for the internal JWT provider. Default value is 2 hours. maxJwtDuration Maximum lifetime in seconds that the JWT tokens get accepted. Default value is 24 hours. TLSFile TLS file with key for jks, pem or pfx. TLSPassword Password for jks and pfx key file. HEALTHCHECK_USER Username for accessing Health check (Port 8886) HEALTHCHECK_PASSWORD Password for accessing Health check (Port 8886)"},{"location":"references/parameters.html#parameters-in-json-files","title":"Parameters in JSON files","text":"<p>A configuration can have the following top-level properties. These properties are case-sensitive.</p> Property Type Description HOST String Hostname or IP address to bind to, default is not set MANAGEMENTPORT int (0 to 65353) (default 8889) Commands regarding the runtime, for example config and shutdown, should only be exposed to an admin network workstation. METRICSPORT int (0 to 65353) (default 8890) Port for Prometheus metrics. Firehoseport int (0 to 65353) (default 42424) Port for Firehose to successfully deliver data to custom HTTP endpoints. PORT int (0 to 65353) (default 8880) The port for regular API access. prometheusMetrics prometheusParameters Parameters to hand over to the Prometheus task from vert.x. versions versionParameters List of the OpenAPI definition files to load. verticles verticlesParameters The verticles to load. vertx vertxParameters Parameters to hand to the start of vert.x, see the vert.x documentation for details. ServerDirectDBAccess Boolean Set to <code>true</code> to allow Direct Database access for server. createKeepDBfromTemplate Boolean Set to <code>true</code> to allow create Domino REST API Database from template. useJnxDesigns Boolean Set to <code>false</code> to stop the use of Jnx Designs. AllowJwtMail Boolean Set to <code>true</code> to allow email to be sent via a JWT token. AllowLocalMailFile Boolean Set to <code>true</code> to allow local mail file \u2060showDeprecatedEndpoints Boolean True to allow access to deprecated endpoints / APIs \u2060showPreviewFeatures Boolean True to allow preview access to new features, endpoints, or APIs bodyHandler bodyHandler parameters Handles HTTP file uploads and used to limit body sizes webAuthnActive Boolean Set to <code>true</code> to enable WebAuthn to be active. jwt JWT parameters Parameters for enabling Domino REST API to accept JWT tokens from external providers LandingPageRedirect String Alternative landing page for those who prefer a different layout than the tiled landing page. Ensure the URL provided is valid and complete. TokenCookie Boolean (default <code>false</code>) Set to <code>true</code> to allow Domino REST API to send back JWT as cookie named <code>KeepToken</code>. The cookie expiry is the same as the JWT expiry. It immediately expires when logout is called. AdminUIKeepLogin Boolean (default <code>true</code>) If set to <code>true</code>, displays the username and password login in the Admin UI login page. If this and <code>AdminUIOIDCLogin</code> are set to <code>false</code>, the Admin UI login page behaves as if this is set to <code>true</code>. AdminUIOIDCLogin Boolean (default <code>true</code>) If set to <code>true</code>, displays the IdP logins in the Admin UI login page. WopiSessionSeconds int Duration of WOPI session in seconds. Default is <code>36000</code> (10 hours). WebdavSessionSeconds int Duration of Webdav session in seconds. Default is <code>300</code> (5 minutes). WopiLockSeconds int Duration of WOPI lock in seconds. Should be less than or the same as <code>WopiSessionSeconds</code>. Default is <code>1800</code> (15 minutes). WebdavLockSeconds int Duration of Webdav lock in seconds. Should be less than or the same as <code>WebdavSessionSeconds</code>. Default is <code>300</code> (5 minutes)."},{"location":"references/parameters.html#backpressure-handling-parameters","title":"Backpressure handling parameters","text":"<p>These parameters control the flow of requests to Domino, to shape acceptable load</p> Property Type Description concurrentRequestMaxCount int How many requests can concurrently be opened to Domino core <code>-1</code> = unlimited concurrentRequestDelay int Number of milli seconds to retry an operation (default = <code>42</code>) concurrentRequestRetries int number of retries before rejecting a request (default = <code>100</code>)"},{"location":"references/parameters.html#prometheus-parameters","title":"Prometheus parameters","text":"Property Type Description Endpoint String Route path to metrics. enabled Boolean true to enable metrics collection. publishQuantiles Boolean true to publish Quantiles."},{"location":"references/parameters.html#version-parameters","title":"Version parameters","text":"<p>Versions has a named list of entries with two parameters:</p> Property Type Description path String Path used by <code>getResourceAsStream</code> to load an OpenAPI specification file. active Boolean Whether the spec is loaded. disabledOperationIds Array Receives the <code>operationID</code> of an endpoint or endpoints in an API schema as value to make those endpoints unavailable <p>The name of the entries must match the name used in versions of the RestAPI verticle.</p>"},{"location":"references/parameters.html#vertx-parameters","title":"Vert.x parameters","text":"Property Type Description metric metricsParameters Parameter for vert.x metrics."},{"location":"references/parameters.html#metrics-parameters","title":"Metrics parameters","text":"<p>Here is a JSON representation of the resource:</p> <pre><code>{\n  \"enabled\": true,\n  \"jvmMetricsEnabled\": true,\n  \"metricuser\": \"metrics\"\n}\n</code></pre> Property Type Description disabledMetricsCategories Array of Strings Specified in the MetricsDomain Java class, for example <code>vertx.http.server</code> enabled Boolean Whether metrics are enabled on the Vert.x instance. jvmMetricsEnabled Boolean Whether JVM metrics are collected. labels Array of Strings List of labels to enable / disable. labelMatches Array of Match List of rules for label matching. registryName String Name for the metrics registry, so that a new registry is created and associated with this name. Leave blank for default."},{"location":"references/parameters.html#verticle-parameters","title":"Verticle parameters","text":"<p>Verticles defines a separate unit of work for particular tags. For the Rest API verticle, see below. The rest have a standard set of parameters:</p> Property Type Description active Boolean Whether to load this verticle. This can be used to limit available operations. For example, on an external facing server set all but the <code>basis</code> API to false className String Class to use for the verticle. Typically this is <code>com.hcl.domino.keep.verticles.DominoDefaultVerticle</code>, unless you need to extend that class. tags Object Tags from OpenAPI specs to allocate to this verticle and the package in which to find the NSFHandlers. instances int Relevant only for RestAPI verticle, loads multiple instances that each use a thread pool. You will need to be aware of the number of cores available and scalability, see the Vert.x documentation. threadPoolName String When a verticle should use a dedicated pool for the <code>executeBlocking</code> operations (a.k.a all calls into the Domino C API), the name for thread pool. By default, it's assigned 10 threads, but this can be overwritten with <code>threadPoolSize</code>. Don't use the same <code>threadPoolName</code> by multiple verticles, sharing isn't supported. threads int Only used for worker threads with a specific <code>threadPoolName</code>. The default is 10, but this can be overwritten. worker Boolean To make this a worker verticle. Worker verticles run on their own event loop thread, pulled from a preconfigured pool of 20 threads. Use for heavy-duty verticles. threadTimeout long defaults to 2. Number of minutes for an <code>executeBlocking</code> to time out. Only in effect when a <code>threadPoolName</code> is specified. <p>The following are types of verticles with additional parameters:</p>"},{"location":"references/parameters.html#asyncagentscheduler-verticle","title":"AsyncAgentScheduler verticle","text":"<p>This is the verticle for running async agents - calls to <code>/run/agent</code> with <code>async</code> set to <code>true</code> in the payload. In the Notes client you can look at <code>KeepAgents.nsf</code> for the asynchronous agents that are running or have run. This properties for this verticle include the above, plus these:</p> Property Type Description agentDefaultMaxDurationSeconds int Timeout for asynchronous agents, in seconds. A value of -1 allows all agents to run to completion without timeout. logFrequencyMs int Frequency to log messages of running async agents to the console."},{"location":"references/parameters.html#restapi-verticle","title":"RestAPI verticle","text":"<p>This is the verticle for managing WebHandlers. <code>worker</code>, <code>threadPoolName</code>, <code>threadPoolSize</code>, <code>className</code> and <code>active</code> parameters are as for the other verticles. This verticle also has a <code>versions</code> parameter. This maps to the top-level <code>versions</code> parameter and has the following properties:</p> Property Type Description defaultClass String Class to use for the WebHandler if no class is defined. <code>com.hcl.domino.keep.handlers.v1.DefaultJsonHandler</code> handles any authenticated endpoint that receives either no body or a body with ContentType as <code>application/json</code> and responds with ContentType as <code>application/json</code>. defaultDatabase String Domino REST API Database to use if there is no query parameter for \"db\" passed. package String Package in which to find the WebHandlers for this version. route String URL path for all OpenAPI endpoints for this spec."},{"location":"references/parameters.html#bodyhandler-parameters","title":"BodyHandler parameters","text":"Property Type Description uploadsDirectory String Sets the uploads directory to use. Default value is <code>keep-file-uploads.d</code> bodyLimit int Sets the maximum body size in bytes. Setting the value to <code>-1</code> means no limit."},{"location":"references/parameters.html#jwt-parameters","title":"JWT parameters","text":"Property Type Description active Boolean Set to <code>true</code> to load the JWT providerURL String Base or full URI to the endpoint of the external JWT provider algorithm / alg String Signing algorithm being used kid String Stands for key ID and is a hint indicating which key was used to secure the JWS. keyFile String Path to the JWT public key iss String Identifies the principal that issued the JWT. The value is a case-sensitive string containing a string or URI value. aud String Identifies the recipient that the JWT is intended for. When configuring Microsoft Entra ID, formerly Azure Active Directory, as an IdP, the value of this parameter is the Application ID URI you configured. adminui JWT Admin UI parameters Parameters for enabling this external IdP to use for Admin UI login. ofba JWT OFBA parameters Parameters for enabling this external IdP to use for OFBA."},{"location":"references/parameters.html#jwt-admin-ui-parameters","title":"JWT Admin UI parameters","text":"Property Type Description active Boolean Set to <code>true</code> to enable the use of external IdP in Admin UI login. client_id String External IdP client ID to use for Admin UI login, defaults to <code>keepadminui</code>. application_id_uri String An optional property. Required when external IdP is Microsoft Entra ID, formerly Azure Active Directory. End with a <code>/</code>."},{"location":"references/parameters.html#jwt-ofba-parameters","title":"JWT OFBA parameters","text":"Property Type Description active Boolean Set to <code>true</code> to enable the use of external IdP in OFBA. client_id String External IdP client ID to use for OFBA, defaults to <code>keepofba</code>. application_id_uri String An optional property. Required when external IdP is Microsoft Entra ID, formerly Azure Active Directory. End with a <code>/</code>."},{"location":"references/parameters.html#remarks","title":"Remarks","text":""},{"location":"references/parameters.html#named-elements-vs-arrays","title":"Named elements vs. arrays","text":"<p>All configuration entries are named entries and not arrays, since named entries can be merged in the configuration while arrays can only be overwritten.</p>"},{"location":"references/parameters.html#deactivation-of-entries","title":"Deactivation of entries","text":"<p>The <code>config.json</code> in the Jar has the entry for the <code>setup</code> API as:</p> <pre><code>    \"versions\": {\n    \"setup\": {\n            \"path\": \"/schema/openapi.setup.json\",\n            \"active\": true\n        }\n    }\n</code></pre> <p>When you supply your own <code>some.json</code> in the <code>config.d</code> directory:</p> <pre><code>    \"versions\": {\n    \"setup\": {\n            \"active\": false\n        }\n    }\n</code></pre> <p>the resulting configuration available to Domino REST API is:</p> <pre><code>    \"versions\": {\n    \"setup\": {\n            \"path\": \"/schema/openapi.setup.json\",\n            \"active\": false\n        }\n    }\n</code></pre> <p>In summary, the <code>setup</code> API isn't loaded. This is the mechanism to disable default components without having to update the Jar.</p>"},{"location":"references/parameters.html#overwriting-the-values","title":"Overwriting the values","text":"<p>All values can be over written by entries in the <code>keepconfig.d</code> located in your Notes/Domino Data directory. If this directory doesn't exist, create it. The structure needs to be the same as in the default file, but only needs the entries you want to change.</p>"},{"location":"references/parameters.html#making-excluded-database-files-and-directories-available","title":"Making excluded database files and directories available","text":"<p><code>config.json</code> includes the following JSON object that defines the excluded NSF files and directories.</p> <pre><code>\"nsfExclusions\": {\n    \"mail/\": true,\n    \"KeepConfig.nsf\": true,\n    \"KeepConfig.ntf\": true,\n    \"KeepAgents.nsf\": true,\n    \"KeepAgents.ntf\": true,\n    \"KeepOAuth.ntf\": true,\n    \"oauth.nsf\": true,\n    \"names.nsf\": true,\n    \"*.ntf\": true,\n    \"help/\": true,\n    \"as_\": true,\n    \"MJ\": true,\n    \"domino/\": true\n   }\n</code></pre> <p>To make an NSF file or directory, defined in the JSON object, available in the list of databases available when you define a schema in the Admin UI, see Enable excluded database files and directories.</p>"},{"location":"references/richtextension.html","title":"Rich Text extension","text":"<p>Rich Text extension is for customers or users that prefer to have or use their own implementation of Rich Text processor.\u00a0Users will be able to adjust it to meet their own needs, resulting in a better representation of their Rich Text.</p>"},{"location":"references/richtextension.html#extend-domino-rest-api-rich-text","title":"Extend Domino REST API Rich Text","text":"<p>Starting Domino REST API version <code>1.0.12</code>, you can now add Rich Text processors for Domino REST API.</p>"},{"location":"references/richtextension.html#built-in-rich-text-processors","title":"Built-in Rich Text processors","text":"<p>There has been no change for the existing processors, namely:</p> <ul> <li>mime</li> <li>html</li> <li>markdown</li> <li>plain</li> </ul>"},{"location":"references/richtextension.html#set-up-extending-rich-text","title":"Set up extending Rich Text","text":"<p>There are a number of things you should set up before you can create an extension.</p>"},{"location":"references/richtextension.html#install-keep-core-and-extension-jars","title":"Install KEEP core and extension JARs","text":"<ol> <li>Install Domino REST API using the Domino REST API installer.</li> <li>Find <code>keep-core-&lt;version&gt;.jar</code> and <code>keep-extension-&lt;version&gt;.jar</code> in the Domino REST API install directory and do a Maven install using the following command:</li> </ol> <pre><code>mvn install:install-file -Dfile=&lt;path-to-keep-core-jar&gt;\nmvn install:install-file -Dfile=&lt;path-to-keep-extension-jar&gt;\n</code></pre> <p>This adds KEEP Core and the extension module to your local Maven M2 repository.</p>"},{"location":"references/richtextension.html#extend-rich-text","title":"Extend Rich Text","text":""},{"location":"references/richtextension.html#set-up-rich-text-extension-project","title":"Set up Rich Text extension project","text":"<ol> <li> <p>Create a new project for the Rich Text extension by creating a new Maven project using the following command:</p> <pre><code>mvn archetype:generate -DgroupId=com.example -DartifactId=richtext-extension -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.4 -DinteractiveMode=false\n</code></pre> <p>The command generates a directory called <code>richtext-extension</code>, including a <code>src</code> folder and a <code>pom.xml</code> file.</p> </li> <li> <p>Open the <code>pom.xml</code> file and change the settings of <code>maven.compiler.source</code> and <code>maven.compiler.target</code> to <code>1.8</code> for Domino r12. For Domino r14, change it to <code>17</code>.</p> </li> <li> <p>Under the dependencies section, include the extension JAR you installed earlier:</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.hcl.domino.keep&lt;/groupId&gt;\n  &lt;artifactId&gt;keep-extension&lt;/artifactId&gt;\n  &lt;version&gt;1.33.0&lt;/version&gt; &lt;!-- your Keep version --&gt;\n  &lt;scope&gt;provided&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> </li> <li> <p>Save the <code>pom.xml</code> after adding the dependency.</p> </li> </ol> <p>Note</p> <p>The <code>scope</code> is set to <code>provided</code> because you don't want the dependency to be compiled together with your Rich Text extension as you will be putting the extension JAR alongside the DRAPI JARs. The DRAPI JARs contain all the dependencies that your extension JAR needs.</p> <p>Note</p> <p>Though DRAPI has many transitive dependencies, those listed in the <code>keep-extension</code> module directly are considered safe to rely on. Others may change in any version.</p>"},{"location":"references/richtextension.html#creating-your-own-rich-text-processors","title":"Creating your own Rich Text processors","text":"<p>There are 2 different interfaces that you can implement to create your own Rich Text processor, <code>IncomingRichtextProcessor</code> and <code>OutgoingRichtextProcessor</code>.</p>"},{"location":"references/richtextension.html#incoming-rich-text-processor","title":"Incoming Rich Text processor","text":"<p>This processes how the incoming Rich Text JSON is saved in the <code>richtext</code> field. This processor makes use of the <code>type</code> property in Rich Text JSON to determine what incoming Rich Text processor to use.</p>"},{"location":"references/richtextension.html#built-in-incoming-rich-text-processors","title":"Built-in incoming Rich Text processors","text":"<p>There are four built-in incoming Rich Text processors:</p> <ul> <li><code>multipart/mixed</code> - used by default if <code>type</code> in Rich Text JSON doesn't equate to any existing Rich Text processor.</li> <li><code>text/plain</code></li> <li><code>text/markdown</code></li> <li><code>text/html</code></li> </ul>"},{"location":"references/richtextension.html#creating-your-own-incoming-rich-text-processor","title":"Creating your own incoming Rich Text processor","text":"<ol> <li> <p>Create a class that implements <code>IncomingRichtextProcessor</code>.</p> <p>Currently, <code>IncomingRichtextProcessor</code> has three methods. Two of which have default implementations.</p> <p><code>getProcessorName</code> is an abstract method that should return a <code>String</code> that represents the name of the incoming Rich Text processor. It checks this against the <code>type</code> property of a Rich Text JSON to determine if this incoming processor should be used.</p> <p><code>process</code> is a method that has a default implementation. By default, it checks if the incoming <code>content</code> of the Rich Text JSON looks like a mime and directly returns it as a <code>Buffer</code>. If not, it manually constructs a mime using the Rich Text JSON properties, and return the constructed mime as a <code>Buffer</code>. You are also free to override this method and control how you want to save the incoming Rich Text.</p> <p><code>getPriority</code> is a default method that returns <code>0</code>. You can leave this method be, unless you have an incoming Rich Text processor that has the same return value of <code>getProcessorName</code> with other existing incoming Rich Text processors. The higher the number, the higher the priority.</p> <p>An example incoming Rich Text processor will be:</p> <pre><code>package com.example;\n\nimport java.util.Optional;\nimport java.util.Set;\n\nimport com.hcl.domino.keep.info.richtext.CreateAdditional;\nimport com.hcl.domino.keep.info.richtext.RichtextMimeHelper;\nimport com.hcl.domino.keep.info.richtext.spi.IncomingRichtextProcessor;\n\nimport io.vertx.core.buffer.Buffer;\nimport io.vertx.core.json.JsonObject;\n\n/**\n * Always saves \"Hi!\" as a text/plain mime regardless of what's inside the Rich Text JSON\n */\npublic class AlwaysHiIncomingRichtextProcessor implements IncomingRichtextProcessor {\n\n  @Override\n  public String getProcessorName() {\n    return \"alwayshi\";\n  }\n\n  @Override\n  public Optional&lt;Buffer&gt; process(JsonObject richJson, byte[] contentBytes,\n      final Set&lt;CreateAdditional&gt; createAdditional) {\n    final Optional&lt;String&gt; mime = RichtextMimeHelper.plain2mime(\"Hi!\".getBytes());\n\n    if (!mime.isPresent()) {\n      return Optional.empty();\n    }\n    return Optional.of(Buffer.buffer(mime.get()));\n  }\n\n}\n</code></pre> </li> <li> <p>Create a file within the <code>src/main/resources/META-INF/services</code> directory and name the file <code>com.hcl.domino.keep.info.richtext.spi.IncomingRichtextProcessor</code>.</p> </li> <li> <p>Edit the file <code>com.hcl.domino.keep.info.richtext.spi.IncomingRichtextProcessor</code>\u00a0and include all the Rich Text extensions you created, such as:</p> <pre><code>com.example.AlwaysHiIncomingRichtextProcessor\n</code></pre> </li> </ol> <p>Important</p> <p>All classes declared in this file must exist and implement the <code>IncomingRichtextProcessor</code> class. Otherwise, an error occurs when attempting to load this using Domino REST API.</p>"},{"location":"references/richtextension.html#outgoing-rich-text-processor","title":"Outgoing Rich Text processor","text":"<p>This processes how the saved data in a <code>richtext</code> field is shown when returned as a response to a GET request. This processor uses the value of the <code>richTextAs</code> query parameter to know which outgoing Rich Text processor to use.</p>"},{"location":"references/richtextension.html#built-in-outgoing-rich-text-processors","title":"Built-in outgoing Rich Text processors","text":"<p>There are four built-in outgoing Rich Text processors:</p> <ul> <li><code>mime</code></li> <li><code>plain</code></li> <li><code>markdown</code></li> <li><code>html</code></li> </ul>"},{"location":"references/richtextension.html#creating-your-own-outgoing-rich-text-processor","title":"Creating your own outgoing Rich Text processor","text":"<ol> <li> <p>Create a class that implements <code>OutgoingRichtextProcessor</code>.</p> <p>Currently, <code>OutgoingRichtextProcessor</code> has three methods. One of which has default implementations.</p> <p><code>getProcessorName</code> is an abstract method that should return a <code>String</code> that represents the name of this incoming Rich Text processor. It checks this against the <code>richTextAs</code> query parameter of the GET request to know which outgoing Rich Text processor to use.</p> <p><code>process</code> is an abstract method that can be overwritten to specify how to represent the Rich Text content in the response.</p> <p><code>getPriority</code> is a default method that returns <code>0</code>. You can leave this method be, unless you have an outgoing Rich Text processor that has the same return value of <code>getProcessorName</code> with other existing outgoing Rich Text processors. The higher the number, the higher the priority.</p> <p>An example outgoing Rich Text processor would be:</p> <pre><code>package com.example;\n\nimport com.hcl.domino.DominoClient;\nimport com.hcl.domino.data.Document;\nimport com.hcl.domino.keep.info.richtext.spi.OutgoingRichtextProcessor;\n\nimport io.vertx.core.json.JsonObject;\n\n/**\n * Always returns \"Hello!\" in the content of the Rich Text JSON response.\n */\npublic class AlwaysHelloRichtextProcessor implements OutgoingRichtextProcessor {\n\n  @Override\n  public String getProcessorName() {\n    return \"alwayshello\";\n  }\n\n  @Override\n  public JsonObject process(DominoClient client, Document doc, String itemName) {\n    return new JsonObject()\n        .put(\"type\", \"text/plain\")\n        .put(\"encoding\", \"plain\")\n        .put(\"content\", \"Hello!\");\n  }\n\n}\n</code></pre> </li> <li> <p>Create a file within the <code>src/main/resources/META-INF/services</code> directory and name the file <code>com.hcl.domino.keep.info.richtext.spi.OutgoingRichtextProcessor</code>.</p> </li> <li> <p>Edit the file <code>com.hcl.domino.keep.info.richtext.spi.OutgoingRichtextProcessor</code> and include all the Rich Text extensions you created, such as:</p> <pre><code>com.example.AlwaysHelloRichtextProcessor\n</code></pre> </li> </ol> <p>Important</p> <p>All classes declared in this file must exist and implement the <code>OutgoingRichtextProcessor</code> class. Otherwise, an error occurs when attempting to load this using Domino REST API.</p>"},{"location":"references/richtextension.html#apply-the-rich-text-extension","title":"Apply the Rich Text extension","text":"<p>Once you have finished creating your Rich Text extensions, it's time\u00a0to use it. Create the JAR file for the Rich Text extension by running the following command:</p> <pre><code>mvn clean package\n</code></pre> <p>This creates a JAR file inside the target directory with the name <code>richtext-extension-1.0-SNAPSHOT.jar</code>. Copy this JAR file and paste it into where your KEEP JARs are at (Domino REST API directory).</p>"},{"location":"references/richtextension.html#try-it-out","title":"Try it out","text":""},{"location":"references/richtextension.html#try-the-incoming-rich-text-processor","title":"Try the incoming Rich Text processor","text":"<p>Create a form that has a <code>richtext</code> field in it. An example response body would be:</p> <pre><code>{\n  ...\n  \"Form\": \"SampleForm\",\n  \"rtField\": {\n    \"type\": \"alwayshi\",\n    \"encoding\": \"plain\",\n    \"content\": \"my content\"\n  },\n  ...\n}\n</code></pre> <p>Notice that the <code>type</code> in the Rich Text JSON is set to the name of your own incoming Rich Text processor <code>alwayshi</code>.</p> <p>Before executing the request, you should set the value of <code>richTextAs</code> query parameter to <code>plain</code> so you can verify the value of the <code>richtext</code> field in plain text.</p> <p>After executing the request, you should get the following JSON for the <code>richtext</code> field:</p> <pre><code>{\n  \"type\": \"text/plain\",\n  \"encoding\": \"plain\",\n  \"content\": \"Hi!\"\n}\n</code></pre>"},{"location":"references/richtextension.html#try-the-outgoing-rich-text-processor","title":"Try the outgoing Rich Text processor","text":"<p>To try it out, you can call any API that has a <code>richTextAs</code> query parameter, and set its value to your processor name.</p> <p>For example, if you use the <code>AlwaysHelloRichtextProcessor</code>, since its <code>getProcessorName</code> method returns <code>alwayshello</code>, if you do an API and set <code>richTextAs=alwayshello</code>, you should get the following JSON value for the <code>richtext</code> fields:</p> <pre><code>{\n  \"type\": \"text/plain\",\n  \"encoding\": \"plain\",\n  \"content\": \"Hello!\"\n}\n</code></pre>"},{"location":"references/sdk.html","title":"Domino REST API SDKs","text":""},{"location":"references/sdk.html#domino-rest-api-nodejs-sdk","title":"Domino REST API Node.js SDK","text":"<p>Domino REST API Node.js SDK is a library that can help Node.js developers build applications that use Domino REST API. Domino REST API Node.js SDK also supports TypeScript.</p> <p>For more information, see the Node.js SDK on GitHub </p>"},{"location":"references/sdk.html#domino-rest-api-golang-sdk","title":"Domino REST API Golang SDK","text":"<p>Domino REST Go SDK is a package build designed to assist developers in integrating Domino with their applications.</p> <p>For more information, see the Golang SDK on GitHub </p>"},{"location":"references/support.html","title":"Contact support","text":""},{"location":"references/support.html#overview","title":"Overview","text":"<p>The topic helps you understand what information to provide to ensure that your support needs are addressed effectively. This is in addition to the standard details required when creating a support case .</p>"},{"location":"references/support.html#details-to-provide","title":"Details to provide","text":""},{"location":"references/support.html#issue-summary","title":"Issue summary","text":"<p>Provide a clear and concise description that captures the main point of the issue you're experiencing. This enables the customer support team to better understand the nature of the issue.</p> <p>You usually provide the issue summary in the Subject field of the support case ticket.</p> <p>Example:</p> <p>Users can't log in to the Admin UI after upgrading from Domino REST API v1.1.2 to Domino REST API v1.1.3.</p>"},{"location":"references/support.html#detailed-description","title":"Detailed description","text":"<p>Provide a detailed explanation of the issue including:</p> <ul> <li> <p>What you were doing when the issue occurred?</p> <p>You should provide a detailed account of your actions leading up to the issue. Describe what you were doing at the time you encountered the issue and clarify the result you anticipated from those actions. Additionally, explain the actual outcome you experienced, including any errors or unexpected results that arose during the process. This information helps in diagnosing the problem accurately.</p> </li> <li> <p>Exact steps you took to encounter the issue</p> <p>You should provide an account of the specific steps you undertook before encountering the issue. By detailing each step, you enable the customer support team to analyze whether any of these steps may have inadvertently caused or contributed to the problem you are experiencing.</p> </li> <li> <p>Environment details</p> <p>You should provide the details of the environment you are using when you experienced the issue. Details include operating system version, Domino version, Domino REST API version, and any other relevant information.</p> <p>Note</p> <p>Support might require additional information aside from the environment details you provided as needed.</p> </li> <li> <p>Changes/updates done before the issue</p> <p>You should detail any environmental changes or updates made before experiencing the issue. This information helps the customer support team determine if those changes or updates may have caused or contributed to the issue.</p> </li> <li> <p>Attempts at self-resolution</p> <p>You should clearly outline the efforts you made to resolve the issue you encountered. For each attempt, provide an account of the steps you took, including any specific actions, tools, or resources you utilized, and the outcomes of those actions. This helps the customer support team to better understand the situation, identify any improvements in your approach, and focus on other solutions that you haven't tried.</p> <p>If applicable, use your browser's developer tools to inspect and debug the error you encountered, and then share the errors and log messages you found. For more information on using your browser's developer tools, see Additional information.</p> </li> </ul>"},{"location":"references/support.html#desired-outcome","title":"Desired outcome","text":"<p>Providing a clear, specific, and actionable description of your desired outcome when submitting a support ticket is essential. This clarity helps the customer support team understand exactly what resolution or result you expect, ultimately speeding up the resolution process.</p> <p>When stating your needs, specify what you want to achieve or fix, include any particular requirements or conditions to take into account, and describe how you want the software to behave after the issue resolution. Additionally, indicate if the customer support request is urgent or critical to your operations.</p>"},{"location":"references/support.html#support-package","title":"Support package","text":"<p>It's essential that the support package be provided to the customer support team when requesting assistance to resolve an encountered issue. The support package can help the customer support team to better identify, troubleshoot, and resolve encountered issues. For more information on what's included in the support package and how to create it, see Create support package.</p>"},{"location":"references/support.html#additional-information","title":"Additional information","text":"<p>You can use your browser's developer tools to inspect and debug the error you encountered, and then you can share the errors and log messages to the customer support team.</p> <p>To use the developer tools:</p> <ol> <li> <p>Access the developer tools.</p> <p>On your browser, right-click anywhere on the webpage and choose Inspect or Inspect Element from the context menu. Alternatively, you can use keyboard shortcuts: press F12 or Ctrl+Shift+I on Windows or Linux, or Cmd+Option+I on a Mac.</p> <p>The following image shows an example of the developer tools open when inspecting the Admin UI and with the Console tab selected.</p> <p></p> </li> <li> <p>Examine the Console.</p> <p>Navigate to the Console tab within the developer tools. Here, you'll encounter error messages generated by the website's code, warnings, and other crucial information. The Console details the type of error, its location, and the specific line number, allowing you to identify the source of the problem. Typically, errors are highlighted in red text for quick recognition.</p> </li> <li> <p>(Optional) Investigate network errors.</p> <p>In cases where you suspect that errors may be linked to network requests, it can be helpful to access the Network tab within the developer tools. This enables you to filter the displayed requests by their status, making it easier to identify any issues. By clicking on the name of a request that has failed, you can view additional details regarding the error, including the specifics of the response.</p> </li> </ol>"},{"location":"references/support.html#customer-support-portal","title":"Customer Support portal","text":"<p>To open support tickets, go to the Customer Support  portal.</p>"},{"location":"references/sysreq.html","title":"System Requirements","text":"<p>View the System Requirements to learn what's needed to run Domino REST API.</p>"},{"location":"references/troubleshooting.html","title":"Troubleshooting","text":"<p>This reference intends to guide you in addressing common errors in installing and running the Domino REST API service. Common errors and their corresponding resolutions are described below:</p>"},{"location":"references/troubleshooting.html#domino-not-running-first-time-setup","title":"Domino Not Running (First-Time Setup)","text":"<p>If Domino isn't up and running, see Troubleshooting one-touch Domino Setup.</p>"},{"location":"references/troubleshooting.html#rest-api-not-responding","title":"REST API not responding","text":"<p>You get a timeout error when trying to access <code>http://yourserver:8880</code>, wherein <code>yourserver</code> is the DNS name of your Domino server. </p> <p>Solution</p> <p>You need to check if the REST API is loaded. </p> <ol> <li>In the Domino server console, type <code>show tasks</code>. </li> <li>If there is no <code>restapi</code> entry in the list, load it using <code>load restapi</code> in the Domino console. </li> <li>If it's listed, shut it down with <code>tell restapi quit</code> before trying <code>load restapi</code>. </li> <li>Take note of any messages in case you need more support.</li> </ol>"},{"location":"references/troubleshooting.html#address-already-in-use-error","title":"Address already in use error","text":"<p>You get this error when you run the sample script with the sample Notes database:</p> <p>2021-01-28 15:39:07 ERROR Launch:707 - Management server failed to launch on 0.0.0.0:8889 2021-01-28 15:39:07 ERROR Launch:258 - Fatal java.net.BindException: Address already in use</p> <p>Solution </p> <p>Stop the process that's using the jar file. Use the Windows Task Manager, or on a Mac/Linux, do this:</p> <pre><code>ps -eaf | grep launch.class\nkill -9 [pid number]\n</code></pre>"},{"location":"references/troubleshooting.html#unable-to-start-the-domino-rest-api-domino-task-after-updating-configuration-to-use-https","title":"Unable to start the Domino REST API Domino task after updating configuration to use https","text":"<p>The <code>KeepManagementURL</code> setting in your <code>notes.ini</code> is the URL needed for the Domino REST API Domino task to talk to the Java side of Domino REST API. By default this is set to <code>http</code>. </p> <p>Solution</p> <p>After updating the URL to <code>https</code>, run <code>load restapi</code>. For more information, see Domino REST API task.</p>"},{"location":"references/troubleshooting.html#database-is-not-fully-initialized-error","title":"Database is not fully initialized error","text":"<p>You get this error when you go to your Notes client and:</p> <ol> <li>Select File \u2192 Open \u2192 HCL Notes Application.</li> <li>Select <code>KeepConfig.nsf</code> file to open.</li> </ol> <p>The following error is shown:</p> <p></p> <p>Solution </p> <p>Delete the <code>KeepConfig.nsf</code> from the Notes data directory and restart the sample script.</p> <p>Tip</p> <p>On Mac, the data directory path is <code>/Users/[userid]/Library/Application Support/HCL Notes Data/</code>.</p>"},{"location":"references/troubleshooting.html#user-id-and-password-being-requested-repeatedly-when-using-notes-for-domino-rest-api-testing","title":"User ID and password being requested repeatedly when using Notes for Domino REST API testing","text":"<p>Sometimes on the initial starting up of the Domino REST API or creation of KeepConfig and KeepAgents databases, or doing things like creating a folder in mail database, you are prompted for user ID and password repeatedly. This happens if the Don't prompt for a password checkbox under User Security isn't selected or if it gets reset based on the organization's policy.</p> <p>Solution:</p> <ol> <li>Stop your Domino REST API debugging session.</li> <li>Go into Notes, and then select File \u2192 Security \u2192 User Security.</li> <li>Select the Don't prompt for a password from other Notes-based programs (reduces security) checkbox.</li> <li>Exit Notes and restart your Domino REST API debugging session.</li> </ol> <p>This setting can get reset each time you start Notes depending upon your organization's Policy, in which case, you'll need to enable it again.</p>"},{"location":"references/troubleshooting.html#getting-an-empty-response-when-executing-an-api-request-method-after-a-server-upgrade","title":"Getting an empty response when executing an API request method after a server upgrade","text":"<p>Check if the schema and the scope still exist. The schema is stored in the database the schema is for, while the scope is stored in <code>KeepConfig.nsf</code>. There is a probability that the schema is missing. One possible reason for this is that the server upgrade replaced the design of the database, as opposed to just refreshing the design. Replacing the design removes all the design elements in the database, including the schema, and updates it with the latest design from a template. It can happen to both the system and non-system databases.</p> <p>Solution:</p> <ul> <li>You can create a new schema and scope and repeat the API request method.  </li> <li>You can then protect the individual design elements of your database, including the new schema you created. For more information, see the related topic in the Domino Designer documentation.</li> </ul>"},{"location":"references/troubleshooting.html#getting-a-cors-error-while-trying-to-go-into-the-admin-ui","title":"Getting a CORS error while trying to go into the Admin UI","text":"<p>You get a CORS error when trying to access the Admin UI.</p> <p>Solution:</p> <p>You need to configure CORS. For more information, see Configure CORS for AdminUI, OAuth and your applications.</p>"},{"location":"references/understandingconfig.html","title":"Understanding configuration","text":"<p>The configuration follows the concept of an Overlay File System. The base configuration is retrieved from the installation directory or <code>jar</code> files.</p> <p>When jar files contain a resource <code>/config/config.json</code>, that configuration file is added to total configuration.</p> <p>Then, it's overlaid with any JSON files in the <code>keepconfig.d</code> directory within the Notes data directory and then finally, with any environment parameters.</p>"},{"location":"references/understandingconfig.html#hierarchy","title":"Hierarchy","text":"<p>All files contribute JSON, which are overlaid on top of each other. JSON elements with same names get overwritten. Arrays are replaced and not overwritten.</p> <p>The JSON files in <code>keepconfig.d</code> are processed in alphabetical order. Last entry wins. This processing order allows you, for example, to disable elements temporarily through settings in a <code>z-final-words.json</code> file without impacting the permanent configuration.</p> <p>For more information, see vert.x overloading rules.</p>"},{"location":"references/understandingconfig.html#example","title":"Example","text":"<p>Given the files <code>config.json</code>, <code>a.json</code> and the environment variable <code>PORT=8564</code>, you get the result <code>result.json</code> as shown below:</p>"},{"location":"references/understandingconfig.html#configjson","title":"config.json","text":"<pre><code>{\n  \"PORT\": 8880,\n  \"AllowJwtMail\": true,\n  \"versions\": {\n    \"basis\": {\n      \"path\": \"/schema/openapi.basis.json\",\n      \"active\": true\n    }\n  }\n}\n</code></pre>"},{"location":"references/understandingconfig.html#ajson","title":"a.json","text":"<pre><code>{\n  \"dance\": \"tango\",\n  \"PORT\": 1234,\n  \"versions\": {\n    \"basis\": {\n      \"active\": false\n    },\n    \"special\": {\n      \"path\": \"/schema/openapi.special.json\",\n      \"active\": true\n    }\n  }\n}\n</code></pre> <p>Merge these 2 files and apply the environment variables.</p>"},{"location":"references/understandingconfig.html#resultjson","title":"result.json","text":"<pre><code>{\n  \"PORT\": 8564,\n  \"AllowJwtMail\": true,\n  \"dance\": \"tango\",\n  \"versions\": {\n    \"basis\": {\n      \"path\": \"/schema/openapi.basis.json\",\n      \"active\": false\n    },\n    \"special\": {\n      \"path\": \"/schema/openapi.special.json\",\n      \"active\": true\n    }\n  }\n}\n</code></pre> <p>The actual result can be inspected on the Domino REST API management API, like on a local install.</p>"},{"location":"references/understandingconfig.html#important-notes","title":"Important notes","text":"<p>JSON overlay doesn't allow you to remove JSON elements. So, most settings have an <code>active</code> parameter that can be set to false in an overlay.</p>"},{"location":"references/quickreference/index.html","title":"Quick reference","text":"<p>Provides reference to the standards used in Domino REST API and commonly used terms.</p> <ul> <li> <p>Standards</p> </li> <li> <p>Glossary</p> </li> </ul>"},{"location":"references/quickreference/glossary.html","title":"Glossary","text":""},{"location":"references/quickreference/glossary.html#jks","title":"JKS","text":"<p>Java KeyStore, a repository of security certificates used for SSL encryption. Includes authorization and public and private keys.</p>"},{"location":"references/quickreference/glossary.html#jwt","title":"JWT","text":"<p>JSON Web Token, used for authentication between two trusted systems.</p>"},{"location":"references/quickreference/glossary.html#nsf","title":"NSF","text":"<p>Notes file system</p>"},{"location":"references/quickreference/glossary.html#pem","title":"PEM","text":"<p>Base64 ASCII encoding security certificates used for SSL encryption. Includes authorization and public, private, and root keys.</p>"},{"location":"references/quickreference/glossary.html#pim","title":"PIM","text":"<p>Personal Information Management such as mail calendar, contact, notebook/journals, tasks/todo's</p>"},{"location":"references/quickreference/glossary.html#pks","title":"PKS","text":"<p>Security certificates used for SSL encryption.</p>"},{"location":"references/quickreference/glossary.html#keepconfigd","title":"keepconfig.d","text":"<p>Directory where you can modify some of Domino REST API's settings. Located in your Domino data directory for all platforms. For example, in Linux, it's in <code>/local/notesdata/keepconfig.d</code>. In Windows, it's in <code>C:\\Domino\\Data\\keepconfig.d</code>.</p>"},{"location":"references/quickreference/glossary.html#domino-keeplog","title":"domino-keep.log","text":"<p>The default file for storing logs. It's stored in the subdirectory <code>IBM_TECHNICAL_SUPPORT</code> of your <code>Notes/Domino</code> data directory. For more information, see Logging.</p>"},{"location":"references/quickreference/standards.html","title":"Standards","text":"<p>We love open standards, there are so many to pick from. When possible, we implement those since they are better scrutinized, have wider support, and make interaction easier.</p> <p>In alphabetical order:</p> <ul> <li> <p>ECMA-404: The JSON Data Interchange Standard (since XML is old and binary formats...)</p> </li> <li> <p>ISO 10646 / RFC 2277: Unicode UTF-8, working with all languages</p> </li> <li> <p>ISO/IEC 20802-1:2016: Open data protocol (OData) v4.0 \u2014 Part 1: Core</p> </li> <li> <p>ISO/IEC 20802-2:2016: Open data protocol (OData) v4.0 \u2014 Part 2: OData JSON</p> </li> <li> <p>ISO 8601: Date and Time information, timezone aware</p> </li> <li> <p>JSON Schema: The upcoming standard for JSON structure specifications</p> </li> <li> <p>OpenAPI: The REST API standard provided by the Linux Foundation</p> </li> <li> <p>RFC 3886: URI Generic Syntax</p> </li> <li> <p>RFC 5246: TLS 1.2 (soon RFC8446)</p> </li> <li> <p>RFC 6797: HTTP Strict Transport Security</p> </li> <li> <p>RFC 6838: Media type definitions, such as header accepts applications/json</p> </li> <li> <p>RFC 7230: HTTP/1.1</p> </li> <li> <p>RFC 7231: HTTP Status Codes</p> </li> <li> <p>RFC 7235: HTTP/1.1 Authentication</p> </li> <li> <p>RFC 7517: Json Web Key (JWK).</p> </li> <li> <p>RFC 7519: Json Web Token (JWT). All our endpoints short of login and OData (OData needs basic, Excel can't handle JWT)</p> </li> <li> <p>RFC 7540: HTTP/2</p> </li> <li> <p>RFC 7807: Problem details for HTTP APIs</p> </li> <li> <p>RFC 8681: JSON implementation of mail and others</p> </li> </ul>"},{"location":"references/schemacomponents/index.html","title":"Schema components","text":"<p>Make yourself familiar with Schema and Scope to make full use of this article.</p> <p>A schema stores meta data, form definitions, view definitions, and agent definitions. All are expressed in JSON, based as far as possible on OpenAPI specification.</p>"},{"location":"references/schemacomponents/index.html#meta-data","title":"Meta data","text":"<pre><code>*Section under development*\n</code></pre>"},{"location":"references/schemacomponents/index.html#form-definitions","title":"Form definitions","text":"<p>Form definitions relate to Documents that have a Form item with the given value, not the Form design element with the given name. The Admin UI uses fields listed in Form design elements, so it's convenient to create form definitions. </p>"},{"location":"references/schemacomponents/index.html#view-definitions","title":"View definitions","text":"<p>An array of entries describing the name or alias, if any, and UNID of the view design element. Views shows all columns contained.</p>"},{"location":"references/schemacomponents/index.html#agent-definitions","title":"Agent definitions","text":"<p>Suitable agents can be called from the Domino REST API.</p>"},{"location":"references/schemacomponents/index.html#tutorials","title":"Tutorials","text":"<ul> <li>Using Admin UI</li> </ul>"},{"location":"references/schemacomponents/index.html#references","title":"References","text":"<ul> <li>Schema Management</li> </ul>"},{"location":"references/schemacomponents/index.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"references/schemacomponents/agentdefinitions.html","title":"Agent definitions","text":"<p>Suitable agents can be called from the Domino REST API. </p> <p>Note</p> <p>The API doesn't check if the agent is suitable for being called individually. It's the developer's responsibility to ensure this.</p>"},{"location":"references/schemacomponents/agentdefinitions.html#tutorials","title":"Tutorials","text":"<ul> <li>Manage database agents</li> </ul>"},{"location":"references/schemacomponents/agentdefinitions.html#how-to-guide","title":"How-to guide","text":"<ul> <li>List available agents in the Admin UI</li> <li>Activate an agent in the Admin UI</li> </ul>"},{"location":"references/schemacomponents/agentdefinitions.html#references","title":"References","text":"<ul> <li>Agents</li> <li>Agent processing</li> <li>Running Agents</li> </ul>"},{"location":"references/schemacomponents/agentdefinitions.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"references/schemacomponents/formdefinitions.html","title":"Form definitions","text":"<p>Form item, not Form design element</p> <p>Form definitions relate to Documents that have a Form item with the given value, not the Form design element with the given name. The Admin UI uses fields listed in Form design elements, so it's convenient to create form definitions. At runtime, no Form design element is used by the REST API.</p>"},{"location":"references/schemacomponents/formdefinitions.html#tutorials","title":"Tutorials","text":"<ul> <li>Manage database forms</li> </ul>"},{"location":"references/schemacomponents/formdefinitions.html#references","title":"References","text":"<ul> <li>List available database forms</li> <li>Add new form schema</li> <li>Activate a form</li> <li>Change form configuration</li> </ul>"},{"location":"references/schemacomponents/formdefinitions.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"references/schemacomponents/viewdefinitions.html","title":"View Definitions","text":"<p>A view definition configures view visibility and the selection and naming of the view columns. </p>"},{"location":"references/schemacomponents/viewdefinitions.html#tutorials","title":"Tutorials","text":"<ul> <li>Manage database views</li> <li>Verify the views for the demo database</li> <li>List views with Swagger UI</li> </ul>"},{"location":"references/schemacomponents/viewdefinitions.html#how-to-guide","title":"How-to guide","text":"<ul> <li>Edit database view of a schema</li> </ul>"},{"location":"references/schemacomponents/viewdefinitions.html#references","title":"References","text":"<ul> <li>List available database views</li> <li>Activate a view</li> <li>Edit a view</li> </ul>"},{"location":"references/schemacomponents/viewdefinitions.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"references/security/index.html","title":"Security overview","text":"<p>Good security isn't a one-trick pony, but a combination of factors.</p> <p>You have choices for your IdP</p> <p>There are multiple ways to configure an external IdP in the Domino REST API: <code>jwt</code>, <code>oidc</code>, and <code>oidc-idpcat</code>. When in doubt, use <code>oidc-idpcat</code>. Read the comparison for details.</p> <p>Here are what we implemented:</p> <ul> <li> <p>We use Open Standards wherever appropriate. Standards enjoy more scrutiny from more eyeballs.</p> </li> <li> <p>Domino REST API uses the Eclipse Vert.x Framework, which supports many different versions of SSL certificates such as:</p> <ul> <li> <p>PEM</p> </li> <li> <p>PKS</p> </li> <li> <p>JKS</p> </li> </ul> </li> <li> <p>All Domino REST API access is authorized using a signed JWT claim. Access control settings are completely observed and honored.</p> </li> <li> <p>We support public/private keys for identity provider setup.</p> </li> <li>Databases aren't automatically exposed on REST when you run Domino REST API. Only the ones configured by the administrators.</li> <li>No anonymous access is granted for REST data.</li> <li> <p>Access to sensitive information can be limited to servers that present additional credentials.</p> </li> <li> <p>Read/Write access is controlled on a per form, field and user basis. See The Barbican for details.</p> </li> </ul> <p>Here's a flowchart to show how Domino REST API handles security.</p> <p></p>"},{"location":"references/security/authentication.html","title":"Auth*","text":"<p>You have choices for your IdP</p> <p>There are multiple ways to configure an external IdP in the Domino REST API: <code>jwt</code>, <code>oidc</code>, and <code>oidc-idpcat</code>. When in doubt, use <code>oidc-idpcat</code>. Read the comparison for details.</p> <p>Domino REST API offers a built-in endpoint to exchange your Domino credentials for a valid JSON Web Token (JWT). This page describes the setup of external JWT identity providers (IdP).</p>"},{"location":"references/security/authentication.html#jwt-authorization","title":"JWT Authorization","text":"<p>All actions in Domino REST API are secured with JWT. For starters, Domino provides a login endpoint that issues a valid JWT token to access Domino REST API in exchange for Domino credentials (user name and http password).</p> <p>The Domino generated JWT:</p> <ul> <li>Uses a random symmetric key that changes on every Domino REST API restart and is stored only in memory.</li> <li>Works with one Domino server.</li> <li>Can be disabled in Domino REST API configuration with <code>\"disableDominoLogin\" :true</code> .</li> </ul> <p>Should Domino use a permanent JWT Key, we can use a public/private key pair and add it to the Domino REST API configuration:</p> <pre><code>{\n  \"JwtUsePubPrivKey\": true,\n  \"JwtUsePemFile\": true,\n  \"JwtIssuer\": \"DominoKeep\",\n  \"JwtPrivateKeyFile\": \"path-to-private.key.pem\",\n  \"JwtPublicKeyFile\": \"path-to-.public.key.pem\",\n  \"JwtAlgorithm\": \"RSA\"\n}\n</code></pre> <p>Pro tip</p> <p>The management UI (Port 8889) provides a one click option to create such key pairs and configuration entry stored in <code>keepconfig.d</code></p> <p>These keys can be shared between Domino servers, allowing, for example, redirects to a different mail server.</p>"},{"location":"references/security/authentication.html#external-jwt-oidc-providers","title":"External JWT / OIDC providers","text":"<p>This is the configuration we would strongly suggest for outward facing Domino servers. Domino REST API can accept JWT tokens from multiple external providers.</p> <p>To enable an external provider, Domino REST API requires access to the provider\u2019s public key, which can be configured in two ways.</p> <p>If your provider supports the <code>/.well-known/openid-configuration</code> endpoint, you can provide the base URI or the full URI to that endpoint in the configuration:</p> <pre><code>{\n  \"jwt\": {\n    \"some-name\": {\n      \"active\": true,\n      \"providerUrl\": \"https://auth.example.com/auth/realms/master\"\n    }\n  }\n}\n</code></pre> <p>During initialization, Domino REST API will query this endpoint for issuer and key information to trust public keys from that service.</p> <p>Some IdP, such as Microsoft Entra ID formerly Azure Active Directory, don't provide full information, missing algorithm or accurate issuer info. For them, additional parameters <code>aud</code>, <code>iss</code> and <code>algoritm</code> can be specified.</p> <pre><code>{\n  \"jwt\": {\n    \"AzureAD01\": {\n      \"active\": true,\n      \"providerUrl\": \"https://login.microsoftonline.com/[your-tennantid-here]/v2.0/.well-known/openid-configuration\",\n      \"aud\": \"api://dominorest\",\n      \"iss\": \"https://sts.windows.net/[your-tennantid-here]/\",\n      \"algorithm\": \"RS256\"\n    }\n  }\n}\n</code></pre> <p>Alternatively, the public key and issuer information can be added to the configuration directly:</p> <pre><code>{\n  \"jwt\": {\n    \"some-name\": {\n      \"active\": true,\n      \"algorithm\": \"RS256\",\n      \"iss\": \"https://auth.example.com/auth/realms/master\",\n      \"kid\": \"id-matching-expected-key\",\n      \"keyFile\": \"path-to-jwt.pubkey\"\n    }\n  }\n}\n</code></pre> <p>Keep the certs secure</p> <p>It's the responsibility of the administrator to save key files in secure locations. The better way is to use the certstore.nsf</p>"},{"location":"references/security/authentication.html#jwt-payload","title":"JWT Payload","text":"<p>The JWT requires the following format (Additional entries get ignored):</p> <pre><code>{\n  \"iss\": \"Issuer Name\",\n  \"sub\": \"CN=Common Name/O=Org\",\n  \"scopes\": \"MAIL $DATA\",\n  \"iat\": 1618506339,\n  \"exp\": 1618509939,\n  \"aud\": \"Domino\"\n}\n</code></pre> <p>All elements need to be present. \u201cAudience\u201d must be set to \u201cDomino\u201d and \u201cscope\u201d must be a space-separated list of database aliases, MAIL, and/or $DATA.</p> <ul> <li>MAIL allows a request to attempt to access the mail file of a given user. Access is limited by Domino\u2019s ACL entries.</li> <li>$DATA allows a request to attempt to access any database configured for Domino REST API access. Access is limited by Domino\u2019s ACL entries. Users can only access databases that grant them access in the ACL.</li> </ul> <ul> <li>[KeepDBAliasName] allows a request to attempt to access a database configured under that alias name. Access is limited by Domino\u2019s ACL.</li> </ul>"},{"location":"references/security/authentication.html#distinguished-names","title":"Distinguished Names","text":"<p>By default, Domino REST API will expect that incoming tokens contain a Domino-format distinguished name, for example <code>CN=John Doe/O=SomeOrg</code>, in either the <code>CN</code> or <code>sub</code> claims of the token payload. This can be configured in Domino REST API's JWT configuration to use an alternative property and to accept LDAP-format, for example <code>cn=John Doe,o=SomeOrg</code> names:</p> <pre><code>{\n  \"jwt\": {\n    \"some-name\": {\n      \"active\": true,\n      \"providerUrl\": \"https://auth.example.com/auth/realms/master\",\n      \"userIdentifier\": \"dn\",\n      \"userIdentifierInLdapFormat\": true\n    }\n  }\n}\n</code></pre>"},{"location":"references/security/authentication.html#name-resolution","title":"Name resolution","text":"<p>The Domino REST API probes for the existence of various claims in the JWT token to determine the user name. The claims are probed in the following sequence. On the first available claim, the probing stops.</p> <ol> <li>keep.user.attr.dominoDn</li> <li>CN</li> <li>upn</li> <li>preferred_username</li> <li>email</li> <li>sub</li> </ol>"},{"location":"references/security/authentication.html#oidc","title":"OIDC","text":"<p>OIDC (OpenID Connect) support lets you point at a standard OIDC provider like Microsoft Entra ID formerly Azure Active Directory or Keycloak. It's similar to the External JWT Provider configuration when using <code>providerUrl</code>, but follows OIDC semantics a bit more internally - namely, it needs a client ID and client secret.</p> <p>It can be configured like:</p> <pre><code>{\n  \"oidc\": {\n    \"any-name\": {\n      \"active\": true,\n      \"providerUrl\": \"https://some.keycloak.server/auth/realms/some-realm\",\n      \"clientId\": \"some-clientid\",\n      \"clientSecret\": \"some-clientsecret\",\n      \"userIdentifier\": \"dn\",\n      \"userIdentifierInLdapFormat\": true\n    }\n  }\n}\n</code></pre> <p>The \"oidc\" is similar to \"oidc-idpcat\" or \"jwt\". The keys can be anything, like \"any-name\". This is the same idea as documented in External JWT Provider configuration.</p> Items Description <code>active</code> Optional, and can be useful for setting to false to temporarily disable something without deleting the config entirely. <code>providerURL</code> It's the OIDC-provider-specific URL. It's in a form common for Keycloak, but Azure and others look different. <code>clientId</code> It's the configured client ID from the OIDC provider. It is strongly recommended to use <code>Domino</code> as client name. <code>clientSecret</code> It's the generated client secret from the OIDC provider, usually a randomly-generated hex string. <code>userIdentifier</code> and <code>userIdentifierInLdapFormat</code> Optional"},{"location":"references/security/authentication.html#oidc-with-idpcat-authentication","title":"OIDC with idpcat authentication","text":"<p>We strongly recommend this option</p> <p>The <code>OIDC idpcat</code> support lets you use providers configured in <code>idpcat.nsf</code> (\"IdP Catalog\") starting with Domino 14. To know more about creating <code>idpcat.nsf</code>, see Configuring trusted OIDC providers</p> <p>The configuration is as follows in Domino REST API:</p> <pre><code>{\n  \"oidc-idpcat\": {\n    \"any-name\": {\n      \"active\": true,\n      \"providerUrl\": \"https://some.keycloak.server/auth/realms/some-realm\",\n      \"scope\": \"$DATA\",\n      \"aud\": \"account\",\n      \"additionalClientIds\": [\"keep-local\"],\n      \"userIdentifier\": \"dn\",\n      \"userIdentifierInLdapFormat\": true,\n      \"microsoft\": false,\n      \"allowExpired\": false\n    }\n  }\n}\n</code></pre> Items Description <code>active</code> Optional - Can be useful for setting to <code>false</code> to temporarily disable something without deleting the config entirely. <code>providerUrl</code> It's the OIDC-provider-specific URL. It's in a form common for Keycloak, but Azure and others look different. <code>scope</code> A scope that is expected to be included in the token from the OIDC provider. <code>aud</code> A string or array of strings of audiences expected to be included in the token. <code>additionalClientIds</code> Optional - Can be a string or array of strings of client IDs beyond the one configured in <code>idpcat.nsf</code> that will be considered valid. <code>userIdentifier</code> and <code>userIdentifierInLdapFormat</code> Optional <code>microsoft</code> Optional - Can be used to enable MS-Azure-specific workarounds internally <code>allowExpired</code> Optional- Can be used to consider even expired tokens valid. This should generally only be used during development. <p>Note</p> <ul> <li>You can use <code>oidc-idpcat</code> authentication in the same places that \"JWT\" config blocks were used previously, just with some coordination with core Domino. </li> <li>\"JWT\" will work the same on Domino 14. There's no conflict if Domino REST API and Domino have completely distinct authentication providers. </li> <li> <p>\"oidc-idpcat\" comes into play if you:</p> <ul> <li>want both Domino REST API and core Domino to use the same provider.</li> <li>are on Domino 14 or greater. There's no harm if you use \"jwt\" or \"oidc\" without configuring Domino, or even if they happen to point to the same location.</li> </ul> </li> </ul>"},{"location":"references/security/authentication.html#differences-between-oidc-and-oidc-idpcat","title":"Differences between <code>oidc</code> and <code>oidc-idpcat</code>","text":"<p>In general, <code>oidc</code> and <code>oidc-idpcat</code> achieve the same goal, which is to use a complete OIDC provider. The advantages of using the \"oidc-idpcat\" variation are as follows:</p> <ul> <li>If you've previously configured OIDC for standard Domino, you may reuse parts of the configuration, such as putting the client ID and client secret in a single location.</li> <li>Since Domino handles contacting the OIDC provider and caching keys, you benefit from that shared cache as well as shared diagnostics (for example, using notes.ini options for extra logging\u00a0on the console).</li> </ul> <p>Note</p> <p>In general, you'd use any of these (\"jwt\", \"oidc\", \"oidc-idpcat\") when you either want to or have to have an external identity provider like Keycloak or Microsoft Entra ID, formerly Azure Active Directory, and have those tokens be usable for Domino REST API calls. Using either \"jwt\"-with-providerUrl or either of the \"oidc\" ones will let Domino REST API use standard OIDC endpoints to handle key lookup, avoiding the need to copy and paste signer keys into the Domino REST API config.</p> <p>Check Configure Domino REST API to use an OIDC provider.</p>"},{"location":"references/security/authentication.html#domino-as-an-oidc-provider","title":"Domino as an OIDC provider","text":"<p>This is a preview feature in the Domino REST API v1.1.4 release, and applies to HCL Domino v14.5 or later only.</p> <p>Starting with HCL Domino v14.5, the Domino HTTP task can act as an OIDC identity provider. This feature allows administrators to leverage their existing Domino HTTP authentication experience to authenticate end users with applications, servers, and services that support OIDC.</p> <p>The following configuration allows Domino REST API to use Domino as an OIDC provider:</p> <pre><code>{\n  \"domino-oidc-idpcat\": {\n      \"active\": true,\n      \"providerUrl\": \"https://&lt;domino oidc server&gt;/auth/protocol/oidc\",\n      \"clientId\": \"some-clientid\",\n      \"clientSecret\": \"some-clientsecret\",\n      \"scope\": \"Domino.user.all\",\n      \"aud\": \"https://&lt;Domino REST API DNS name&gt;\"\n    }\n  }\n</code></pre> Items Description <code>active</code> Optional - Can be useful for setting to <code>false</code> to temporarily disable something without deleting the config entirely. <code>providerUrl</code> The base URL that includes the name of the OIDC Domino server.For example: <code>https://auth.mydomains.com/auth/protocol/oidc</code> <code>clientId</code> It's the configured client ID from the OIDC provider. It's strongly recommended to use <code>Domino</code> as client name. <code>clientSecret</code> It's the generated client secret from the OIDC provider, usually a randomly generated hex string. <code>scope</code> A scope that is expected to be included in the token from the OIDC provider. The scopes are <code>openid</code>, <code>email</code>, <code>profile</code>, <code>$DATA</code>, <code>Domino.user.all</code>. <code>Domino.user.all</code> is used for Domino HTTP. <code>aud</code> A string or array of strings of audiences expected to be included in the token. The value of the <code>aud</code> key is set to <code>https://&lt;Domino REST API DNS name&gt;</code> to match what Domino HTTP expects. <p>Caution</p> <p>The Domino REST API configuration MUST NOT specify <code>additionalClientIds</code>. </p>"},{"location":"references/security/authentication.html#client-ids","title":"Client Ids","text":"<p>When configuring an external IdP using OIDC or OIDC-idpcat, you need to provide a clientId. It's recommended to use <code>Domino</code>, but the admins of your IdP might have other ideas. In any case, that's the clientId for the REST server. It's NOT the one for the AdminUI or the Office Forms Based Authentication (OFBA) for attachment editing. To be fully operational, you need to configure at least three clients on your IdP:</p> <ul> <li><code>Domino</code> for the server (client secret might be handeled by <code>idpcat.nsf</code>)</li> <li><code>keepadminui</code> for the Domino REST API admin client</li> <li><code>keepofba</code> for the Office document round trip experience</li> <li>One each for your custom client applications (with clientSecret for servers or PKCE for clients)</li> </ul> <p>Use the internal IdP as learning resource</p> <p>The application configuration provided by the internal IdP makes it easy to configure and retrieve client-specific JWT that have all the required fields. Test your application with that and use the defined proprties, scopes foremost, to requests the external IdP client configurations.</p>"},{"location":"references/security/authentication.html#domino-rest-api-and-oauth","title":"Domino REST API and OAuth","text":"<p>Domino REST API is designed to consume an access token. This token can be the result of an OAuth dance or simply the result of an exchange of Domino credentials. The Domino REST API provides an IdP that does the OAuth dance.</p> <p></p> <p></p>"},{"location":"references/security/configurationParameters.html","title":"Configuration","text":"<p>Domino REST API comes with reasonable default configuration settings. They allow you to start evaluating and testing out-of-the-box. For an actual deployment, you want to understand the details as outlined here.</p>"},{"location":"references/security/configurationParameters.html#understanding-configuration","title":"Understanding configuration","text":"<p>The configuration follows the concept of an Overlay File System, where the base configuration is retrieved from the jar file and then overlaid with all the JSON files (if present) in the <code>keepconfig.d</code> directory within the Notes data directory and finally, the environment parameters, if any of those exist. Check the details here.</p>"},{"location":"references/security/configurationParameters.html#environment","title":"Environment","text":"<p>Parameters are case sensitive.</p> Parameter Description PORT: 8880 HTTP(S) port for the Domino REST API service. METRICSPORT: 8890 Endpoint for Prometheus Metrics. JwtDuration Lifetime in seconds for the internal JWT provider. Default value is 2 hours. maxJwtDuration Maximum lifetime in seconds that the JWT tokens get accepted. Default value is 24 hours. TLSFile TLS file with key for jks, pem or pfx. TLSPassword Password for jks and pfx key file. HEALTHCHECK_USER Username for accessing Health check (Port 8886) HEALTHCHECK_PASSWORD Password for accessing Health check (Port 8886)"},{"location":"references/security/configurationParameters.html#json-parameters","title":"JSON Parameters","text":"<p>The detailed overview can be found here. A sample on how to use it for hardening a production environment can be found here. An explanation on how it actually works can be found here.</p>"},{"location":"references/security/configurationParameters.html#configuration-retrieval","title":"Configuration retrieval","text":"<p>The current configuration can be retrieved, with sensitive information masked, on the management port such as <code>https://keep.yourserver.io:8889/config</code>.</p>"},{"location":"references/security/customIdp.html","title":"Custom Identity Provider (IdP)","text":"<p>Domino REST API requires an access token in JWT (RFC 7519) format. As long as Domino REST API trusts the signature of the presented token, it does not matter how the token was obtained.</p> <p>Caution</p> <p>Check carefully which systems you trust to provide identity. They hold the key to data access.</p> <p>When none of the existing IdP solutions fit your needs, you can use a custom provider that generates your JWT token. Just make sure, such code isn't accessible for abuse as unauthorized impersonation.</p>"},{"location":"references/security/customIdp.html#sample-function","title":"Sample function","text":"<p>This function turns a given user name and scope into a signed JWT token.</p> <pre><code>const template = require('./template.json');\nconst jwt = require('jsonwebtoken');\nconst fs = require('fs');\nconst privateKey = fs.readFileSync('private.key');\n\nconst signOptions = {\n  algorithm: 'RS256',\n  expiresIn: `${template.expSeconds}s`,\n  mutatePayload: true\n};\n\nconst renderJwt = (sub, scope) =&gt; {\n  const claim = { sub, scope, ...template };\n  const bearer = jwt.sign(claim, privateKey, signOptions);\n  return { bearer: bearer, ...claim };\n};\n\nmodule.export = { renderJwt };\n</code></pre> <p>Error handling omitted for clarity.</p>"},{"location":"references/security/customIdp.html#the-template","title":"The template","text":"<pre><code>{\n  \"iss\": \"Joe and the wailors\",\n  \"aud\": \"Domino\",\n  \"expSeconds\": 3000\n}\n</code></pre>"},{"location":"references/security/customIdp.html#dependencies","title":"Dependencies","text":"<p>This the relevant part of the <code>package.json</code>.</p> <pre><code>\"dependencies\": {\n    \"jsonwebtoken\": \"^8.5.1\"\n  }\n</code></pre>"},{"location":"references/security/customIdp.html#keys-you-need","title":"Keys you need","text":"<p>You need to generate a public/private key pair.</p> <pre><code>ssh-keygen -t rsa -b 4096 -m PEM -f private.key\nopenssl rsa -in private.key -pubout -outform PEM -out public.key.pub\n</code></pre>"},{"location":"references/security/encryption.html","title":"Encryption Keys","text":"<p>There are three areas in Domino REST API where encryption keys are needed:</p> <ul> <li>HTTPS certificates for Domino REST API ports</li> <li>JSON Web Token (JWT) signing</li> <li>ID vault signing requests</li> </ul> <p>This page documents the creation of those keys. Check the security page for configuration details.</p>"},{"location":"references/security/encryption.html#https-certificates-for-domino-rest-api-ports","title":"HTTPs certificates for Domino REST API ports","text":"<p>When your server is facing the internet or you can't distribute custom (root) CAs (certificate authorities) to your users, you should consider using a certificate from an official source such as LetsEncrypt. (This documentation does not describe how to do that.) You can run Domino REST API without encryption; however, in a production environment this is not recommended, unless you run on a container service like Kubernetes or OpenShift, where the container handles encryption.</p> <p>If you create your own CA, you must:</p> <ul> <li>Create the private key and root certificate.</li> <li>Create an intermediate key and certificate.</li> <li>Create certificates for your servers.</li> <li>Convert them if necessary, for example for import in Java KeyStore.</li> <li>Make the public key of the root and intermediate certificates available.</li> <li>Import these certificates in all browsers and runtimes used for testing.</li> </ul> <p>Follow the detailed instructions and the follow up.</p> <p>Again, it's generally better to use LetsEncrypt.</p>"},{"location":"references/security/encryption.html#encryption-key-for-jwt-signing","title":"Encryption key for JWT signing","text":"<p>Domino REST API uses JWT for authentication. When you get started with Domino REST API, you probably log in with a Domino username and password. Domino REST API, out of the box, uses an ephemeral symmetric encryption key to sign requests. Since you can't see the key or share it, this configuration is reasonably secure. When you restart Domino REST API, a new key is used.</p> <p>To use a key that can be deployed to an external identity provider (IdP) or used to send requests to the Domino ID vault service, you must generate a public/private key pair and configure the security settings. Never share the private key.</p> <p>Use the OpenSSL tool to generate a key. The key is an RSA key:</p> <pre><code>ssh-keygen -t rsa -b 4096 -m PEM -f private.key\nopenssl rsa -in private.key -pubout -outform PEM -out public.pem\n</code></pre> <p>If you prefer Elliptic-curve keys (smaller, more modern), use this:</p> <pre><code>openssl ecparam -genkey -name secp521r1 -noout -out privatekey.pem\nopenssl ec -in privatekey.pem -pubout -out publickey.pem\n</code></pre> <p>The parameter <code>-name secp521r1</code> defines the ES512 encryption algorithm. Don't change the parameter.</p>"},{"location":"references/security/encryption.html#encryption-key-to-sign-id-vault-requests","title":"Encryption key to sign ID vault requests","text":"<p>The required key is an ES512 elliptic-curve as described above. Keep the private key safe and configure it in security. The public key must be imported into the ID vault. Check the documentation there.</p> <pre><code>openssl ecparam -genkey -name secp521r1 -noout -out privatekey_ec.pem\nopenssl pkcs8 -topk8 -nocrypt -in privatekey_ec.pem -out privatekey.pem\nopenssl ec -in privatekey.pem -pubout -out publickey.pem\n</code></pre>"},{"location":"references/security/encryption.html#using-the-management-console-for-encryption-operations","title":"Using the Management Console for encryption operations","text":"<p>The management UI offers convenience functions for encryption and certificate related activities.</p> <p></p>"},{"location":"references/security/encryption.html#hashing-a-salted-password","title":"Hashing a salted password","text":"<p>The shutdown key, as well as the metrics credential password are stored salted and hashed in the Domino REST API configuration ini files. To change one of them, the <code>salt</code> button can be used to compute a replacement value. Enter the password, it isn't hidden here, click on <code>Salt</code> and the salted and hashed version will be shown in the UI, where you can copy &amp; paste it for use in a configuration json file.</p>"},{"location":"references/security/encryption.html#generate-keys-and-certificates-for-saml-and-jwt","title":"Generate keys and certificates for SAML and JWT","text":"<p>Domino REST API used X509 certificates and a public/private key pair for SAML interaction with the Domino R12 IDVault. The management console offers a convenient way to generate those and the needed configuration entries.</p> <p>Note: You need access to the Domino server's file system to collect the keys/cert.</p> <p>Enter a certificate name, don't use spaces or special characters, stick to: <code>0-9,a-z,A-z,-,_</code>. Then enter the <code>Shutdown key</code> (masked input) and click on `Create IdP Certificate. 4 things will happen:</p> <ul> <li>Creation of an <code>X509</code> certificate</li> <li>Creation of a public/private key pair</li> <li>Creation of a configuration json file</li> <li>Update of the IdP Cert button on the management page</li> </ul> <p>The 4 files get created in your <code>keepconfig.d</code> directory. Distribute them to all Domino REST API servers to achieve single login and decryption capabilities. For example, when you specified AcmeKeepTest as your <code>Certificate Name</code>, you get this configuration file:</p> <pre><code>{\n  \"JwtUsePubPrivKey\": true,\n  \"JwtUsePemFile\": true,\n  \"JwtIssuer\": \"CN=ServerName/O=OrgName/F=AcmeKeepTest\",\n  \"JwtPrivateKeyFile\": \"keepconfig.d/AcmeKeepTest.private.key.pem\",\n  \"JwtPublicKeyFile\": \"keepconfig.d/AcmeKeepTest.public.key.pem\",\n  \"JwtCertFile\": \"keepconfig.d/AcmeKeepTest.cert.pem\",\n  \"JwtAlgorithm\": \"RSA\"\n}\n</code></pre>"},{"location":"references/security/encryption.html#example-of-how-to-create-and-set-up-domino-rest-api-on-multiple-domino-servers-to-use-the-same-jwt-keys","title":"Example of how to create and set up Domino REST API on multiple Domino servers to use the same JWT keys","text":"<ul> <li>Log in to the Management console (Port 8889).</li> <li> <p>Type a name you want to call this certificate into the Certificate Name. There should be no spaces or special characters.</p> <ul> <li>for example: MultiDomain</li> </ul> </li> <li> <p>Click Create IdP Certificate.</p> </li> <li> <p>Domino REST API generates 4 files in this server's <code>[notesdata]/keepconfig.d</code> directory:</p> <ul> <li>MultiDomain.cert.pem</li> <li>MultiDomain.json</li> <li>MultiDomain.private.key.pem</li> <li>MultiDomain.public.key.pem</li> </ul> </li> <li> <p>Copy these 4 files to your other Domino servers into the <code>[notesdata]/keepconfig.d</code> directory.</p> </li> <li>Restart Domino REST API on all servers with this new configuration and they will now share the same JWT keys.</li> </ul>"},{"location":"references/security/idpcompare.html","title":"Comparing IdP Options","text":"<p>You can use the build-in IdP or an external IdP. Compare your configuration options:</p> Topic Internal IdP external (JWT) external (OIDC) external (OIDC-idpcat) Preferred ./. ./. ./. Yes Single server symmetric keys Yes ./. ./. ./. Private key Yes ./. ./. ./. Public key Yes Yes Yes Yes Local key files Yes Yes ./. ./. Provider URL ./. Yes Yes Yes requires <code>clientId</code> ./. ./. Yes Yes requires <code>clientSecret</code> ./. ./. Yes ./. uses secure <code>idpcat.nsf</code> ./. ./. ./. Yes In sync with core Domino ./. ./. ./. Yes"},{"location":"references/security/idpcompare.html#external-idp-config-using-jwt","title":"External IdP config using <code>jwt</code>","text":""},{"location":"references/security/idpcompare.html#external-idp-config-using-oicd","title":"External IdP config using <code>oicd</code>","text":""},{"location":"references/security/idpcompare.html#external-idp-config-using-oicd-idpcat","title":"External IdP config using <code>oicd-idpcat</code>","text":""},{"location":"references/security/jwt.html","title":"JSON Web Token specification","text":"<p>Domino REST API can issue a valid JSON Web Token using a user\u2019s Domino credentials via the <code>POST/auth</code> endpoint in OpenAPI. Domino REST API can also process and use an incoming JWT from an external Identity Provider (IdP).</p> <p>When issuing a valid JWT, the payload of the JWT may include the following parameters or claims:</p> Parameter/Claim Type Description iss String Stands for Issuer and refers to the name of the IdP.The iss uses the value of the <code>JwtIssuer</code> if present. If not, the value is the URL of the server. sub String Stands for Subject and refers to the full qualified X.500 expended Notes name.The value of the sub includes a series of Domino-format distinguished names, each of which contains an attribute type and value pair. The attribute types are:- CN for common name of the user who generated the JWT.- O for organization name of the user.Example: <code>CN=My Name/O=MyOrganization</code> iat Integer Stands for Issued At and identifies the time at which the JWT was issued. Its value is a NumericDate value. exp Integer Stands for Expiry Time and identifies the expiration time on or after which the JWT must not be accepted for processing. The expiration time must coincide with the defined value of the <code>maxJwtDuration</code> parameter. Its value is a NumericDate value. aud Array Stands for Audience and identifies the recipient that the JWT is intended for. Its only value is <code>Domino</code> (case-sensitive). CN String Stands for Common Name and has the same definition and values as the <code>sub</code> claim. scope String Refers to the databases and services that the user accesses. The values must be a space-separated list of database aliases, <code>Mail</code>, <code>$SETUP</code>, and/or <code>$DATA</code>. For more information, see Scopes email String Email address of the user whose Domino credentials were used to issue the JWT. <p>When processing and using an incoming JWT from an external IdP, you need to configure Domino REST API by creating a JSON file in <code>keepconfig.d</code>. The JSON file may include the following keys:</p> Key Description jwt Indicates that the configuration is related to JWT. IdP name The name you give your IdP. It's not a fixed value but should be unique on your server. active Identifies whether to load the JWT configuration. Value is either true or false algorithm Indicates the supported algorithm, which is currently <code>RS256</code>. providerUrl Points to the external IdP\u2019s endpoint URI to obtain the public key for JWT verification from the key server.Domino REST API extends this URL by adding <code>/.well-known/openid-configuration</code> and check for the JSON return containing the <code>jwks_uri</code> key.If your IdP doesn\u2019t use the <code>.well-known</code> approach, such as Keycloak, you need to directly point to the key URL. keyFile Indicates the path to the public key file relative to <code>keepconfig.d</code> or an absolute path. It's used when the administrator saves the key files locally in a secure location. kid Stands for key ID and indicates which key was used to secure JWS. It's used when the administrator saves the key files locally in a secure location. iss Stands for Issuer and points to the external IdP\u2019s endpoint URL with the public key in case the URL changed during IdP configuration.It can also point to the external IdP\u2019s endpoint URL if the administrator saves the key files locally in a secure location. aud When using Microsoft Entra ID as IdP, set its value to the configured Application ID URI. userIdentifier Use to configure Domino REST API to accept LDAP-format name. Must be configured with <code>userIdentifierinLdapFormat</code>. Set the value to <code>dn</code>. userIdentifierInLdapFormat Use to configure Domino REST API to accept LDAP-format name. Must be configured with <code>userIdentifier</code>. Set the value to <code>true</code>. <p>Note</p> <p>When processing and using an incoming JWT from an external IdP, there are 2 configuration modes that you can use to configure Domino REST API. One configuration mode uses the <code>providerUrl</code>, while the other uses <code>keyFile</code> and <code>kid</code>. To learn more, see External JWT Provider. </p> <p>Example configuration:</p> <pre><code>    {\n    \"jwt\": {\n        \"AzureAD01\": {\n            \"active\": true,\n            \"providerUrl\": \"https://login.microsoftonline.com/[your-tennantid-here]/v2.0/.well-known/openid-configuration\",\n            \"aud\": \"api://dominorest\",\n            \"iss\": \"https://sts.windows.net/[your-tennantid-here]/\",\n            \"algorithm\": \"RS256\"\n        }\n        }\n    }\n</code></pre> <p>In the example configuration, AzureAD01 is the <code>IdP name</code>. </p>"},{"location":"references/security/securingKEEPEndpoints.html","title":"Securing Domino REST API endpoints","text":"<p>Domino REST API uses three endpoints:</p> <p></p> <p>Only one must be reachable by users (humans or servers). Configure your firewall accordingly and eventually use a proxy.</p> <p>To be able to securely and efficiently deploy Domino REST API into a production environment, you must understand how Domino REST API configuration works. See Configuration for a deeper dive.</p> <p>The Domino REST API configuration includes the Domino REST API binary directory, <code>keepconfig.d</code>, and environment variables.</p> <p></p> <p>Examples of the default configuration settings are here, config.json. Whenever you do a new Domino REST API install, these settings and the <code>projectkeep.jar</code> file are overwritten, but any change made in <code>keepconfig.d</code> stays untouched.</p> <p>So it's necessary that your configuration changes reside in the <code>keepconfig.d</code> directory so that they persist when you reinstall or update your Domino REST API version.</p>"},{"location":"references/security/securingKEEPEndpoints.html#endpoint-auth","title":"Endpoint auth","text":"<ul> <li>The REST API endpoint (8880) is secured, requiring a valid JWT token for access. This token needs to be obtained from an IdP. For easy configuration Domino can act as this IdP.</li> <li>The metrics endpoint (8890) uses BASIC authentication with the user name set in the configuration variable <code>metrics/metricsUser</code> and the salted and encrypted password in the configuration variable <code>metrics/metricsPassword</code>. It's strongly recommended to update these values and only share with the metrics owner. The metrics endpoint is read only.</li> <li>The management endpoint (8889) uses basic authentication. it can serve multiple users configured in the <code>managementAPI</code> key of the configuration.</li> </ul> <p>The credentials for the management endpoint are deliberately NOT retrieved from a directory service (Domino or otherwise) to be able to access the management API on failure of individual components (last code standing). Trying to link this API to a directory service would defeat the purpose of the management endpoint.</p>"},{"location":"references/security/securingKEEPEndpoints.html#areas-of-security-to-assess-and-implement","title":"Areas of security to assess and implement","text":"<ul> <li> <p>Which ports to open and close:</p> <ul> <li>You must secure your admin port 8889 and metrics port 8890 from the outside world.</li> </ul> </li> <li> <p>How to handle HTTPS (via proxy or let Domino REST API handle it):</p> <ul> <li> <p>For configuring HTTPS via proxy, see the example under HTTPS via Proxy.</p> </li> <li> <p>Domino REST API supports three different types of certificates: PEM, JKS, and PKS.</p> </li> </ul> </li> <li> <p>How to handle JWT authentication token:</p> <ul> <li>Single server built-in, where each server issues and uses their own JWT token.</li> <li> <p>Multi-server built-in, where a multi-server environment reacts to the same JWT token.</p> </li> <li> <p>External identify provider, for example, Active Directory, Keycloak, etc.</p> </li> </ul> </li> <li> <p>Domino REST API can access encrypted resources when Domino's ID vault is deployed and the KEEP SAML configuration is set up correctly.</p> <ul> <li>Details are still being ironed out on how to do this. This will be updated as soon as we have a solution.</li> </ul> </li> </ul>"},{"location":"references/usertools/index.html","title":"User tools","text":"<p>The table shows the tools you can use when dealing with REST APIs. Some tools are referenced in this documentation, but you can use whichever tool you are comfortable with.</p> <p>Note</p> <p>These tools aren't installed on the server. They're provided as tool recommendations for individual developers.</p> Tool Name Description curl Command line tool and library for transferring data with URLs. It is used for REST interaction - for scripts and command line. jq Command line tool that processes JSON back and forth. Works well with curl. Postman Cross-platform tool to interact with REST resources. Easy to use and very powerful when testing APIs. We provide sample collections for it, for you to try. Bruno Git-integrated, fully offline, and open-source API client to interact with REST resources. CharlesProxy HTTP(S) proxy to debug. Especially helpful when the client is not a browser. Mockaroo Online tool to generate sample data. Let's Encrypt Generates free SSL certificates. SourceTree for GIT Used for version control. Swagger UI Allows visualization and interaction with APIs without the need for actual implementation logic."},{"location":"references/usertools/index.html#documentation","title":"Documentation","text":"<p>We use Markdown to render this documentation in GitHub Pages using MKDoc Material with a few plugins.</p> <p>Images used here are created in multiple ways:</p> <ul> <li> <p>OmniGraffle (Mac)</p> </li> <li> <p>SmartDraw (Browser and Windows)</p> </li> <li> <p>PlantUML rendering text into images (using this VSCode plugin)</p> </li> <li> <p>Occasionally Balsamiq for Wireframes</p> </li> <li> <p>GIMP to postprocess screenshots if needed</p> </li> <li>... and a few others</li> </ul>"},{"location":"references/usertools/bruno.html","title":"Bruno","text":""},{"location":"references/usertools/bruno.html#introduction","title":"Introduction","text":"<p>Bruno  is an offline-first, open-source API client that improves collaboration by maintaining a live connection to your version control system, such as Git. With Bruno, collections are stored directly in a folder on your file system, and a plain text markup language called <code>Bru</code> saves information about API requests. Additionally, Bruno enhances data privacy and security since it operates offline. There is no concept of logging in or creating an account, and there is no cloud connection to sync your work in Bruno.</p> <p>Bruno enables you to send authentication details with your API requests. You can set authentication methods at either the request level or the collection level, allowing all your requests to use the same method if desired. Authentication details can be included in the header, body, or as a parameter with any request in Bruno.</p> <p>Bruno currently supports OAuth2 authentication.</p>"},{"location":"references/usertools/bruno.html#installation","title":"Installation","text":"<p>Bruno is available as a native desktop app for macOS, Windows, and Linux. For more information, see Download Bruno's Desktop Application .</p>"},{"location":"references/usertools/curl.html","title":"curl","text":""},{"location":"references/usertools/curl.html#introduction","title":"Introduction","text":"<p>curl is an open source utility for executing APIs from the command line. It has been in continuous usage since 1997 and over time has gathered widespread support. It currently offers a rich set of command line options and supports all the common network protocols.</p>"},{"location":"references/usertools/curl.html#installing-curl","title":"Installing curl","text":"<p>In the latest Mac and Windows systems, curl is installed by default. For those who need to download it, there are a couple of approaches:</p> <p>If you have already installed Git Bash on your system, then you can run curl commands directly from the Git Bash window, without installing any other applications.</p> <p>curl for Windows can also be downloaded from the site mentioned here.</p>"},{"location":"references/usertools/curl.html#command-line-options","title":"Command line options","text":"<p>curl can be a little overwhelming for someone used to working with APIs through a user interface. However, once you're familiar with it, it's easy to use.</p> <p>The basic layout of a curl command is:</p> <p>curl \\&lt;list of command options&gt; \\&lt;url&gt;</p> <p>The list of command options that you include in the command largely controls its behavior. To see all the options, use curl --help. Below are some commonly-used options.</p> Command Option Description -d, --data \\&lt;data&gt; HTTP POST data (that is the data payload for a post request) -i, --include Include response headers in the output -I, --head Show document info only (that is just the header) -K, --config \\&lt;file&gt; Read config from a file (that is to get options from a file) -o, --output \\&lt;file&gt; Write response to a file instead of stdout -O, --remote-name Write output to a file named as the remote file (that is to download a file) -u, --user \\&lt;user:password&gt; Server user and password (authentication) -v, --verbose Make the operation more talkative -X, --request \\&lt;command&gt; Specify request command to use (that is a PUT command is: -X PUT)"},{"location":"references/usertools/curl.html#learning-curl","title":"Learning curl","text":"<p>curl can be used against the Domino REST APIs to practice. However, there is also the JSONPlaceholder site (in the Resources below) that provides a safe online REST API site full of fake data that can be used to test your curl skills.</p>"},{"location":"references/usertools/curl.html#resources-to-learn-curl","title":"Resources to learn curl","text":"<ul> <li> <p>curl Home Page</p> </li> <li> <p>curl Documentation Page</p> </li> <li> <p>Basic cURL Tutorial</p> </li> <li> <p>Testing APIs with the cURL Command</p> </li> <li> <p>JSONPlaceholder (fake data)</p> </li> <li> <p>Postman Homepage</p> </li> </ul>"},{"location":"references/usertools/postman.html","title":"Postman","text":""},{"location":"references/usertools/postman.html#introduction","title":"Introduction","text":"<p>Postman is a collaborative platform for designing and building APIs. It contains a number of useful features, including the ability to include a unit test within each API record.</p>"},{"location":"references/usertools/postman.html#installation-and-configuration","title":"Installation and configuration","text":"<p>After Postman is up and running, it needs to be configured to run the Domino REST APIs. This involves importing two sets of files - Collections and Environments.</p>"},{"location":"references/usertools/postman.html#collections","title":"Collections","text":"<p>Collections are groups of API calls, which appear in the left-hand navigation on the \"Collections\" tab. They can be separated further into folders. The folders used correspond to the tags in our OpenAPI specs.</p> <ol> <li> <p>Click the Import button in the upper left, followed by Choose Files.</p> </li> <li> <p>To access the resources, click downloads to view the collections information.</p> </li> </ol>"},{"location":"references/usertools/postman.html#environments","title":"Environments","text":"<p>Environments are sets of environment variables, which appear in the grey shaded drop-down menu at top right. This allows you to select the current environment to use. Beside the drop-down is an \"eye\" button to view the current environment and a \"cog\" button to manage all environments.</p> <ol> <li> <p>Click the Import button on the upper left, followed by Choose Files.</p> </li> <li> <p>To access the resources, click downloads to view the environments information.</p> </li> <li> <p>You only need to add variables to the environment, if they need default values.</p> </li> </ol>"},{"location":"references/usertools/postman.html#authentication","title":"Authentication","text":"<p>Nearly all the Domino REST APIs fail if your login credentials aren't authenticated. Logging in with valid authentication is the first step. There are a couple of approaches:</p> <ol> <li> <p>Expand Project Domino REST API \\ authentication in the left nav.</p> </li> <li> <p>Select Admin Login and open up the Body section. You will see this:</p> <p></p> </li> <li> <p>Set the <code>password</code> to password and <code>username</code> to John Doe and then click Send to be logged in. Another approach is to access through Environment variables AdminPassword and AdminName.</p> </li> </ol>"},{"location":"references/usertools/postman.html#environment-variables","title":"Environment Variables","text":"<p>In some Domino REST APIs, you see fields surrounded by double brackets like {{HOST}} or {{AdminName}}. These fields represent user inputs and should generally not be hard coded. For Domino REST API, the environment variables are packaged in the relevant environment you imported in.</p> <ul> <li>Click the eyeball icon to the right of the environment box:</li> </ul> <p></p> <p>This shows the current settings of the environment variables and allows you to create more environment variables. For example, you could set AdminName to John Doe from here.</p>"},{"location":"references/usertools/postman.html#the-basics","title":"The basics","text":"<p>There are a number of tutorials on the Postman application. This section gives a quick overview of the Postman user interface.</p> <p></p>"},{"location":"references/usertools/postman.html#top-navigation","title":"Top navigation","text":"<p>The black banner at the top of the screen contains product-wide features. In the upper left corner, you'll see New for creating new Postman objects and Import for importing Postman Collections. The Runner button lets you run a series of APIs without having to click on each one individually. In the upper right corner, are Postman's settings under the wrench icon.</p>"},{"location":"references/usertools/postman.html#left-navigation","title":"Left navigation","text":"<p>The left navigation contains a History tab that acts much like a browser history. It lists a history of the APIs you have run. The Collections tab is where you'll find the Domino REST API Collection.</p>"},{"location":"references/usertools/postman.html#content","title":"Content","text":"<p>The upper half of the main content section contains a description of the request you are about to send. It can be edited in place before making the request. The bottom half of the screen is reserved for the response to your request.</p>"},{"location":"references/usertools/postman.html#references","title":"References","text":"<ul> <li> <p>Postman Homepage</p> </li> <li> <p>Postman Learning Center</p> </li> <li> <p>Postman Key Concepts</p> </li> <li> <p>The Basics of Using Postman for API Testing</p> </li> </ul>"},{"location":"references/usertools/swagger.html","title":"Swagger UI","text":""},{"location":"references/usertools/swagger.html#introduction","title":"Introduction","text":"<p>Swagger UI allows to visualize and interact with APIs without having any of the actual implementation logic in place. The APIs are automatically generated from the OpenAPI Specification, formerly Swagger, with the visual documentation making it easier to implement the backend code at a later stage.</p>"},{"location":"references/usertools/swagger.html#the-openapi-specification","title":"The OpenAPI Specification","text":"<p>The OpenAPI Specification is a set of rules that semantically describes APIs. It's written either in YAML or JSON and hence, is both human- and machine-readable. Here is a simple JSON description of the Domino REST API:</p> <p></p>"},{"location":"references/usertools/swagger.html#swagger-ui_1","title":"Swagger UI","text":"<p>The OpenAPI Specification provides us a complete interactive user interface. The user interface for Domino REST API can be found here: http://localhost:8880* and it looks like this:</p> <p></p>"},{"location":"references/usertools/swagger.html#references","title":"References","text":"<p>Domino REST API Swagger UI: http://localhost:8880</p> <p>Swagger UI Homepage: https://swagger.io/tools/swagger-ui/</p> <p>Note</p> <p>You need a Domino REST API server running to open localhost links.</p>"},{"location":"references/usingdominorestapi/index.html","title":"Overview of using Domino REST API","text":"<p>Domino REST API provides you an API for your Domino server to be used from anything that speaks http(s). To get started do the following:</p> <ul> <li>Create a database configuration (Schema) for an existing Domino database, available in the Admin UI and the API.</li> <li>Note: You can also create a database using API calls.</li> <li>Enable the forms, views, folders, agents and document items you want available through the API, this can be done via the Admin UI and the API.</li> <li>Activate the schema by creating a scope (Rest mapping)</li> <li>Experiment using a REST http tool like <code>curl</code> or <code>postman</code>.</li> <li>Configure an application in the AdminUI to create a client_id and a client_secret, so your applications can use OAuth to authenticate</li> <li>Add REST API calls your application.</li> </ul>"},{"location":"references/usingdominorestapi/dataformats.html","title":"DataFormats","text":""},{"location":"references/usingdominorestapi/dataformats.html#domino-and-json-data-formats","title":"Domino and JSON data formats","text":"<p>The Domino REST API translates between native Domino and JSON schema derived data. Since it isn't a 1:1 mapping, refer to the following tables:</p>"},{"location":"references/usingdominorestapi/dataformats.html#single-values-json-to-domino","title":"Single Values, JSON to Domino","text":"Schema JSON native Text<sup>1</sup> Number Date RichText String String Password String int32 Number int64 Number Float Number Double Number Date String DateTime String Byte String Boolean Boolean Names String Readers String Authors String RichText<sup>2</sup> String RichText<sup>2</sup> Object"},{"location":"references/usingdominorestapi/dataformats.html#multi-values-json-to-domino","title":"Multi Values JSON to Domino","text":"<p>Incoming JSON data comes as JSON arrays and turned into Multi-Value Notes items. The above table applies.</p>"},{"location":"references/usingdominorestapi/dataformats.html#single-values-domino-to-json","title":"Single Values, Domino to JSON","text":"<p>Domino Documents might or might not contain expected items and those items might or might not comply to the expected data format. The following table shows what works:</p> Schema JSON native Text Number Date RichText String String Password String int32 Number int64 Number Float Number Double Number Date String DateTime String Byte String Boolean Boolean Names String Readers String Authors String RichText<sup>3</sup> Object"},{"location":"references/usingdominorestapi/dataformats.html#multi-values-domino-to-json","title":"Multi Values, Domino to JSON","text":"<ul> <li>Multiple Values are retrieved as a JSON array.</li> <li>When defined as single value in the Schema, but contains more than 1 value only first is returned.</li> </ul> <ol> <li> <p>Text includes Names, Authors, Readers\u00a0\u21a9</p> </li> <li> <p>RichText can be MIME in Base64, plain or an Object\u00a0\u21a9\u21a9</p> </li> <li> <p>RichText is always returned as JSON object. For more information, see Rich Text.\u00a0\u21a9</p> </li> </ol>"},{"location":"references/usingdominorestapi/encryptsign.html","title":"Using encryption, decryption, and signing during development","text":"<p>Note</p> <ul> <li>This feature is only available starting from the Domino REST API v1.1.0 release. </li> <li>You must configure your Domino server to enable this feature. For more information, see Set up Domino REST API for encryption, decryption, and signing. </li> </ul>"},{"location":"references/usingdominorestapi/encryptsign.html#encryption","title":"Encryption","text":"<p>When Field items in a Form mode's schema have the Encrypt option enabled, the endpoint payload must contain a <code>@encryption</code> JSON object to configure the encryption behavior:</p> <ul> <li><code>keys</code> can be set to an array of named keys expected to be in the user's ID. These are the keys listed in File\u00a0\u2192Security\u00a0\u2192User Security\u00a0\u2192Notes Data\u00a0\u2192Documents in the Notes client. Developers must know what those key names are to be able to encrypt.</li> <li> <p><code>users</code> can be set to an array of usernames to encrypt the document for. When set, Domino will look up the public keys for those users and encrypt the items in a way they can read. Use the Canonical format of the name, for example <code>CN=test user/O=myorg</code>.</p> <p>Note</p> <p>If neither <code>keys</code> nor <code>users</code> are specified, the items are encrypted for the calling user only, which means only that user can decrypt those fields.</p> </li> <li> <p><code>options</code> - (optional) The following options aren't typically necessary to include. For more information, search for these options in the Domino C API.</p> <ul> <li><code>ENCRYPT_WITH_USER_PUBLIC_KEY</code> (the default)</li> <li><code>ENCRYPT_SMIME_IF_MIME_PRESENT</code></li> <li><code>ENCRYPT_SMIME_NO_SENDER</code></li> <li><code>ENCRYPT_SMIME_TRUST_ALL_CERTS</code></li> </ul> </li> </ul> <p>If encryption is set for any items and the <code>@encryption</code> object, even an empty one, isn't present in the payload, it will fail with error message E1130, This form mode requires encryption but no @encryption payload was provided.</p>"},{"location":"references/usingdominorestapi/encryptsign.html#decryption","title":"Decryption","text":"<p>Decryption happens passively and requires no schema configuration or special endpoint request. When a document contains encrypted items, Domino REST API attempts to load the user's ID from the Vault and, if it can, tries to decrypt the document. If the user ID isn't accessible or the user doesn't have the keys to decrypt the document, a warning will be included in the payload's <code>@warnings</code> object.</p>"},{"location":"references/usingdominorestapi/encryptsign.html#signing","title":"Signing","text":"<p>When a Form mode's schema has the Sign Document option enabled, creating or updating a document will result in an attempt to load the user's ID from the Vault and sign the document with the user's ID. If that's not possible, the operation will fail with the error message E1131, Unable to retrieve user ID from Vault for cryptography operations.</p>"},{"location":"references/usingdominorestapi/formnames.html","title":"Form and Alias handling","text":"<p>Notes and Domino use the value of the form item to determine what form to load when displaying a document. The first match of a form item value (or a form formula in a view or folder) with either a form name or any of the 0:n aliases determines what form is used to render a document.</p> <p>This is in line with Model-View-Controller where the document has the role of the model and the form serves as the view (kind of).</p> <p></p>"},{"location":"references/usingdominorestapi/formnames.html#rest-api-form-handling","title":"REST API form handling","text":"<p>The REST API uses the information from the document's form item to determine access by looking at the configuration loaded from the active schema accessed through the scope.</p> <p>The approach follows the same principle as the Notes client or the Domino HTTP task, just the lookup source is the schema and not the list of forms in the design.</p> <p>Form item normalization</p> <p>The REST API does \"normalize\" the value of the form item. The returned form item is the (last) alias of the found form configuration. The stored document is not altered.</p> <p></p>"},{"location":"references/usingdominorestapi/formnames.html#the-rationale","title":"The rationale","text":"<p>In contemporary development understanding we have label/value pairs. To normalize Notes documents we follow this pattern with the form name being the label and the last item being the value.</p> <p>Aliases inbetween are considered \"variations\" we remove from API use to simplify access for outside developers.</p>"},{"location":"references/usingdominorestapi/keepapplications.html","title":"Domino REST API Applications","text":""},{"location":"references/usingdominorestapi/keepapplications.html#connecting-your-application-to-domino-rest-api","title":"Connecting your application to Domino REST API","text":"<p>Any programming language is able to connect to a REST API. Depending on your approach, there are some particularities to observe.</p> <p>We distinguish between client and server based applications. Client based applications can access databases that have been marked for Open Access, while server based applications can provide an application id and application secret to get a different level of access.</p>"},{"location":"references/usingdominorestapi/keepapplications.html#browser-based-applications","title":"Browser based applications","text":"<p>Browser based applications (ReactJS, Angular, Vue, VanillaJS) can be hosted on a different server than the URL of the Domino REST API. To enable access to Domino REST API (besides the user's credential), CORS need to be configured to allow access from the server providing the static files to Domino REST API. This is configured in the <code>security.json</code> in the <code>CORS</code> section. You need to add your domain and set it to <code>true</code>. To simplify corporate deployment, we check domain endings only. Which means that <code>acme.com</code> covers <code>www.acme.com</code>, <code>hr.acme.com</code> or even <code>one.two.three.acme.com</code>.</p> Starting Domino REST API v1.1.3From Domino REST API v1.0 to v1.1.2 <p>Starting Domino REST API v1.1.3, CORS uses Regex. For more information, see CORS is now using Regex.</p> <p>The default entry in <code>security.json</code> should look like this:</p> <pre><code>{\n  \"CORS\": {\n    \"^https?:\\\\/\\\\/localhost$\": true,\n    \"^https?:\\\\/\\\\/hcl\\\\.com$\": true,\n    \"^https?:\\\\/\\\\/.*\\\\.local$\": true\n\n  }\n}\n</code></pre> <p>If you disable the preset and enable <code>acme.com</code>, you create a <code>security.json</code> with this content:</p> <pre><code>{\n  \"CORS\": {\n    \"^https?:\\\\/\\\\/localhost$\": false,\n    \"^https?:\\\\/\\\\/hcl\\\\.com$\": false,\n    \"^https?:\\\\/\\\\/.*\\\\.local$\": false,\n    \"^https?:\\\\/\\\\/acme\\\\.com$\": true\n  }\n}\n</code></pre> <p>wherein:</p> <ul> <li><code>^</code> \u2192 beginning of the string</li> <li><code>http</code> \u2192 the literal string <code>http</code></li> <li><code>s?</code> \u2192 optional the string <code>s</code></li> <li><code>\\\\/</code> \u2192 double escape the string <code>/</code></li> <li><code>.*</code> \u2192 one or more characters of any type</li> <li><code>\\\\.</code> \u2192 double escape the string <code>.</code></li> <li><code>$</code> \u2192 end of string</li> </ul> <p>Note</p> <p>Inside JSON, the <code>\\</code> of Regex gets escaped to <code>\\\\</code>.</p> <p>The default entry in <code>security.json</code> is like this:</p> <pre><code>{\n  \"CORS\": {\n    \"localhost\": true,\n    \"hcl.com\": true,\n    \".local\": true\n  }\n}   \n</code></pre> <p>Let's say you want to disable the preset and enable <code>acme.com</code>, you create a <code>security.json</code> with this content:</p> <pre><code>{\n  \"CORS\": {\n    \"localhost\": false,\n    \"hcl.com\": false,\n    \".local\": false,\n    \"acme.com\": true\n  }\n}\n</code></pre>"},{"location":"references/usingdominorestapi/keepapplications.html#hosting-your-static-application-on-domino-rest-api","title":"Hosting your static application on Domino REST API","text":"<p>Frameworks like Angular, ReactJS, Swelte etc. usually generate a <code>build</code> directory with a set of static files.</p> <p>You can copy that directory to <code>keepweb.d</code> in your Domino data directory and Domino REST API will serve them on the <code>/keepweb/</code> URL path. This eliminates the need for CORS configuration.</p> <p>Check the details in Security Configuration.</p>"},{"location":"references/usingdominorestapi/keepapplications.html#server-based-applications","title":"Server based applications","text":"<p>In the Admin UI or the Admin API, you can define an \"application\" which consists of:</p> <p></p> <ul> <li>App Name or Application Name</li> <li>Application description</li> <li>App ID or Application ID</li> <li>App Secret</li> </ul> <p>In the Admin UI, you can also:</p> <ul> <li>Edit an application.</li> <li>Generate or regenerate an application secret.</li> <li>Delete an application.</li> <li>Launch an application.</li> </ul> <p>For more information, see Application Management.</p> <p>When creating a new Application, enter the application name, application description, the callback URL or URLs, and one or more scopes. The scope provides access to Domino REST API schema that the application wants to get data from.</p> <p>When the application presents App ID and App Secret in the header of a request, it can access the databases, even when they're not defined as \"Open Access\". This information is required for an application to use an OAuth flow to gain access to data. Thus, an application server can have more access than a browser application.</p> <p>Domino REST API offers an OAuth/OIDC controlled access.</p>"},{"location":"references/usingdominorestapi/keepapplications.html#desktop-applications","title":"Desktop applications","text":"<p>These are applications designed using Java or .NET, Electron or shell scripts with curl.</p> <p>Since desktop applications can't keep secrets, we treat them like browser applications. They can only access Domino databases that are flagged for \"Open Access\". You don't need to worry about CORS setup, unless you are running a local http server. This is why localhost is in the default CORS permission list.</p>"},{"location":"references/usingdominorestapi/keepcli.html","title":"Domino REST API CLI","text":""},{"location":"references/usingdominorestapi/keepcli.html#overview","title":"Overview","text":"<p>A simple shell script using the curl command is all you need to interact with Domino REST API.</p> <p>Create the following shell script  in your <code>~/bin</code> directory and enable it using <code>chmod +x Domino REST API</code>.</p> <p>Skip the <code>.sh</code> extension to make calling the command similar to Windows <code>.cmd</code> files.</p>"},{"location":"references/usingdominorestapi/keepcli.html#for-linux-or-macos","title":"For Linux or macOS","text":"<pre><code>#!/bin/bash\n# Simple keep command line\n#Global variables\nhttpcommand=$(echo \"$1\" | tr '[:lower:]' '[:upper:]')\nkeep=https://frascati.projectkeep.io\nuser=\"Doctor Notes\"\napipath=api\n\n# Login function\nexecute_login() {\n   # Login to KEEP remote\n   read -p \"server [$keep]:\" server\n   read -p \"Username [$user]: \" uservar\n   read -sp \"Password: \" passvar\n   server=${server:-$keep}\n   uservar=${uservar:-$user}\n   echo\n   echo accessing $server as $uservar\n   echo\n   dataraw=\"{\\\"username\\\" : \\\"${uservar}\\\", \\\"password\\\" : \\\"${passvar}\\\"}\"\n   token=$(curl --location --request POST \"${server}/api/v1/auth\" \\\n   --header 'Content-Type: application/json' \\\n   --data-raw \"${dataraw}\" |  jq -r  '.bearer')\n   echo $token\n   echo token=$token &gt; $TMPDIR/keep.login\n   echo server=$server &gt;&gt; $TMPDIR/keep.login\n   exit 0\n}\n\n# Logout, just remove the token\nexecute_logout() {\n    echo User logged out &gt; $TMPDIR/keep.login\n    rm -f $TMPDIR/keep.login\n    echo User logged out\n    exit 0\n}\n\n# Make a call to keeep\nexecute_http() {\nif [ ! -f $TMPDIR/keep.login ]; then\n    echo \"You need to login first with keep login\"\n    exit 1\nfi\nexport $(cat $TMPDIR/keep.login | xargs)\n httpcommand=$(echo \"$1\" | tr '[:lower:]' '[:upper:]')\n shift\n curl -s -X ${httpcommand} --fail --insecure -H \"Authorization: Bearer ${token}\" -H \"Content-Type: application/json\" ${server}/${apipath}/$@\n if [ $? -ne 0 ]; then\n   echo \"Command $httpcommand failed!\"\n   exit 1\n fi\n exit 0\n}\n\nexecute_help() {\n  echo \"Usage keep [login|logout|help]\"\n  echo \"      keep [get|post|put|patch|delete] URL PAYLOAD\"\n  echo \" e.g. keep login\"\n  echo \"      keep get v1/scopes\"\n  echo \"      keep get pim-v1/inbox\"\n  echo \"Hints:\"\n  echo '      \"keep get\" without parameters - returns list of APIs'\n  echo \"      common APIs: v1,admin-v1,pim-v1,poi-v1,setup-v1\"\n  echo '      \"keep get [api]/schema/[schema-json-fiel from keep get]\" returns the OpenAPI spec for that API'\n  echo \" e.g. keep get v1/schema/openapi.basis.json\"\n  echo '      using \"| jq\" after a command returns pretty printed JSON (jq installed separately)'\n}\n\nif [ -z \"$1\" ]; then\n  execute_help;\n  exit 1\nfi\n\nif [[ \"$httpcommand\" == \"LOGIN\" ]]; then\n  execute_login;\nfi\n\nif [[ \"$httpcommand\" == \"LOGOUT\" ]]; then\n  execute_logout;\nfi\n\nif [[ \"$httpcommand\" == \"HELP\" ]]; then\n  execute_help;\n  exit 0\nfi\n\n# All other cases\nexecute_http $@\n</code></pre>"},{"location":"references/usingdominorestapi/keepcli.html#for-windows","title":"For Windows","text":"<pre><code>@ECHO OFF\nREM Poor man's keep command line\nSETLOCAL EnableDelayedExpansion\n\nSET K_tempfile=%TEMP%\\keep.login\n\nWHERE /Q curl\nIF %ERRORLEVEL% NEQ 0 GOTO needcurl\nWHERE /Q powershell\nIF %ERRORLEVEL% NEQ 0 GOTO needps\n\nSET \"K_ps=powershell -Command \"\\\"%1\\\".ToLower()\"\"\nFOR /F \"usebackq delims=\" %%p IN (`%K_ps%`) DO SET K_httpcommand=%%p\n\nSET K_keep=http://localhost:8880\nSET K_user=KEEP Admin\nSET K_apipath=api\n\nIF \"%K_httpcommand%\"==\"help\" GOTO execute_help\nIF \"%K_httpcommand%\"==\"login\" GOTO execute_login\nIF \"%K_httpcommand%\"==\"logout\" GOTO execute_logout\nGOTO execute_http\n\n:execute_login\nSETLOCAL EnableDelayedExpansion\nIF EXIST %K_tempfile% DEL /Q %K_tempfile%\nSET /P K_server=server [%K_keep%]: %=%\nIF \"%K_server%\"==\"\" SET K_server=%K_keep%\nSET /P K_uservar=Username [%K_user%]: %=% \nIF \"%K_uservar%\"==\"\" SET K_uservar=%K_user%\nSET \"K_ps2=powershell -Command \"$pword = read-host 'Password' -AsSecureString ; ^\n    $BSTR=[System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($pword); ^\n        [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)\"\"\nFOR /F \"usebackq delims=\" %%p IN (`%K_ps2%`) DO SET K_passvar=%%p\nECHO accessing %K_server% as %K_uservar%\nECHO.\n\nSET K_dataraw={\\\"username\\\":\\\"%K_uservar%\\\",\\\"password\\\":\\\"%K_passvar%\\\"}\n\nREM ECHO Performing 'curl --location --request POST %K_server%/api/v1/auth --header \"Content-Type: application/json\" --data-raw \"%K_dataraw%\"'\nFOR /F \"delims=\" %%i in ('curl --silent --location --request POST %K_server%/api/v1/auth --header \"Content-Type: application/json\" --data-raw \"%K_dataraw%\"') DO SET K_curlout=%%i\n\nFOR /F \"tokens=1,2 delims=:{}, \" %%A IN (\"%K_curlout%\") DO (\n    IF \"%%~A\"==\"bearer\" SET K_token=%%~B\n)\nIF \"%K_token%\"==\"\" GOTO loginfailed\nECHO %K_token%\nECHO.\nECHO Login successful\nECHO.\nECHO token=%K_token%&gt;%TEMP%\\keep.login\nECHO server=%K_server%&gt;&gt;%TEMP%\\keep.login\nGOTO end\n\n:execute_logout\nECHO User logged out &gt; %K_tempfile%\nIF EXIST %K_tempfile% DEL /Q %K_tempfile%\nECHO.\nECHO User logged out\nECHO.\nGOTO end\n\n:execute_http\nIF NOT EXIST %K_tempfile% GOTO needtologin\nFOR /F \"tokens=1,2 delims==\" %%a IN (%K_tempfile%) DO (\n  IF %%a==token SET K_token=%%b\n  IF %%a==server SET K_server=%%b\n)\n\nSET \"K_ps3=powershell -Command \"\\\"%K_httpcommand%\\\".ToUpper()\"\"\nFOR /F \"usebackq delims=\" %%p IN (`%K_ps3%`) DO SET K_httpcommand=%%p\n\nSET K_curloutfile=%TEMP%\\keep.curlout\nIF EXIST %K_curloutfile% DEL /Q %K_curloutfile%\n\nFOR /F \"tokens=1,*\" %%a in (\"%*\") do set K_allbutfirstparm=%%b\nREM ECHO Performing `curl --silent -X %K_httpcommand% --fail --show-error --insecure -H \"Authorization: Bearer %K_token%\" -H \"Content-Type: application/json\" %K_server%/%K_apipath%/%K_allbutfirstparm%'\n\ncurl --silent -X %K_httpcommand% --fail --show-error --insecure -H \"Authorization: Bearer %K_token%\" -H \"Content-Type: application/json\" %K_server%/%K_apipath%/%K_allbutfirstparm% &gt;&gt; %K_curloutfile%\nIF NOT EXIST %K_curloutfile% goto error_executing\nTYPE %K_curloutfile%\nECHO.\nIF EXIST %K_curloutfile% DEL /Q %K_curloutfile%\nGOTO end\n\n:execute_help\nECHO.\nECHO Usage keep [login^|logout^|help]\nECHO       keep [get^|post^|put^|patch^|delete] URL PAYLOAD\nECHO e.g.  keep login\nECHO       keep get v1/scopes\nECHO       keep get pim-v1/inbox\nECHO Hints:\nECHO       \"keep get\" without parameters - returns list of APIs\"\nECHO       common APIs: v1,admin-v1,pim-v1,poi-v1,setup-v1\nECHO       \"keep get [api]/schema/[schema-json-fiel from keep get]\" returns the OpenAPI spec for that API\nECHO  e.g. keep get v1/schema/openapi.basis.json\nECHO       to use a body in a request #1, use --data-binary \"@pathToYourJsonFile\"\nECHO       to use a body in a request #2, use --data-raw and enclose your data in double quotes\nECHO            for Windows, you must escape all commas (^^,) and quotes (\\\") in the json\nECHO            example: --data-raw \"{\\\"Form\\\":\\\"Customer\\\"^,\\\"First_Name\\\":\\\"Joe\\\"^,\\\"last_name\\\":\\\"Notesguy\\\"}\"\nECHO       using \"| jq\" after a command returns pretty printed JSON (jq installed separately)\nECHO.\nGOTO end\n\n:needcurl\nECHO.\nECHO Cannot find curl on your path.  \nECHO Please install curl before trying to use this tool.\nECHO.\nGOTO end\n\n:needps\nECHO.\nECHO Cannot find PowerShell on your path.  \nECHO Please install PowerShell before trying to use this tool.\nECHO.\nGOTO end\n\n:needtologin\nECHO.\nECHO You need to login first with keep login.\nECHO.\nGOTO end\n\n:loginfailed\nECHO.\nECHO Failed to log in.\nECHO.\nGOTO end\n\n:error_executing\nECHO.\nECHO Your command failed to execute\nECHO.\nGOTO end\n\n:end\nSET K_tempfile=\nSET K_ps=\nSET K_httpcommand=\nSET K_keep=\nSET K_user=\nSET K_apipath=\nSET K_server=\nSET K_uservar=\nSET K_ps2=\nSET K_passvar=\nSET K_dataraw=\nSET K_curlout=\nSET K_token=\nSET K_ps3=\n</code></pre>"},{"location":"references/usingdominorestapi/keepcli.html#using-the-cli","title":"Using the CLI","text":"<p>You need to log in using the call <code>keep login</code>. Use \"keep HTTPKEYWORD urlpath\" for example <code>keep get databases</code> or <code>keep pim get inbox</code> to access the API. For the http keywords <code>POST</code>, <code>PUT</code> and <code>PATCH</code>, you must provide the <code>Content-Type</code> header and a body. See <code>man curl</code> for details.</p>"},{"location":"references/usingdominorestapi/logging.html","title":"Logging","text":""},{"location":"references/usingdominorestapi/logging.html#overview","title":"Overview","text":"<p>The Domino REST API uses the Apache log4j2 logging framework. By default, logs are stored in the <code>domino-keep.log</code> file in the subdirectory <code>IBM_TECHNICAL_SUPPORT</code> in your <code>Notes/Domino</code> data directory.</p> <p>The log files are set to roll over daily or when they reach a size of 10 MB. Logs are kept for a period of 30 days.</p> <p>The default <code>log4j2.properties</code> file controls all this. If you need to make changes to the logging, such as modifying the filename, adjusting the logging destination, or modifying the log level, you can set your own\u00a0logging parameters.</p> <p>Familiarity with Apache log4j2 is strongly recommended. The configuration has two steps:</p> <ul> <li>Specify the location of the configuration file for <code>Notes/Domino</code>. You can choose any name other than <code>log4j2.properties</code> that you prefer.</li> <li>Provide the file.</li> </ul> <p>It's possible to have several configuration files, but only one is active at any given time.</p>"},{"location":"references/usingdominorestapi/logging.html#provide-your-own-logging-configuration","title":"Provide your own logging configuration","text":"<p>This section shows you how to create your own logging configuration to meet your requirements. Typically, that would be to temporarily adjust logging levels like <code>DEBUG</code> and <code>TRACE</code> or to integrate tools like LogStash.</p> <ol> <li> <p>Open the <code>notes.ini</code> file. For more information, see Editing the notes.ini file.</p> </li> <li> <p>Add the <code>KeepLogConfigFile</code> parameters with the following settings and save. The <code>KeepLogConfigFile</code> option can be added to <code>notes.ini</code> to edit the log configuration file.</p> <p>Configuration settings:</p> <ul> <li>Windows: <code>KeepLogConfigFile=C:\\path\\to\\log4j2.properties</code></li> <li>Linux: <code>KeepLogConfigFile=/path/to/log4j2.properties</code> </li> </ul> </li> </ol> <p>Note</p> <ul> <li>You can find the default <code>log4j2.properties</code> file inside the file <code>keep-core jar</code>.</li> <li>For example, extract the contents of the <code>keep-core-1.28.2.jar</code> file and include the <code>log4j2.properties</code> file.</li> </ul>"},{"location":"references/usingdominorestapi/logging.html#additional-information","title":"Additional information","text":"<ul> <li>The \"<code>jar</code>\" component is included in your Java installation. If your path doesn't lead there, indicate the directory to your <code>java\\bin folder.</code></li> <li>Specify the version of your <code>keep-core file,</code> as it may differ from the one shown in the example.</li> <li>Remove the <code>log4j2.properties</code> file from your Rest API directory to avoid potential issues with upgrades.</li> <li> <p>The <code>log4j.properites</code> file for the Domino REST API may change without prior notice. When you observe any differences in the logging behavior after a recent upgrade, extract and review the updated <code>log4j</code> file.</p> </li> <li> <p>Check out the Log4J documentation for details on the available settings.</p> </li> </ul>"},{"location":"references/usingdominorestapi/metrics.html","title":"Metrics","text":""},{"location":"references/usingdominorestapi/metrics.html#accessing-metrics","title":"Accessing metrics","text":"<p>Metrics are exposed on their own dedicated port, \"METRICSPORT\" in the config. The default, if not set, is port 8890. Domino REST API supports metrics produced by MicroMeter in a Prometheus compatible format, pollable from the metrics port.</p>"},{"location":"references/usingdominorestapi/metrics.html#metrics-config","title":"Metrics config","text":"<pre><code>{\n  \"enabled\": true,\n  \"jvmMetricsEnabled\": false\n}\n</code></pre> <p>When jvmMetricsEnabled is set to true, more metrics data is collected and it will impact the performance. Don't configure this unless you need to troubleshoot.</p>"},{"location":"references/usingdominorestapi/metrics.html#metrics-collected","title":"Metrics collected","text":"<p>Out-of-the-box Vert.x automatically collects a variety of metrics about JVM, CPU, thread pools, HTTP servers and the event bus.</p> <p>In addition to standard Vert.x metrics, there are metrics specific to Domino REST API. The following metrics and tags are collected:</p> <ul> <li> <p>Counter of unauthenticated / badly authenticated requests (<code>keep.unauthenticated.request.count</code>). The tags are:</p> <ul> <li>Source class name (className)</li> <li>Error class name (errorClassName)</li> </ul> </li> <li> <p>Counter of API requests (<code>keep.web.handler.requests.total</code>). The tags are:</p> <ul> <li>route (e.g. <code>api.v1</code>, <code>api.admin.v1</code>) and operationId (e.g. <code>fetchjwt</code>)</li> </ul> </li> <li> <p>Counter of requests to database-facing handlers (<code>keep.database.handler.count</code>). The tags are:</p> <ul> <li>Source class name (className)</li> <li>Domino REST API database queried (keepDatabase)</li> <li>Requests type - application, basic auth, user token (type)</li> </ul> </li> <li> <p>Counter of erroring requests to database-facing handlers (<code>keep.database.handler.errors.count</code>). The tags are:</p> <ul> <li>Source class name (className)</li> <li>Domino REST API database queried (keepDatabase)</li> <li>Requests type - application, basic auth, user token (type)</li> </ul> </li> <li> <p>Timer of database-facing handler requests (<code>keep.database.handler.duration</code>). The tags are:</p> <ul> <li>Source class name (className)</li> <li>Domino REST API database queried (keepDatabase)</li> </ul> </li> <li> <p>Counter of requests from server-side applications (<code>keep.application.requests.count</code>). The tags are:</p> <ul> <li>Source class name (className)</li> <li>Domino REST API database queried (keepDatabase)</li> <li>ID of the Domino REST API Application making the request (appId)</li> </ul> </li> <li> <p>Counter of view entries requested (<code>keep.database.handler.entries.count</code>). The tags are:</p> <ul> <li>Source class name (className)</li> <li>Domino REST API database queried (keepDatabase)</li> <li>Requests type - application, basic auth, user token (type)</li> </ul> </li> </ul>"},{"location":"references/usingdominorestapi/modenames.html","title":"Reserved Form mode names","text":"<p>Use form modes to specify what data can be read or written to documents using the form name in their form item. While you are free to pick any name (lower case, no special characters), there are names with a special purpose, namely:</p>"},{"location":"references/usingdominorestapi/modenames.html#default","title":"default","text":"<p>The <code>default</code> mode is, as the name implies, the default when creating or reading documents and in the absence of an explicitly specified <code>mode=</code> parameter</p>"},{"location":"references/usingdominorestapi/modenames.html#dql","title":"dql","text":"<p>When data is queried by DQL, forms need a <code>dql</code> mode to return values. The mode specified what data gets returned. If a form doesn't have a <code>dql</code> mode, no data will be returned for that form in a DQL query.</p>"},{"location":"references/usingdominorestapi/modenames.html#odata","title":"odata","text":"<p>The <code>odata</code> mode lets you define the data that comes through OData endpoints. The API support the OData standard Open Data Protocol(OData). If a form doesn't have an <code>odata</code> mode, then an OData won't return any data for that form.</p>"},{"location":"references/usingdominorestapi/modenames.html#raw","title":"raw","text":"<p>Needed for <code>/api/v1/raw</code> endpoint. The endpoint <code>/api/v1/raw</code> will only return data when the mode <code>raw</code> exists for the form requested and the user has the permission, expressed in the @formula of the raw mode definition. Typically you want to restrict raw access to admin and support users.</p>"},{"location":"references/usingdominorestapi/modenames.html#vsheet","title":"vsheet","text":"<p>The Virtual Spreadsheet feature uses the <code>vsheet</code> mode to save the changes made on each view entry to its respective document. It's recommended that this mode contains all fields that the form has. The Virtual Spreadsheet feature won't be able to save any changes without this mode.</p> <p>Note</p> <p><code>raw</code> mode returns all fields without translation or adjustment.</p>"},{"location":"references/usingdominorestapi/restapitask.html","title":"Domino REST API task","text":"<p>On Domino servers, Domino REST API can be loaded using <code>load restapi</code> in the Domino server console.</p> <p>To automatically start the Domino REST API on server start, the mode of operation you want for a production system, add <code>restapi</code> to the values of the <code>notes.ini</code> entry <code>ServerTasks</code>.</p> <p>The launch of the Domino REST API is governed by the <code>notes.ini</code> key <code>KeepInstallDir</code>, which is set by the Domino REST API installer.</p> <p>Caution</p> <p>If you've configured <code>https</code> for the Domino REST API, modify the <code>notes.ini</code> setting <code>KeepManagementURL</code> to <code>https</code>. By default, this setting is <code>http://localhost:8889</code>. Not doing so will prevent the restapi task from starting.</p>"},{"location":"references/usingdominorestapi/restapitask.html#domino-rest-api-task-commands","title":"Domino REST API task commands","text":"<p>Once the restapi task is loaded in the Domino console, you can use the following commands to interact:</p> Command Effect <code>load restapi</code> Start the Domino REST API. <code>tell restapi quit</code> End Domino REST API. <code>tell restapi reload</code> Restart with new configuration. <code>tell restapi [show] info</code> Show loaded components. <code>tell restapi [show] config</code> Show current configuration. <code>tell restapi [show] status</code> Show version information and state. <code>tell restapi refresh</code> Refreshes Domino REST API with new configuration. Once this command is issued, new incoming requests will be blocked, returning an HTTP Error 503 response. The existing queue of requests will be processed, and once completed, the new configuration will take effect, allowing new requests to be accepted. <code>tell restapi idpstatus</code> Show state of configured identity providers. <code>tell restapi support</code> Create a support package. <code>tell restapi support -includensf</code> Create a support package, including <code>KeepConfig.nsf</code>. <p>The following are settings that can be set in the notes.ini</p> Setting Requirement Description <code>KeepInstallDir</code> required Where Domino REST API is installed <code>KeepJavaHome</code> optional Use a different Java binary than the one in {dominoBin}/jvm <code>KeepManagementURL</code> optional Domino REST API management URL if different than http://localhost:8889 <code>KeepNumAttachAttempts</code> optional Number of attempts to get status of Domino REST API launch (default 10). There is a 3-second interval between attempts. <code>KeepLaunchWaitSecs</code> optional Number of seconds to wait before executing java command (default 0) RESERVED Only use when directed by support <code>KeepLogConfigFile</code> optional Path to an alternate Log4j2 configuration file <code>KeepCurlLogging</code> optional default <code>false</code>, prints curl commands to console <code>KeepAddinLogging</code> optional default <code>false</code>, prints debug statements for the restapi task <code>KeepJavaHeapInMB</code> optional Amount of heap memory in Megabytes that should be allocated to Domino REST API. <p>Keep the KeepManagementURL parameter current</p> <p>When configuring the REST API to use TLS directly you need to update <code>KeepManagementURL</code> to use <code>https://</code> and the domain name your TLS certificate is issued to</p>"},{"location":"references/usingdominorestapi/roles.html","title":"Domino REST API roles","text":"<p>Every organization's size and structure vary and it's up to the organization whether multiple roles can be held by one person or team, or the organization might have specialized teams representing each role (or it's a mix of both).</p> <p></p>"},{"location":"references/usingdominorestapi/roles.html#domino-developer","title":"Domino developer","text":"<p>This role creates the schema that defines what data can be accessed in a nsf database. Schemas can be created using the Domino REST API, the Domino REST API GUI (Admin UI) or Domino designer editing the schema JSON file. Schemas are subject to standard inheritance rules, so a schema in a template will be inherited by databases derived from it. To create, update, or delete a schema, the Domino developer must have a Designer access or higher roles to the application database.</p>"},{"location":"references/usingdominorestapi/roles.html#dominodomino-rest-api-administrator","title":"Domino/Domino REST API administrator","text":"<p>This role creates and activates the scope that defines how the data can be accessed. Also creates (optional) OAuth compatible applications with <code>client_id</code> and <code>client_secret</code> properties. These activities can be completed using the Domino REST API or the Domino REST API GUI. The administrator needs <code>Editor</code> (or at least <code>Author</code> with the <code>[KeepAdmin]</code> role) to the <code>KeepConfig.nsf</code> database.</p>"},{"location":"references/usingdominorestapi/roles.html#volt-mx-administrator","title":"Volt MX administrator","text":"<p>This role configures Volt MX's foundry middleware to interact with Domino REST API using the foundry Domino REST API adapter. Needs to be able to read data from a Domino REST API scope, so minimum access is <code>Reader</code>. The Domino adapter marshals user permissions to Domino REST API. There is no \"database user\" that holds all connections, but individual user permission.</p>"},{"location":"references/usingdominorestapi/roles.html#volt-mx-developer","title":"Volt MX developer","text":"<p>This role develops applications leveraging Domino REST API Endpoints, Volt MX services with the Volt MX Iris IDE. Needs to be able to read data from a Domino REST API scope, so minimum access is <code>Reader</code>. When the application wants to update data in Notes, higher access will be required.</p> <p>You are not limited to Domino and Volt MX specific roles. Classical development is possible too!</p>"},{"location":"references/usingdominorestapi/roles.html#web-developer","title":"Web developer","text":"<p>This role develops applications leveraging Domino REST API Endpoints, Volt MX services using front-end tools like VSCode, Bootstrap or any tools and framework of choice. Needs to be able to read data from a Domino REST API scope, so minimum access is <code>Reader</code>. When the application wants to update data in Notes, higher access will be required.</p>"},{"location":"references/usingdominorestapi/roles.html#mobile-developer","title":"Mobile developer","text":"<p>This role develops applications using the SDKs native to the mobile OS like XCode or Android studio. Needs to be able to read data from a Domino REST API scope, so minimum access is <code>Reader</code>. When the application wants to update data in Notes, higher access will be required.</p> <p>The Volt MX Iris IDE allows to create multi-device experiences without getting lost in device specifics.</p>"},{"location":"references/usingdominorestapi/scopes.html","title":"Scopes","text":"<p>When a Domino REST API access presents its JWT claim, it includes a <code>scopes</code> element. This element determines what resources the API access intends to use.</p> <p>Scopes are a space-separated lists of values. By default, a user who authenticates with Domino to gain a JWT token has the following scope values in the claim:</p> <ul> <li>MAIL: Access to the user's mailbox and calendar.</li> <li>$DATA: Access to any application the user has access to.</li> <li>$DECRYPT: Access to decrypt encrypted items if the database has decryption enabled. (Requires proper setup.)</li> <li>$SETUP: Access control to endpoints that run write operations (CUD) in the <code>/setup-v1/</code> URL space. When your application is accessing endpoints that run write operations (CUD) in the <code>/setup-v1/</code> URL space, update your scope from <code>$DATA</code> to <code>$DATA $SETUP</code>.</li> </ul> <p>A scope doesn't open access to a resource; that's the job of the database ACL. A scope limits access.</p> <p>Besides the default scopes of <code>MAIL</code>, <code>$DATA</code>, <code>$DECRYPT</code>, and <code>$SETUP</code>, any of the database aliases can be used as a scope term. This allows an IdP to ask a user for tailored permissions in an OIDC flow to limit exact access required instead of having the full user spectrum.</p> <p>For more information, see Scope.</p>"},{"location":"references/usingdominorestapi/richtext/index.html","title":"Rich Text and the Domino REST API","text":"<p>Background</p> <p>Rich Text (RTF) was specified by Microsoft in 1987. Notes/Domino uses a similar specification. It's essentially a container format designed to host plain text, formatted text, images, attachments, embedded objects and layout information. It's white space sensitive, a fancy term for being able to \"format\" something by hitting the space key repeatedly.</p> <p>The container formats today that resemble these capabilities are ECMA-376 (ISO/IEC-29500) (a.k.a Office Open XML), ISO/IEC 26300:2006 (a.k.a Open Document Format), which are both XML based and MIME (RFC 1341) which is widely used in eMail. The XML formats, mainly used in word processors aren't native to the web, while MIME doesn't prescribe (it is multipurpose after all) its content parts and isn't native to web browsers.</p>"},{"location":"references/usingdominorestapi/richtext/index.html#defining-rich-text","title":"Defining Rich Text","text":"<p>Any field you want to access in Domino REST API needs to be defined in a schema, using the correct data format.</p> <pre><code>{\n  \"name\": \"Body\",\n  \"type\": \"string\",\n  \"format\": \"richtext\"\n}\n</code></pre> <p>This enables the correct, within the means of the API, processing of Rich Text for both read and write.</p>"},{"location":"references/usingdominorestapi/richtext/index.html#reading-rich-text","title":"Reading Rich Text","text":"<p>There are 6 ways to retrieve Rich Text:</p> <ul> <li>As part of the regular <code>/document/{unid}</code> URL or a list operation using <code>&amp;documents=true</code></li> <li>Using the <code>/query</code> URL</li> <li> <p>Using the <code>/richtext/markdown/{unid}</code> endpoint that returns markdown, which is quite lossy but easy to digest</p> </li> <li> <p>Using the <code>/richtext/mime/{unid}</code> endpoint that returns a MIME representation of a Notes Rich Text</p> </li> <li>Using the <code>/bulk/unid</code> URL</li> <li>Using <code>/richtext/plain/{unid}</code> endpoint that returns a stream of plain unformatted text</li> </ul> <p>By default, the following APIs return Rich Text as MIME, but you can specify a different format by using the <code>richTextAs=</code> URL parameter. The valid formats are <code>html</code>, <code>mime</code>, <code>md</code>, and <code>plain</code>.</p> <ul> <li><code>/document/{unid}</code></li> <li><code>/query</code></li> <li><code>/bulk/unid</code></li> <li><code>/bulk/create</code></li> <li><code>/bulk/update</code></li> <li><code>/lists/{name}</code> (when using the <code>documents=true</code> parameter)</li> </ul> <p>The request response may include the parameters identified in the table below.</p>"},{"location":"references/usingdominorestapi/richtext/index.html#writing-rich-text","title":"Writing Rich Text","text":"<p>Note</p> <p>There is no Rich Text on the web. Domino REST API does NOT attempt to write back data in the original Lotus Notes (ca 1989) Rich Text format, but will use MIME with multipart content.  The Notes client can process and render this for display, but can't edit it without first converting it. Try to avoid editing on both sides.</p> <p>A submission to a <code>richtext</code> field as part of a <code>POST /document/{unid}</code> needs to look like this:</p> <pre><code>{\n  \"Body\": {\n    \"type\": \"[Valid-Content-Type]\",\n    \"encoding\": \"[BASE64|PLAIN]\",\n    \"headers\": \"Valid MIME Header values\",\n    \"content\": \"actual content, eventually encoded\"\n  }\n}\n</code></pre> Parameter Details type Its value must be a valid content type. It can be <code>text/[subtype]</code>, <code>image/[subtype]</code> or <code>multipart/[subtype]</code>.- <code>text/[subtype]</code> is mainly <code>html</code> but could be <code>css</code> or <code>javascript</code>.- <code>image/[subtype]</code> can be any image type that works in the API. But for rendering in the Notes client, stick to <code>jpg</code>, <code>png</code> or <code>svg</code>.- <code>multipart/[subtype]</code> can be <code>mixed</code> or <code>form-data</code>, There is a subtle difference, see examples below. encoding Its value can be either be <code>PLAIN</code> or <code>BASE64</code>. When using <code>PLAIN</code>, you have to escape all quotes so we recommend <code>BASE64</code>. headers MIME headers used to, for example, determine attachment names.Example: <code>\"Content-Disposition: inline; filename=\\\"KEEPLogo.png\\\";\",</code> content Base64 encoded content"},{"location":"references/usingdominorestapi/richtext/index.html#examples","title":"Examples","text":"<p>Pulling in a file into your mime requires <code>multipart/form-data</code> and would look like this:</p> <pre><code>MIME-Version: 1.0\nContent-Type: multipart/mixed;\n        boundary=\"XXXXboundary text\"\n\nThis is a multipart message in MIME format.\n\n--XXXXboundary text\nContent-Type: text/plain\n\nthis is the body text\n\n--XXXXboundary text\nContent-Type: text/plain;\nContent-Disposition: attachment;\n        filename=\"test.txt\"\n\nthis is the attachment text\n\n--XXXXboundary text--\n</code></pre> <p>Posting this to e.g. a Teamroom database would look like this:</p> <pre><code>{\n  \"Form\": \"Main Document\",\n  \"Subject\": \"Test multipart base 64 encoded\",\n  \"Body\": {\n    \"type\": \"multipart/form-data\",\n    \"encoding\": \"BASE64\",\n    \"content\": \"TUlNRS1WZXJzaW9uOiAxLjAKQ29udGVudC1UeXBlOiBtdWx0aXBhcnQvbWl4ZWQ7CiAgICAgICAgYm91bmRhcnk9IlhYWFhib3VuZGFyeSB0ZXh0IgoKVGhpcyBpcyBhIG11bHRpcGFydCBtZXNzYWdlIGluIE1JTUUgZm9ybWF0LgoKLS1YWFhYYm91bmRhcnkgdGV4dApDb250ZW50LVR5cGU6IHRleHQvcGxhaW4KCnRoaXMgaXMgdGhlIGJvZHkgdGV4dAoKLS1YWFhYYm91bmRhcnkgdGV4dApDb250ZW50LVR5cGU6IHRleHQvcGxhaW47CkNvbnRlbnQtRGlzcG9zaXRpb246IGF0dGFjaG1lbnQ7CiAgICAgICAgZmlsZW5hbWU9InRlc3QudHh0IgoKdGhpcyBpcyB0aGUgYXR0YWNobWVudCB0ZXh0CgotLVhYWFhib3VuZGFyeSB0ZXh0LS0=\"\n  }\n}\n</code></pre> An image post looks like this: <pre><code>{\n  \"Form\": \"Main Document\",\n  \"Subject\": \"Test PNG in MIME Field base 64 encoded\",\n  \"Body\": {\n    \"type\": \"image/png\",\n    \"encoding\": \"base64\",\n    \"headers\": \"Content-Disposition: inline; filename=\\\"KEEPLogo.png\\\";\",\n    \"content\": \"\"\n  }\n}\n</code></pre>"},{"location":"references/usingdominorestapi/richtext/index.html#flat-json-submissions-aka-inception-mode","title":"Flat JSON submissions (a.k.a Inception mode)","text":"<p>If your consuming service can't deal with the Rich Text JSON structure, you can wrap the JSON structure into a Base64 encoded String.</p> <p>So you have the <code>content</code> element, which most likely is already Base64 encoded wrapped a second time into Base64. To clarify, you start with:</p> <pre><code>{\n  \"type\": \"image/png\",\n  \"encoding\": \"base64\",\n  \"headers\": \"header values\",\n  \"content\": \"-Encoded base64 here-\"\n}\n</code></pre> <p>Then convert this to Base64:</p>  Conversion result  ewogICJ0eXBlIjogImltYWdlL3BuZyIsCiAgImVuY29kaW5nIjogImJhc2U2NCIsCiAgImNvbnRlbnQiOiAiLUVuY29kZWQgYmFzZTY0IGhlcmUtIgp9  <p>To finally submit it as String (other fields omitted for clarity):</p> <pre><code>{\n  \"Body\": \"ewogICJ0eXBlIjogImltYWdlL3BuZyIsCiAgImVuY29kaW5nIjogImJhc2U2NCIsCiAgImNvbnRlbnQiOiAiLUVuY29kZWQgYmFzZTY0IGhlcmUtIgp9\",\n  \"Form\" : \"Main Document\",\n  ...\n}\n</code></pre> <p>YMMV</p>"},{"location":"references/usingdominorestapi/richtext/index.html#reading-back-attachments-submitted-through-mime","title":"Reading back attachments submitted through MIME","text":"<p>The name of any attachment can be seen, when your form mode contains the virtual field <code>$FILES</code> (case sensitive) and you retrieve the document using the <code>/document</code> endpoint. Using the <code>/attachments/{unid}/{attachmentName}</code> endpoint, they can be retrieved in their binary format.</p> <p>Note</p> <p>Currently, the attachments aren't picked up by the <code>@AttachmentNames</code> formula until they get saved in Notes client once - working on it.</p>"},{"location":"references/usingdominorestapi/richtext/index.html#further-reading","title":"Further reading","text":"<p>To be successful in composing MIME payloads, make yourself familiar with the specification and more explanations:</p> <ul> <li> <p>W3C Multipart specification</p> </li> <li> <p>Mozilla Developer Network on MIME types</p> </li> <li> <p>MIME and eMail by Tyler Makin</p> </li> <li> <p>MIME type sniffing by WHATWG</p> </li> <li> <p>Java code examples with MIME</p> </li> <li> <p>Oracle definition on MIME</p> </li> <li> <p>Wikipedia on MultiPart</p> </li> </ul>"},{"location":"references/usingdominorestapi/richtext/conversion.html","title":"Conversion table","text":"<p>Here are the tables that specify how incoming Rich Text and outgoing Rich Text are converted.</p> <p>Note</p> <p>All incoming and outgoing conversions shown here are the default processes. See Extending Rich Text for instructions on extending Rich Text processing.</p>"},{"location":"references/usingdominorestapi/richtext/conversion.html#incoming-rich-text","title":"Incoming Rich Text","text":"<p>Incoming Rich Text is the Rich Text JSON specified on the request body as the value of a <code>richtext</code> field.</p> <p>The following table is a matrix for submitted types together with its supported <code>createAdditional</code> switches and how it's stored as.</p> <p>Note</p> <p><code>createAdditional</code> is an optional property in the Rich Text JSON that you use to specify what alternative types to create additionally from the original content. It saves a <code>multipart/alternative</code> MIME that contains the original content type and the specified types in the <code>create additional</code> property. Currently, the available values for <code>createAdditional</code> are plain and html.</p> Submitted type createAdditional Stored as Example multipart/mixed - multipart/mixed Example multipart/alternative - multipart/alternative Example text/plain - text/plain Example text/html - text/html Example text/html plain - multipart/alternative- text/html Example text/markdown - text/markdown Example text/markdown plain - multipart/alternative- text/markdown- text/plain Example text/markdown html - multipart/alternative- text/markdown- text/html Example text/markdown plain, html - multipart/alternative- text/markdown- text/plain- text/html Example <p>Warning</p> <p>Updating the <code>richtext</code> field in Notes client may alter what Domino REST API has stored in it. For example, a stored <code>multipart/alternative</code> gets overwritten if the <code>richtext</code> field is updated using the Notes client.</p>"},{"location":"references/usingdominorestapi/richtext/conversion.html#outgoing-rich-text","title":"Outgoing Rich Text","text":"<p>Outgoing Rich Text is how the value of the <code>richtext</code> field is shown in the response body.</p> <p>The following table shows the content of the <code>richtext</code> field, its different <code>richTextAs</code> values, and their corresponding results.</p> Content richTextAs Result type Notes Example Rich Text mime multipart/mixed Example Rich Text html text/html Example Rich Text plain text/plain Example Rich Text markdown text/markdown Example MIME mime multipart/mixed Example 1Example 2 MIME html text/html Fallbacks:- text/markdown \u2192 html Example 1Example 2Example 3Example 4 MIME markdown text/markdown Fallbacks:- text/html \u2192 markdown Example 1Example 2Example 3Example 4 MIME plain text/plain Fallbacks:- text/html \u2192 plain- text/markdown \u2192 plain Example 1Example 2Example 3Example 4Example 5"},{"location":"references/usingdominorestapi/richtext/sample.html","title":"Rich Text","text":""},{"location":"references/usingdominorestapi/richtext/sample.html#incoming","title":"Incoming","text":"Submitted Switch Stored ? multipart/mixed - multipart/mixed multipart/alternative - multipart/alternative text/plain - text/plain ? text/html - text/html text/html [plain] multipart/alternativetext/htmltext/plain text/markdown - text/markdown text/markdown [html] multipart/alternativetext/htmltext/markdown text/markdown [plain] multipart/alternativetext/plaintext/markdown text/markdown [html, plain] multipart/alternativetext/htmltext/markdowntext/plain"},{"location":"references/usingdominorestapi/richtext/sample.html#retrieve","title":"Retrieve","text":"Content RichTextAs= Result How Rich Text mime multipart/mixed 1:1 Rich Text html text/html toMime Rich Text plain text/plain extractText call Rich Text markdown text/markdown toMime -&gt; MD conversion mime mime multipart/mixed 1:1 mime html text/html extract text/html, fallback text/markdown -&gt; flexmark mime plain text/plain extract text/plain, fallback text/html -&gt; JSoup fallback extract md -&gt; Flexmark mime markdown text/markdown extract text/markdown fallback text/html -&gt; flexmark"},{"location":"references/usingdominorestapi/richtext/incoming/multipart-alternative.html","title":"Example: Incoming multipart/alternative","text":"<p>Let's say you want to save the following <code>multipart/alternative</code> MIME in a <code>richtext</code> field:</p> <pre><code>MIME-Version: 1.0\nContent-Type: multipart/alternative;\n        boundary=\"XXXXboundary text\"\n\nThis is a multipart message in MIME format.\n\n--XXXXboundary text\nContent-Type: text/plain\n\nthis is the body text\n\n--XXXXboundary text\nContent-Type: text/html\n\n&lt;b&gt;this is the body text&lt;/b&gt;\n\n--XXXXboundary text--\n</code></pre> <p>You first convert it to <code>BASE64</code> encoding and use that as the <code>content</code> in the following Rich Text JSON:</p> <pre><code>{\n  \"type\": \"multipart/alternative\",\n  \"encoding\": \"BASE64\",\n  \"content\": \"TUlNRS1WZXJzaW9uOiAxLjANCkNvbnRlbnQtVHlwZTogbXVsdGlwYXJ0L2FsdGVybmF0aXZlOw0KICAgICAgICBib3VuZGFyeT0iWFhYWGJvdW5kYXJ5IHRleHQiDQoNClRoaXMgaXMgYSBtdWx0aXBhcnQgbWVzc2FnZSBpbiBNSU1FIGZvcm1hdC4NCg0KLS1YWFhYYm91bmRhcnkgdGV4dA0KQ29udGVudC1UeXBlOiB0ZXh0L3BsYWluDQoNCnRoaXMgaXMgdGhlIGJvZHkgdGV4dA0KDQotLVhYWFhib3VuZGFyeSB0ZXh0DQpDb250ZW50LVR5cGU6IHRleHQvaHRtbA0KDQo8Yj50aGlzIGlzIHRoZSBib2R5IHRleHQ8L2I+DQoNCi0tWFhYWGJvdW5kYXJ5IHRleHQtLQ==\"\n}\n</code></pre> <p>Using the mentioned Rich Text JSON, it will then save the following MIME:</p> <pre><code>MIME-Version: 1.0\nContent-Type: multipart/alternative;\n        boundary=\"XXXXboundary text\"\n\nThis is a multipart message in MIME format.\n\n--XXXXboundary text\nContent-Type: text/plain\n\nthis is the body text\n\n--XXXXboundary text\nContent-Type: text/html\n\n&lt;b&gt;this is the body text&lt;/b&gt;\n\n--XXXXboundary text--\n</code></pre> <p>The saved MIME is the <code>1:1</code> version of the MIME you want to save.</p>"},{"location":"references/usingdominorestapi/richtext/incoming/multipart-mixed.html","title":"Example: Incoming multipart/mixed","text":"<p>Let's say you want to save the following <code>multipart/mixed</code> MIME in a <code>richtext</code> field:</p> <pre><code>MIME-Version: 1.0\nContent-Type: multipart/mixed;\n        boundary=\"XXXXboundary text\"\n\nThis is a multipart message in MIME format.\n\n--XXXXboundary text\nContent-Type: text/plain\n\nthis is the body text\n\n--XXXXboundary text\nContent-Type: text/plain;\nContent-Disposition: attachment;\n        filename=\"test.txt\"\n\nthis is the attachment text\n\n--XXXXboundary text--\n</code></pre> <p>You first convert it to <code>BASE64</code> encoding and use that as the <code>content</code> in the following Rich Text JSON:</p> <pre><code>{\n  \"type\": \"multipart/mixed\",\n  \"encoding\": \"BASE64\",\n  \"content\": \"TUlNRS1WZXJzaW9uOiAxLjANCkNvbnRlbnQtVHlwZTogbXVsdGlwYXJ0L21peGVkOw0KICAgICAgICBib3VuZGFyeT0iWFhYWGJvdW5kYXJ5IHRleHQiDQoNClRoaXMgaXMgYSBtdWx0aXBhcnQgbWVzc2FnZSBpbiBNSU1FIGZvcm1hdC4NCg0KLS1YWFhYYm91bmRhcnkgdGV4dA0KQ29udGVudC1UeXBlOiB0ZXh0L3BsYWluDQoNCnRoaXMgaXMgdGhlIGJvZHkgdGV4dA0KDQotLVhYWFhib3VuZGFyeSB0ZXh0DQpDb250ZW50LVR5cGU6IHRleHQvcGxhaW47DQpDb250ZW50LURpc3Bvc2l0aW9uOiBhdHRhY2htZW50Ow0KICAgICAgICBmaWxlbmFtZT0idGVzdC50eHQiDQoNCnRoaXMgaXMgdGhlIGF0dGFjaG1lbnQgdGV4dA0KDQotLVhYWFhib3VuZGFyeSB0ZXh0LS0=\"\n}\n</code></pre> <p>Using the mentioned Rich Text JSON, it will then save the following MIME:</p> <pre><code>MIME-Version: 1.0\nContent-Type: multipart/mixed;\n        boundary=\"XXXXboundary text\"\n\nThis is a multipart message in MIME format.\n\n--XXXXboundary text\nContent-Type: text/plain\n\nthis is the body text\n\n--XXXXboundary text\nContent-Type: text/plain;\nContent-Disposition: attachment;\n        filename=\"test.txt\"\n\nthis is the attachment text\n\n--XXXXboundary text--\n</code></pre> <p>The saved MIME is the <code>1:1</code> version of the MIME you want to save.</p>"},{"location":"references/usingdominorestapi/richtext/incoming/text-html%2Bplain.html","title":"Example: Incoming text/html + plain","text":"<p>Let's say you want to save the following <code>text/html</code> content in a <code>richtext</code> field:</p> <pre><code>&lt;b&gt;this is the body text&lt;/b&gt;\n</code></pre> <p>Additionally, let's say you also want to create a <code>plain</code> alternative of the <code>text/html</code> content. You then use the following Rich Text JSON:</p> <pre><code>{\n  \"type\": \"text/html\",\n  \"encoding\": \"PLAIN\",\n  \"content\": \"&lt;b&gt;this is the body text&lt;/b&gt;\",\n  \"createAdditional\": \"plain\"\n}\n</code></pre> <p>This saves a <code>multipart/alternative</code> MIME:</p> <pre><code>MIME-Version: 1.0\nContent-Type: multipart/alternative; \n  boundary=\"XXXXboundary text\"\n--XXXXboundary text\nContent-Type: text/html\n\n&lt;b&gt;this is the body text&lt;/b&gt;\n--XXXXboundary text\nContent-Type: text/plain\n\nthis is the body text\n--XXXXboundary text--\n</code></pre>"},{"location":"references/usingdominorestapi/richtext/incoming/text-html.html","title":"Example: Incoming text/html","text":"<p>Let's say you want to save the following <code>text/html</code> content in a <code>richtext</code> field:</p> <pre><code>&lt;b&gt;this is the body text&lt;/b&gt;\n</code></pre> <p>You use that as the <code>content</code> in the following Rich Text JSON:</p> <pre><code>{\n  \"type\": \"text/html\",\n  \"encoding\": \"PLAIN\",\n  \"content\": \"&lt;b&gt;this is the body text&lt;/b&gt;\"\n}\n</code></pre> <p>This saves a <code>text/html</code> MIME:</p> <pre><code>MIME-Version: 1.0\nContent-Type: text/html\n\n&lt;b&gt;this is the body text&lt;/b&gt;\n</code></pre>"},{"location":"references/usingdominorestapi/richtext/incoming/text-markdown%2Bhtml.html","title":"Example: Incoming text/markdown + html","text":"<p>Let's say you want to save the following <code>text/markdown</code> content in a <code>richtext</code> field:</p> <pre><code>**this is the body text**\n</code></pre> <p>Additionally, let's say you also want to create an <code>html</code> alternative of the <code>text/markdown</code> content. You then use the following Rich Text JSON:</p> <pre><code>{\n  \"type\": \"text/markdown\",\n  \"encoding\": \"PLAIN\",\n  \"content\": \"**this is the body text**\",\n  \"createAdditional\": \"html\"\n}\n</code></pre> <p>This saves a <code>multipart/alternative</code> MIME:</p> <pre><code>MIME-Version: 1.0\nContent-Type: multipart/alternative; \n  boundary=\"XXXXboundary text\"\n--XXXXboundary text\nContent-Type: text/markdown\n\n**this is the body text**\n--XXXXboundary text\nContent-Type: text/html\n\n&lt;p&gt;&lt;strong&gt;this is the body text&lt;/strong&gt;&lt;/p&gt;\n\n--XXXXboundary text--\n</code></pre>"},{"location":"references/usingdominorestapi/richtext/incoming/text-markdown%2Bplain%2Bhtml.html","title":"Example: Incoming text/markdown + plain + html","text":"<p>Let's say you want to save the following <code>text/markdown</code> content in a <code>richtext</code> field:</p> <pre><code>**this is the body text**\n</code></pre> <p>Additionally, let's say you also want to create a <code>plain</code> and <code>html</code> alternative of the <code>text/markdown</code> content. You then use the following Rich Text JSON:</p> <pre><code>{\n  \"type\": \"text/markdown\",\n  \"encoding\": \"PLAIN\",\n  \"content\": \"**this is the body text**\",\n  \"createAdditional\": \"plain,html\"\n}\n</code></pre> <p>Note</p> <p>Multiple entries for <code>createAdditional</code> should be comma-separated.</p> <p>This saves a <code>multipart/alternative</code> MIME:</p> <pre><code>MIME-Version: 1.0\nContent-Type: multipart/alternative; \n  boundary=\"XXXXboundary text\"\n--XXXXboundary text\nContent-Type: text/markdown\n\n**this is the body text**\n--XXXXboundary text\nContent-Type: text/html\n\n&lt;p&gt;&lt;strong&gt;this is the body text&lt;/strong&gt;&lt;/p&gt;\n\n--XXXXboundary text\nContent-Type: text/plain\n\nthis is the body text\n--XXXXboundary text--\n</code></pre>"},{"location":"references/usingdominorestapi/richtext/incoming/text-markdown%2Bplain.html","title":"Example: Incoming text/markdown + plain","text":"<p>Let's say you want to save the following <code>text/markdown</code> content in a <code>richtext</code> field:</p> <pre><code>**this is the body text**\n</code></pre> <p>Additionally, let's say you also want to create a <code>plain</code> alternative of the <code>text/markdown</code> content. You then use the following Rich Text JSON:</p> <pre><code>{\n  \"type\": \"text/markdown\",\n  \"encoding\": \"PLAIN\",\n  \"content\": \"**this is the body text**\",\n  \"createAdditional\": \"plain\"\n}\n</code></pre> <p>This saves a <code>multipart/alternative</code> MIME:</p> <pre><code>MIME-Version: 1.0\nContent-Type: multipart/alternative; \n  boundary=\"XXXXboundary text\"\n--XXXXboundary text\nContent-Type: text/markdown\n\n**this is the body text**\n--XXXXboundary text\nContent-Type: text/plain\n\nthis is the body text\n--XXXXboundary text--\n</code></pre>"},{"location":"references/usingdominorestapi/richtext/incoming/text-markdown.html","title":"Example: Incoming text/markdown","text":"<p>Let's say you want to save the following <code>text/markdown</code> content in a <code>richtext</code> field:</p> <pre><code>**this is the body text**\n</code></pre> <p>You use that as the <code>content</code> in the following Rich Text JSON:</p> <pre><code>{\n  \"type\": \"text/markdown\",\n  \"encoding\": \"PLAIN\",\n  \"content\": \"**this is the body text**\"\n}\n</code></pre> <p>This saves a <code>text/markdown</code> MIME:</p> <pre><code>MIME-Version: 1.0\nContent-Type: text/markdown\n\n**this is the body text**\n</code></pre>"},{"location":"references/usingdominorestapi/richtext/incoming/text-plain.html","title":"Example: Incoming text/plain","text":"<p>Let's say you want to save the following <code>text/plain</code> content in a <code>richtext</code> field:</p> <pre><code>this is the body text\n</code></pre> <p>You use that as the <code>content</code> in the following Rich Text JSON:</p> <pre><code>{\n  \"type\": \"text/plain\",\n  \"encoding\": \"PLAIN\",\n  \"content\": \"this is the body text\"\n}\n</code></pre> <p>This saves a <code>text/plain</code> MIME:</p> <pre><code>MIME-Version: 1.0\nContent-Type: text/plain\n\nthis is the body text\n</code></pre>"},{"location":"references/usingdominorestapi/richtext/outgoing/mime-html-1.html","title":"Example 1: Outgoing MIME content as HTML","text":"<p>Let's say you want to retrieve the following MIME content as HTML:</p> <pre><code>MIME-Version: 1.0\nContent-Type: text/html\n\n&lt;b&gt;this is the body text&lt;/b&gt;\n</code></pre> <p>Set the value of <code>richTextAs</code> query parameter to <code>html</code>, and retrieve the document that contains it.</p> <p>You should get the following in the <code>richtext</code> field response:</p> <pre><code>{\n  \"type\": \"text/html\",\n  \"encoding\": \"PLAIN\",\n  \"content\": \"&lt;b&gt;this is the body text&lt;/b&gt;\"\n}\n</code></pre>"},{"location":"references/usingdominorestapi/richtext/outgoing/mime-html-2.html","title":"Example 2: Outgoing MIME content as HTML","text":"<p>Let's say you want to retrieve the following MIME content as HTML:</p> <pre><code>MIME-Version: 1.0\nContent-Type: multipart/alternative; \n  boundary=\"XXXXboundary text\"\n--XXXXboundary text\nContent-Type: text/markdown\n\n**this is the markdown text**\n--XXXXboundary text\nContent-Type: text/html\n\n&lt;p&gt;&lt;strong&gt;this is the html text&lt;/strong&gt;&lt;/p&gt;\n\n--XXXXboundary text\nContent-Type: text/plain\n\nthis is the plain text\n--XXXXboundary text--\n</code></pre> <p>You then set the value of <code>richTextAs</code> query parameter to <code>html</code>, and retrieve the document that contains it.</p> <p>You should get the following in the <code>richtext</code> field response:</p> <pre><code>{\n  \"type\": \"text/html\",\n  \"encoding\": \"PLAIN\",\n  \"content\": \"&lt;p&gt;&lt;strong&gt;this is the html text&lt;/strong&gt;&lt;/p&gt;\\r\\n\"\n}\n</code></pre> <p>Note</p> <p>Since you have a <code>text/html</code> part in the stored multipart MIME, it gets that and returns it as a response.</p>"},{"location":"references/usingdominorestapi/richtext/outgoing/mime-html-3.html","title":"Example 3: Outgoing MIME content as HTML","text":"<p>Let's say you want to retrieve the following MIME content as HTML:</p> <pre><code>MIME-Version: 1.0\nContent-Type: multipart/mixed;\n        boundary=\"XXXXboundary text\"\n\nThis is a multipart message in MIME format.\n\n--XXXXboundary text\nContent-Type: text/markdown\n\n**this is the markdown text**\n\n--XXXXboundary text\nContent-Type: text/plain;\nContent-Disposition: attachment;\n        filename=\"test.txt\"\n\nthis is the attachment text\n\n--XXXXboundary text--\n</code></pre> <p>You then set the value of <code>richTextAs</code> query parameter to <code>html</code>, and retrieve the document that contains it.</p> <p>You should get the following in the <code>richtext</code> field response:</p> <pre><code>{\n  \"type\": \"text/html\",\n  \"encoding\": \"PLAIN\",\n  \"content\": \"&lt;p&gt;&lt;strong&gt;this is the markdown text&lt;/strong&gt;&lt;/p&gt;\\n\"\n}\n</code></pre> <p>Note</p> <p>Since there's no <code>text/html</code> part in the stored multipart MIME, it falls back to finding a <code>text/markdown</code> part, converting it to HTML, and then returning it as a response.</p>"},{"location":"references/usingdominorestapi/richtext/outgoing/mime-html-4.html","title":"Example 4: Outgoing MIME content as HTML","text":"<p>Let's say you want to retrieve the following MIME content as HTML:</p> <pre><code>MIME-Version: 1.0\nContent-Type: multipart/mixed;\n        boundary=\"XXXXboundary text\"\n\nThis is a multipart message in MIME format.\n\n--XXXXboundary text\nContent-Type: text/plain\n\nthis is the plain text\n\n--XXXXboundary text\nContent-Type: text/plain;\nContent-Disposition: attachment;\n        filename=\"test.txt\"\n\nthis is the attachment text\n\n--XXXXboundary text--\n</code></pre> <p>You then set the value of <code>richTextAs</code> query parameter to <code>html</code>, and retrieve the document that contains it.</p> <p>You should get the following in the <code>richtext</code> field response:</p> <pre><code>{\n  \"type\": \"text/html\",\n  \"encoding\": \"PLAIN\",\n  \"content\": \"&lt;pre&gt;this is the plain text\\r\\n&lt;/pre&gt;\\r\\n&lt;p&gt;\\r\\n&lt;table border=\\\"1\\\" cellspacing=\\\"2\\\" cellpadding=\\\"4\\\"&gt;\\r\\n&lt;tr valign=\\\"middle\\\"&gt;&lt;td&gt;&lt;a href=\\\"/Demo.nsf/0/e2dc5306e0c6fc2400258b1d003accff/Body/M2/test.txt?OpenElement\\\"&gt;&lt;img hspace=\\\"4\\\" align=\\\"middle\\\" src=\\\"/icons/medoc.gif\\\" border=\\\"0\\\" alt=\\\"Document Icon\\\" /&gt;test.txt&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;B&gt;Type: &lt;/B&gt;text/plain&lt;br /&gt;\\r\\n&lt;B&gt;Name: &lt;/B&gt;test.txt&lt;/td&gt;&lt;/tr&gt;\\r\\n&lt;/table&gt;\\r\\n&lt;/p&gt;\\r\\n\"\n}\n</code></pre> <p>Note</p> <p>Since there's no <code>text/html</code> part in the stored multipart MIME and no <code>text/markdown</code> part to fall back to, it then returns an HTML conversion of all MIME parts.</p>"},{"location":"references/usingdominorestapi/richtext/outgoing/mime-markdown-1.html","title":"Example 1: Outgoing MIME content as Markdown","text":"<p>Let's say you want to retrieve the following MIME content as Markdown:</p> <pre><code>MIME-Version: 1.0\nContent-Type: text/markdown\n\n**this is the body text**\n</code></pre> <p>Set the value of <code>richTextAs</code> query parameter to <code>markdown</code>, and retrieve the document that contains it.</p> <p>You should get the following in the <code>richtext</code> field response:</p> <pre><code>{\n  \"type\": \"text/markdown\",\n  \"encoding\": \"PLAIN\",\n  \"content\": \"**this is the body text**\"\n}\n</code></pre>"},{"location":"references/usingdominorestapi/richtext/outgoing/mime-markdown-2.html","title":"Example 2: Outgoing MIME content as Markdown","text":"<p>Let's say you want to retrieve the following MIME content as Markdown:</p> <pre><code>MIME-Version: 1.0\nContent-Type: multipart/alternative; \n  boundary=\"XXXXboundary text\"\n--XXXXboundary text\nContent-Type: text/markdown\n\n**this is the markdown text**\n--XXXXboundary text\nContent-Type: text/html\n\n&lt;p&gt;&lt;strong&gt;this is the html text&lt;/strong&gt;&lt;/p&gt;\n\n--XXXXboundary text\nContent-Type: text/plain\n\nthis is the plain text\n--XXXXboundary text--\n</code></pre> <p>Set the value of <code>richTextAs</code> query parameter to <code>markdown</code>, and retrieve the document that contains it.</p> <p>You should get the following in the <code>richtext</code> field response:</p> <pre><code>{\n  \"type\": \"text/markdown\",\n  \"encoding\": \"PLAIN\",\n  \"content\": \"**this is the markdown text**\"\n}\n</code></pre> <p>Note</p> <p>Since you have a <code>text/markdown</code> part in the stored multipart MIME, it gets that and returns it as a response.</p>"},{"location":"references/usingdominorestapi/richtext/outgoing/mime-markdown-3.html","title":"Example 3: Outgoing MIME Content as Markdown","text":"<p>Let's say you want to retrieve the following MIME content as Markdown:</p> <pre><code>MIME-Version: 1.0\nContent-Type: multipart/mixed;\n        boundary=\"XXXXboundary text\"\n\nThis is a multipart message in MIME format.\n\n--XXXXboundary text\nContent-Type: text/html\n\n&lt;h1&gt;this is the html text&lt;/h1&gt;\n\n--XXXXboundary text\nContent-Type: text/plain;\nContent-Disposition: attachment;\n        filename=\"test.txt\"\n\nthis is the attachment text\n\n--XXXXboundary text--\n</code></pre> <p>Set the value of <code>richTextAs</code> query parameter to <code>markdown</code>, and retrieve the document that contains it.</p> <p>You should get the following in the <code>richtext</code> field response:</p> <pre><code>{\n  \"type\": \"text/markdown\",\n  \"encoding\": \"PLAIN\",\n  \"content\": \"this is the html text\\n=====================\\n\\n\"\n}\n</code></pre> <p>Note</p> <p>Since there's no <code>text/markdown</code> part in the stored multipart MIME, it falls back to finding a <code>text/html</code> part, converting it to Markdown, and then returning it as a response.</p>"},{"location":"references/usingdominorestapi/richtext/outgoing/mime-markdown-4.html","title":"Example 4: Outgoing MIME Content as Markdown","text":"<p>Let's say you want to retrieve the following MIME content as Markdown:</p> <pre><code>MIME-Version: 1.0\nContent-Type: multipart/mixed;\n        boundary=\"XXXXboundary text\"\n\nThis is a multipart message in MIME format.\n\n--XXXXboundary text\nContent-Type: text/plain\n\nthis is the plain text\n\n--XXXXboundary text\nContent-Type: text/plain;\nContent-Disposition: attachment;\n        filename=\"test.txt\"\n\nthis is the attachment text\n\n--XXXXboundary text--\n</code></pre> <p>Set the value of <code>richTextAs</code> query parameter to <code>markdown</code>, and retrieve the document that contains it.</p> <p>You should get the following in the <code>richtext</code> field response:</p> <pre><code>{\n  \"type\": \"text/markdown\",\n  \"encoding\": \"PLAIN\",\n  \"content\": \"```\\nthis is the plain text\\r\\n```\\n\\n\\n|-------------------------------------------------------------------------------------------------------------------------|----------------------------------------|\\n| [![Document Icon](/icons/medoc.gif)test.txt](/Demo.nsf/0/2d7369e981bf1c8400258b1d003e1a01/Body/M2/test.txt?OpenElement) | **Type:** text/plain **Name:**test.txt |\\n\\n&lt;br /&gt;\\n\\n\"\n}\n</code></pre> <p>Note</p> <p>Since there's no <code>text/markdown</code> part in the stored multipart MIME and no <code>text/html</code> part to fall back to, it returns a Markdown conversion of all MIME parts.</p>"},{"location":"references/usingdominorestapi/richtext/outgoing/mime-mime-1.html","title":"Example 1: Outgoing MIME content as MIME","text":"<p>Let's say you want to retrieve the following MIME content as MIME:</p> <pre><code>MIME-Version: 1.0\nContent-Type: multipart/mixed;\n        boundary=\"XXXXboundary text\"\n\nThis is a multipart message in MIME format.\n\n--XXXXboundary text\nContent-Type: text/plain\n\nthis is the body text\n\n--XXXXboundary text\nContent-Type: text/plain;\nContent-Disposition: attachment;\n        filename=\"test.txt\"\n\nthis is the attachment text\n\n--XXXXboundary text--\n</code></pre> <p>You then set the value of <code>richTextAs</code> query parameter to <code>mime</code>, or leave it as blank since it'll be <code>mime</code> by default, and retrieve the document that contains it.</p> <p>You should get a <code>multipart/mixed</code> MIME with its <code>content</code> encoded in <code>BASE64</code> in the <code>richtext</code> field response. Decoding it should yield the following:</p> <pre><code>MIME-Version: 1.0\nContent-Type: multipart/mixed;\n        boundary=\"XXXXboundary text\"\n\nThis is a multipart message in MIME format.\n\n--XXXXboundary text\nContent-Type: text/plain\n\nthis is the body text\n\n--XXXXboundary text\nContent-Type: text/plain;\nContent-Disposition: attachment;\n        filename=\"test.txt\"\n\nthis is the attachment text\n\n--XXXXboundary text--\n</code></pre>"},{"location":"references/usingdominorestapi/richtext/outgoing/mime-mime-2.html","title":"Example 2: Outgoing MIME content as MIME","text":"<p>Let's say you want to retrieve the following MIME content as MIME:</p> <pre><code>MIME-Version: 1.0\nContent-Type: multipart/alternative;\n        boundary=\"XXXXboundary text\"\n\nThis is a multipart message in MIME format.\n\n--XXXXboundary text\nContent-Type: text/plain\n\nthis is the body text\n\n--XXXXboundary text\nContent-Type: text/html\n\n&lt;b&gt;this is the body text&lt;/b&gt;\n\n--XXXXboundary text--\n</code></pre> <p>You then set the value of <code>richTextAs</code> query parameter to <code>mime</code>, or leave it as blank because it'll be <code>mime</code> by default, and retrieve the document that contains it.</p> <p>You should get a <code>multipart/mixed</code> MIME with its <code>content</code> encoded in <code>BASE64</code> in the <code>richtext</code> field response. Decoding it should yield the following:</p> <pre><code>MIME-Version: 1.0\nContent-Type: multipart/alternative;\n        boundary=\"XXXXboundary text\"\n\nThis is a multipart message in MIME format.\n\n--XXXXboundary text\nContent-Type: text/plain\n\nthis is the body text\n\n--XXXXboundary text\nContent-Type: text/html\n\n&lt;b&gt;this is the body text&lt;/b&gt;\n\n--XXXXboundary text--\n</code></pre>"},{"location":"references/usingdominorestapi/richtext/outgoing/mime-plain-1.html","title":"Example 1: Outgoing MIME content as plain","text":"<p>Let's say you want to retrieve the following MIME content as plain:</p> <pre><code>MIME-Version: 1.0\nContent-Type: text/plain\n\nthis is the body text\n</code></pre> <p>Set the value of <code>richTextAs</code> query parameter to <code>plain</code>, and retrieve the document that contains it.</p> <p>You should get the following in the <code>richtext</code> field response:</p> <pre><code>{\n  \"type\": \"text/plain\",\n  \"encoding\": \"PLAIN\",\n  \"content\": \"this is the body text\"\n}\n</code></pre>"},{"location":"references/usingdominorestapi/richtext/outgoing/mime-plain-2.html","title":"Example 2: Outgoing MIME content as plain","text":"<p>Let's say you want to retrieve the following MIME content as plain:</p> <pre><code>MIME-Version: 1.0\nContent-Type: multipart/alternative; \n  boundary=\"XXXXboundary text\"\n--XXXXboundary text\nContent-Type: text/markdown\n\n**this is the markdown text**\n--XXXXboundary text\nContent-Type: text/html\n\n&lt;p&gt;&lt;strong&gt;this is the html text&lt;/strong&gt;&lt;/p&gt;\n\n--XXXXboundary text\nContent-Type: text/plain\n\nthis is the plain text\n--XXXXboundary text--\n</code></pre> <p>Set the value of <code>richTextAs</code> query parameter to <code>plain</code>, and retrieve the document that contains it.</p> <p>You should get the following in the <code>richtext</code> field response:</p> <pre><code>{\n  \"type\": \"text/plain\",\n  \"encoding\": \"PLAIN\",\n  \"content\": \"this is the plain text\"\n}\n</code></pre> <p>Note</p> <p>Since you have a <code>text/plain</code> part in the stored multipart MIME, it gets that and returns it as a response.</p>"},{"location":"references/usingdominorestapi/richtext/outgoing/mime-plain-3.html","title":"Example 3: Outgoing MIME content as plain","text":"<p>Let's say we want to retrieve the following MIME content as plain:</p> <pre><code>MIME-Version: 1.0\nContent-Type: multipart/mixed;\n        boundary=\"XXXXboundary text\"\n\nThis is a multipart message in MIME format.\n\n--XXXXboundary text\nContent-Type: text/html\n\n&lt;b&gt;this is the html text&lt;/b&gt;\n\n--XXXXboundary text\nContent-Type: text/markdown\n\n**this is the markdown text**\n\n--XXXXboundary text\nContent-Type: text/plain;\nContent-Disposition: attachment;\n        filename=\"test.txt\"\n\nthis is the attachment text\n\n--XXXXboundary text--\n</code></pre> <p>Set the value of <code>richTextAs</code> query parameter to <code>plain</code>, and retrieve the document that contains it.</p> <p>You should get the following in the <code>richtext</code> field response:</p> <pre><code>{\n  \"type\": \"text/plain\",\n  \"encoding\": \"PLAIN\",\n  \"content\": \"this is the html text\"\n}\n</code></pre> <p>Note</p> <p>Since there's no <code>text/plain</code> part in the stored multipart MIME, it falls back to finding a <code>text/html</code> part, converting it to plain, and then returning it as a response.</p>"},{"location":"references/usingdominorestapi/richtext/outgoing/mime-plain-4.html","title":"Example 4: Outgoing MIME content as plain","text":"<p>Let's say you want to retrieve the following MIME content as plain:</p> <pre><code>MIME-Version: 1.0\nContent-Type: multipart/mixed;\n        boundary=\"XXXXboundary text\"\n\nThis is a multipart message in MIME format.\n\n--XXXXboundary text\nContent-Type: text/markdown\n\n**this is the markdown text**\n\n--XXXXboundary text\nContent-Type: text/plain;\nContent-Disposition: attachment;\n        filename=\"test.txt\"\n\nthis is the attachment text\n\n--XXXXboundary text--\n</code></pre> <p>Set the value of <code>richTextAs</code> query parameter to <code>plain</code>, and retrieve the document that contains it.</p> <p>You should get the following in the <code>richtext</code> field response:</p> <pre><code>{\n  \"type\": \"text/plain\",\n  \"encoding\": \"PLAIN\",\n  \"content\": \"this is the markdown text\"\n}\n</code></pre> <p>Note</p> <p>Since there's no <code>text/plain</code> part in the stored multipart MIME and no <code>text/html</code> part to fall back to, it then checks for a <code>text/markdown</code> part, converts it to plain, and then returns it as a response.</p>"},{"location":"references/usingdominorestapi/richtext/outgoing/mime-plain-5.html","title":"Example 5: Outgoing MIME content as plain","text":"<p>Let's say you want to retrieve the following MIME content as plain:</p> <pre><code>MIME-Version: 1.0\nContent-Type: multipart/mixed;\n        boundary=\"XXXXboundary text\"\n\nThis is a multipart message in MIME format.\n\n--XXXXboundary text\nContent-Type: application/json;\nContent-Disposition: attachment;\n        filename=\"demo1.json\"\n\n{\"key1\":\"value1\",\"key2\":\"value2\",\"key3\":\"value3\"}\n\n--XXXXboundary text\nContent-Type: application/json;\nContent-Disposition: attachment;\n        filename=\"demo2.json\"\n\n{\"key1\":\"value1\",\"key2\":\"value2\",\"key3\":\"value3\"}\n--XXXXboundary text--\n</code></pre> <p>Set the value of <code>richTextAs</code> query parameter to <code>plain</code>, and retrieve the document that contains it.</p> <p>You should get the following in the <code>richtext</code> field response:</p> <pre><code>{\n  \"type\": \"text/plain\",\n  \"encoding\": \"PLAIN\",\n  \"content\": \"demo1.json Type: application/json Name: demo1.json demo2.json Type: application/json Name: demo2.json\"\n}\n</code></pre> <p>Note</p> <p>Since there's no <code>text/html</code> part in the stored multipart MIME and no <code>text/html</code> and <code>text/markdown</code> parts to fall back to, it returns a plain conversion of all MIME parts.</p>"},{"location":"references/usingdominorestapi/richtext/outgoing/richtext-html.html","title":"Example: Outgoing Rich Text content as HTML","text":"<p>Let's say you want to retrieve the following Rich Text content as HTML:</p> <p></p> <p>Set the value of <code>richTextAs</code> query parameter to <code>html</code>, and retrieve the document that contains it.</p> <p>You should get the following in the <code>richtext</code> field response:</p> <pre><code>{\n  \"type\": \"text/html\",\n  \"encoding\": \"PLAIN\",\n  \"content\": \"&lt;span style=\\\"font-family: monospace ; font-size: 10pt ; font-weight: bold ; color: #000000 ; \\\"&gt;I&lt;/span&gt;&lt;span style=\\\"font-family: monospace ; font-size: 10pt ; font-weight: bold ; color: #000000 ; \\\"&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=\\\"font-family: monospace ; font-size: 10pt ; font-weight: bold ; color: #000000 ; \\\"&gt;AM OVERWRITING THIS!&lt;/span&gt;&lt;br /&gt;\\r\\n&lt;span style=\\\"font-family: monospace ; font-size: 10pt ; font-style: italic ; color: #FF0000 ; \\\"&gt;Can't do anything about it :P&lt;/span&gt;&lt;br /&gt;\\r\\n&lt;span style=\\\"font-family: monospace ; font-size: 10pt ; text-decoration: underline ; \\\"&gt;You have no power here...&lt;/span&gt;\"\n}\n</code></pre>"},{"location":"references/usingdominorestapi/richtext/outgoing/richtext-markdown.html","title":"Example: Outgoing Rich Text content as Markdown","text":"<p>Let's say you want to retrieve the following Rich Text content as Markdown:</p> <p></p> <p>Set the value of <code>richTextAs</code> query parameter to <code>markdown</code>, and retrieve the document that contains it.</p> <p>You should get the following in the <code>richtext</code> field response:</p> <pre><code>{\n  \"type\": \"text/markdown\",\n  \"encoding\": \"PLAIN\",\n  \"content\": \"I AM OVERWRITING THIS!  \\nCan't do anything about it :P  \\nYou have no power here...\\n\"\n}\n</code></pre>"},{"location":"references/usingdominorestapi/richtext/outgoing/richtext-mime.html","title":"Example: Outgoing Rich Text content as MIME","text":"<p>Let's say you want to retrieve the following Rich Text content as MIME:</p> <p></p> <p>You set the value of <code>richTextAs</code> query parameter to <code>mime</code>, or leave it blank since it'll be <code>mime</code> by default, and retrieve the document that contains it.</p> <p>You should get a <code>multipart/mixed</code> MIME with its <code>content</code> encoded in <code>BASE64</code> in the <code>richtext</code> field response. Decoding it should yield the following:</p> <pre><code>MIME-Version: 1.0\nContent-Type: multipart/related; boundary=XXXXboundary text\n\n--XXXXboundary text\nContent-type: text/html; charset=UTF-8\nContent-Disposition: inline\n&lt;html&gt;\n &lt;head&gt;&lt;/head&gt;\n &lt;body&gt;\n  &lt;span style=\"font-family: monospace ; font-size: 10pt ; font-weight: bold ; color: #000000 ; \"&gt;I&lt;/span&gt;&lt;span style=\"font-family: monospace ; font-size: 10pt ; font-weight: bold ; color: #000000 ; \"&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=\"font-family: monospace ; font-size: 10pt ; font-weight: bold ; color: #000000 ; \"&gt;AM OVERWRITING THIS!&lt;/span&gt;\n  &lt;br&gt;&lt;span style=\"font-family: monospace ; font-size: 10pt ; font-style: italic ; color: #FF0000 ; \"&gt;Can't do anything about it :P&lt;/span&gt;\n  &lt;br&gt;&lt;span style=\"font-family: monospace ; font-size: 10pt ; text-decoration: underline ; \"&gt;You have no power here...&lt;/span&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n--XXXXboundary text--\n</code></pre>"},{"location":"references/usingdominorestapi/richtext/outgoing/richtext-plain.html","title":"Example: Outgoing Rich Text content as plain","text":"<p>Let's say you want to retrieve the following Rich Text content as plain:</p> <p></p> <p>Set the value of <code>richTextAs</code> query parameter to <code>plain</code>, and retrieve the document that contains it.</p> <p>You should get the following in the <code>richtext</code> field response:</p> <pre><code>{\n  \"type\": \"text/plain\",\n  \"encoding\": \"PLAIN\",\n  \"content\": \"I AM OVERWRITING THIS!Can't do anything about it :P\\n\\nYou have no power here...\"\n}\n</code></pre>"},{"location":"references/usingwebui/index.html","title":"Using Admin UI","text":""},{"location":"references/usingwebui/index.html#overview","title":"Overview","text":"<p>The Admin UI provides a user interface to several Domino REST APIs. It thus serves as an example of what a React application using the Domino REST APIs is capable of. It covers schema, scope, and app management. Anything that can be done using the Web UI can also be done using Postman, curl, Swagger UI, or similar tools. There are tutorials to walk you through the same.</p> <p>Note</p> <p>The screenshots in this section may vary. The screenshots are based on the latest Domino REST API snapshots. Make sure you're up-to-date.</p> <p>This is what the login page looks like.</p> <p> (Image: Castle Johannisburg, Aschaffeburg, Germany)</p> <p>You'll need the administrator username and password to access the server.</p> <p>To use a Domino database in Domino REST API, it must be configured for use in the API. Download <code>Demo.nsf</code> from Resources and save it in the Notes data directory. Then login to the Domino REST API Admin UI using the administrator username and password.</p>"},{"location":"references/usingwebui/index.html#log-in-options","title":"Log in options","text":"<p>There are options for logging in to the Domino REST API Admin UI.</p>"},{"location":"references/usingwebui/index.html#log-in-with-password","title":"Log in with password","text":"<p>This option uses your Domino administrator username and password. You can log in to the Admin UI by entering your administrator username and password in the Username and Password fields, and clicking LOG IN.</p> <p>Note</p> <p>If you have set up an external IdP to access the Admin UI, the Username and Password fields will not be visible by default. To display these fields, click LOG IN WITH PASSWORD. This allows you to enter your credentials and use the Log in with password option.</p>"},{"location":"references/usingwebui/index.html#log-in-with-passkey","title":"Log in with passkey","text":"<p>This option enables users to log in with a passkey that enables signing in to websites without remembering and managing passwords using a biometric sensor, PIN, or pattern. For more information on how to log in with passkey, see Use passkey to log in to Admin UI.</p>"},{"location":"references/usingwebui/index.html#log-in-with-oidc","title":"Log in with OIDC","text":"<p>This option uses the Domino REST API IdP by default and implements the OAuth process requiring user consent to log in. You can log in to the Admin UI by clicking LOG IN WITH OIDC. The DRAPI option will be the only one available from the drop-down field. Click LOG IN.</p> <p></p> <p>Enter you administrator username and password in the Username and Password fields in the HCL Domino Login page, and then click Login.  </p> <p></p> <p>If you have configured an external IdP to log in to the Admin UI, the Log in with OIDC will be the default login option. For more information on the needed configuration, see Set up Admin UI external IdP login configuration.</p> <p>You can log in to the Admin UI by selecting your external IdP from the down-down list, and clicking LOG IN. Use your external IdP authentication credentials and follow succeeding login instructions.</p> <p>The following image shows an example of the Admin UI login page when the user configured their own external IdPs to log in to the Admin UI.</p> <p></p>"},{"location":"references/usingwebui/index.html#links","title":"Links","text":"<p>From the Admin UI, you can access the following:</p> <ul> <li> <p>Schema Management</p> </li> <li> <p>Scope Management</p> </li> <li> <p>Quick Config</p> </li> <li> <p>Application Management</p> </li> <li> <p>OAuth Consents</p> </li> </ul>"},{"location":"references/usingwebui/appui.html","title":"Application Management","text":"<p>Select Application Management - OAUTH from the home page or Applications from the side navigation pane to access the Application Management page.</p>"},{"location":"references/usingwebui/appui.html#view-available-applications","title":"View available applications","text":"<p>The Application Management page shows all available applications.</p> <p></p> <p>Tip</p> <ul> <li>Click the play button to launch the application.</li> <li>Click the Edit Application icon to update the details of the application.</li> <li>Click the Delete Application icon to delete the application. </li> <li>Use the Search App Name search field to search for an application by name. </li> <li>Set the number of applications displayed on the page by selecting a value from Rows per page.</li> <li>Use the pagination arrows to move back and forth through pages.</li> </ul>"},{"location":"references/usingwebui/appui.html#add-an-application","title":"Add an application","text":"<ol> <li>On the Application Management page, click Add Application.</li> <li> <p>Under Add New Application, fill in the form and click Add.</p> <p></p> <p>The new application is now shown in the Application Management page.</p> </li> </ol> <p>Note</p> <ul> <li>When adding a scope, select the scope from the Scope drop-down list and click the Add Scope icon.</li> <li>When your app accesses endpoints that run write operations in the <code>/setup-v1/</code> URL path, make sure to add the <code>$SETUP</code> scope aside from the <code>$DATA</code> scope to enhance access control in relation to the app inheriting a user's access rights when the user grants app access.</li> <li>Select the use PKCE checkbox if you want to use PKCE or Proof Key for Code Exchange, an extension to the authorization code flow to prevent cross-site request forgery and authorization code injection attacks. For more information about how PKCE works and how to implement PKCE, see Authorization Code Flow with Proof Key for Code Exchange (PKCE) .</li> </ul>"},{"location":"references/usingwebui/appui.html#generate-an-app-secret","title":"Generate an app secret","text":"<p>Note</p> <p>This only applies to applications that use app secret as authentication method. This is not needed if you use PKCE as the authentication method. </p> <ul> <li>For applications without a configured app secret, click the Click to Generate Secret text.</li> <li>For applications with a configured app secret, click the Click to Generate Secret icon\u00a0.</li> </ul>"},{"location":"references/usingwebui/appui.html#filter-applications","title":"Filter applications","text":"<p>You can use the filter function to filter which applications to display.</p> <ol> <li>Click the filter icon. This opens the Filter pane.</li> <li>Use any or all the filters as needed, and then click Show Results.</li> </ol> <p>For more information on the filters, refer to the following table:</p> Filter Description Status Select All to display active and inactive applications.Select Active to show only active applications.Select Inactive to show only inactive applications. Authentication method Select All to display all applications.Select App secret to show all applications that use app secret as authentication method.Select App secret generated to show all applications that use app secret as authentication method and with the app secret already generated.Select App secret not generated to show all applications that use app secret as authentication method but with the app secret not yet generated.Select PKCE to show all applications that use PKCE. <p>Tip</p> <p>Click Reset in the Filter pane to clear all filters. </p>"},{"location":"references/usingwebui/appui.html#access-oauth-consents","title":"Access OAuth Consents","text":"<p>On the Application Management page, click OAuth Consents. The OAuth Consents dialog opens.</p> <p>All the information and features in the OAuth Consents dialog are the same to the information and features in the OAuth Consents page. For more information, see OAUth Consents.</p>"},{"location":"references/usingwebui/oauthconsentui.html","title":"OAuth Consents","text":"<p>Select Consents from the side navigation pane to access the OAuth Consents page, which allows the current user to view and revoke available OAuth consents. </p>"},{"location":"references/usingwebui/oauthconsentui.html#view-oauth-consents","title":"View OAuth consents","text":"<p>The OAuth Consents page shows available OAuth consents. </p> <p>Note</p> <p>Users logged into the AdminUI that are in the <code>LocalKeepAdmins</code> group or are Managers in the <code>oauth.nsf</code> ACL will see all user consents and can revoke them as well.</p> <p></p> <p>Tip</p> <ul> <li>Use the Search User or Search App Name search fields to search a specific OAuth consent.</li> <li>Use the User and App Name sorting arrow icons to sort the OAuth consents by user or app name in an alphabetical or reverse alphabetical order. </li> <li>Set the number of OAuth consents displayed on the page by selecting a value from Rows per page.</li> <li>Use the pagination arrows to move back and forth through pages.  </li> </ul>"},{"location":"references/usingwebui/oauthconsentui.html#view-oauth-consent-details","title":"View OAuth consent details","text":"<p>To show details of a specific OAuth consent</p> <ul> <li>Click the expand arrow icon corresponding to a user in the list to show OAuth consent details, such as scope and URL.</li> </ul> <p>Tip</p> <p>Clicking the collapse arrow icon corresponding to the user in the list with shown OAuth consent details hides the shown details. </p> <p>To show details of all OAuth consents</p> <ul> <li>Click Expand all to show details of all the OAuth consents.</li> </ul> <p>Tip</p> <p>Clicking Collapse all hides the details of all the OAuth consents. </p>"},{"location":"references/usingwebui/oauthconsentui.html#filter-oauth-consents","title":"Filter OAuth consents","text":"<p>You can use the filter function to filter which OAuth consents to display.</p> <p>To use the filter</p> <ol> <li>Click All filters. This opens the Filter pane.</li> <li>Use any or all the filters as needed, and then click Show Results. </li> </ol> <p>For more information on the filters, refer to the following table:</p> Filter Description Status Select All to display active and expired OAuth consents.Select Active to show only active OAuth consents. App name Click the toggle to show only consents with application. Expiration Select All to display all OAuth consents regardless of expiration.Select None to display OAuth consents without expiration.Select Custom and then select a specific expiration date from the date picker to show only OAuth consents with expiration matching the selected expiration date. Token Expiration Select All to display all OAuth consents regardless of token expiration.Select None to display OAuth consents without token expiration.Select Custom and then select a specific token expiration date from the date picker to show only OAuth consents with token expiration matching the selected token expiration date. Scopes Select the scopes to show only OAuth consents with scopes matching the selected scopes. <p>Tip</p> <p>Click Reset to clear all filters. </p>"},{"location":"references/usingwebui/oauthconsentui.html#revoke-authorized-user","title":"Revoke authorized user","text":"<ol> <li>Click Revoke corresponding to the authorized user in the list that you want the authorization revoked.</li> <li>In the Revoke Consent dialog, click Yes. </li> </ol> <p>The user is now removed from the authorized users list.</p>"},{"location":"references/usingwebui/quickconfigui.html","title":"Quick Config","text":"<p>The Quick Config enables you to create a schema and a scope at the same time. </p> <p>To quick configure a schema and a scope:</p> <ol> <li> <p>Click Quick Config from the side navigation pane. The Quick Config pane opens.</p> <p></p> </li> <li> <p>Search and select a database from the list of Available Databases.</p> </li> <li>Enter the Schema Name, Scope Name, and Description.</li> <li>Choose a Schema Icon.</li> <li>Choose Additional Modes as required.</li> <li>Click Add.</li> </ol> <p>After completing the steps, you can now see the created schema on the Schema Management page and the created scope on the Scope Management page. </p>"},{"location":"references/usingwebui/schemaui.html","title":"Schema Management","text":"<p>Select Database Management - REST API from the home page or Schemas from the side navigation pane to access the Schema Management page.</p>"},{"location":"references/usingwebui/schemaui.html#view-available-database-schemas","title":"View available database schemas","text":"<p>The Schema Management page shows the available schemas.</p> <p></p> <p>You can arrange the schemas in Stack View, Card View, Alphabetical View, or NSF View. There is also a provision to search through the list either via Schema Name or NSF Name.</p>"},{"location":"references/usingwebui/schemaui.html#add-a-schema","title":"Add a schema","text":"<p>The shape of data available is referred to as a schema. The schema is a JSON file in the design resources of the database. It gets created by a developer with Designer access to the NSF.</p> <p>This creates an alias to the schema. This, along with a scope, provides access to the database via the Domino REST API. One NSF can have multiple schemas, which is useful to provide different data sets or different levels of access to data.</p> <p>You can add a schema by creating your own schema or importing a schema.</p>"},{"location":"references/usingwebui/schemaui.html#create-a-schema","title":"Create a schema","text":"<ol> <li> <p>On the Schema Management page, click Add Schema.</p> <p></p> </li> <li> <p>In the Add New Schema dialog, click Create Schema.</p> <p></p> </li> <li> <p>In the Create Schema dialog:</p> <ol> <li> <p>Select a database from the Database drop-down list.</p> <p>You can also enter the database name in the Database field to filter the list of available databases.</p> </li> <li> <p>Select an Icon.</p> </li> <li>Enter a Schema Name and a Schema Description.</li> <li>Click Save Schema.</li> </ol> </li> </ol>"},{"location":"references/usingwebui/schemaui.html#import-a-schema","title":"Import a schema","text":"<p>Use this option if you want to import a new schema from a JSON file produced by exporting database schema as JSON file.</p> <ol> <li>On the Schema management page, click Add Schema.</li> <li>In the Add New Schema dialog, click Import Schema.</li> <li> <p>Select the JSON database file and click Open. The JSON database file is the exported file from another database or within your server.</p> </li> <li> <p>In the Import Schema dialog:</p> <ol> <li>Choose the <code>.nsf</code> database from the Import Into Database dropdown list. The default <code>.nsf</code> is from the imported database JSON file.</li> <li>Update the Icon, Schema Name, Schema Description, and Formula Engine as needed. </li> <li>Click Save Schema. </li> </ol> </li> </ol> <p>The <code>nsf</code> database file and schema are added to the schema list.</p> <p>Note</p> <p>The imported schema name must be unique. You'll be warned if you try to save a schema to a database that already has a schema with the same name.</p>"},{"location":"references/usingwebui/schemaui.html#edit-a-schema","title":"Edit a schema","text":"<ol> <li>On the Schema Management page, select the schema you want to edit.</li> <li> <p>In the schema details card, click the edit icon.</p> <p></p> </li> <li> <p>In the Edit Schema dialog:</p> <ul> <li>You can select a new icon from the drop-down icon list.</li> <li>You can update the description of the schema in the Description.</li> <li>You can update the configuration by clicking the toggles to enable or disable the configuration settings. For more information, refer to the following table:</li> </ul> Configuration setting Description DQL Access Enable the setting to allows DQL queries to run against the elements of the schema. A mode named <code>dql</code> must be created on each form specifying the fields allowed for that form. In $DATA Scope Enable the setting to make schema available in the system <code>$DATA</code> scope. Disable the setting to limit access to the schema to those with the specific scope. Enable Code feature under development Require Revision Enable the setting to require the provision of the correct revision version of the document to update the document through an update endpoint. Prevent Design Refresh Enable the setting to flag the schema written to the database, so the Domino design task won't replace or delete the schema. <ul> <li> <p>You can enter a valid Notes formula in DQL Formula to limit DQL usage. The formula must evaluate to <code>@True</code> for DQL to be allowed. The default is <code>@True</code>, which means no limitations.</p> <p></p> </li> </ul> </li> <li> <p>Click Save.</p> </li> </ol>"},{"location":"references/usingwebui/schemaui.html#list-available-database-forms","title":"List available database forms","text":"<ol> <li>Select a schema from the list of schemas to load the details.</li> <li> <p>Select Database Forms from the menu bar to show the list of all the forms for the selected database schema.</p> <p></p> </li> </ol>"},{"location":"references/usingwebui/schemaui.html#add-new-form-schema","title":"Add new form schema","text":"<p>The Add New Form Schema feature enables the creation of a new custom form through which you can set up a schema. The feature doesn't create a new form on the backend, so it won't exist in the database. Everything related to the new form is contained within the schema. Therefore, if you delete the form, it's only removed from the list of forms on the Database Forms tab.</p> <ol> <li>Click Add New Form Schema.</li> <li>In the Add New Form Schema dialog, enter your schema name and click Create.</li> <li>On the Schema Management - &lt;schema name&gt; page, select a form from the Show fields from dropdown field to display the fields of the selected form. You can also select All Fields from the dropdown field to display all the fields from all the available forms.</li> <li>Select the fields that you want to add to the mode.</li> <li>Configure the Field Setting and Mode Settings as needed for each added field.</li> <li>Click Save.</li> </ol> <p>The new form is now added to the list of forms and has an Active status.</p> <p>Note</p> <ul> <li>The form created using this feature can't be deactivated and can only be deleted. To delete the form, click the menu icon beside the form's status and select Delete. In the WARNING: Deleting Custom Form dialog, click Yes to confirm.</li> <li>You can identify a custom form by the marker beside the form name and by the custom form text below the form name.</li> </ul>"},{"location":"references/usingwebui/schemaui.html#activate-a-form","title":"Activate a form","text":"<p>To activate a specific form or forms</p> <ul> <li>Select the form that you want to activate, click the corresponding menu icon beside the form's status, and then select Activate.</li> </ul> <p>The activated form now has an Active status.</p> <p>Tip</p> <p>Clicking the menu icon and selecting Deactivate corresponding to a form deactivates the form. In the Reset Form dialog, click Yes to confirm. The form now has an Inactive status.</p> <p>To activate all forms</p> <ul> <li>Click Activate All.</li> </ul> <p>All forms are now activated with default settings and have Active status.</p> <p>Tip</p> <ul> <li> <p>Clicking Deactivate All deactivates all active forms and removes all the configurations you have made to each of the forms. In the confirmation dialog, click Yes to confirm. All forms now have an Inactive status.</p> </li> <li> <p>Clicking Deactivate All won't deactivate forms created using the Add New Form Schema feature.  </p> </li> </ul>"},{"location":"references/usingwebui/schemaui.html#change-form-configuration","title":"Change form configuration","text":"<ol> <li> <p>On the Database Forms tab, click the pencil icon corresponding to the activated form that you want to edit.</p> <p></p> <p>Note</p> <p>Clicking the pencil icon corresponding to an inactive form shows the Activate Form dialog, which requires you to confirm the activation of the form. If you click OK, the form is activated, and you are directed to the form Access Mode page. </p> <p>The Access Mode page opens showing the <code>default</code> access mode.</p> <p></p> </li> <li> <p>Under Show fields from, hover over a field item and click the + icon. This adds the field in the form. Repeat this for all the fields to be added.</p> <p></p> <p>Tip</p> <ul> <li>Click Add All Fields icon to add all the available fields to the form.</li> <li>Click Refresh List of Fields icon to refresh the list of avaialble fields.</li> <li>Use the Search Field search box to search for a field by field name.</li> <li>Hover over the Info icon beside the field name to show the field property. The field can be editable, which means that the field has Read/Write access setting. The field can also be either computed, computed when composed, or computed for display, which means that the field has Read Only access setting.</li> <li>Enter a custom field name in the Add custom field and click the + icon to add a custom field to the form.</li> <li>Click Delete Fields, select the fields to remove, and then click Remove to remove the selected fields from the form.</li> </ul> </li> <li> <p>Under Field Setting, you can set the Field Name, Field Type, and the read or write access of the field in the form.</p> <p>Tip</p> <ul> <li>Click the Multi-Value toggle to the on position to specify a Field Group. The Multi-Value toggle isn't clickable to the off position if you specified a field group.</li> <li>Click the Required toggle to the on position to specify that the field is a required field. When set to the on position, the word Required is added below the name of the field in the added field list.</li> </ul> <p>Encryption feature</p> <p>The encryption feature is available starting from the Domino REST API v1.1.0 release. Make sure to set up Domino REST API for encryption, decryption, and signing before executing the following steps for encryption and signing.</p> <p>Click the Encrypt toggle to the on position to enable encryption. For more information on encryption and signing, see Using encryption, decryption, and signing during development.</p> </li> <li> <p>Under Mode Settings:</p> <ol> <li> <p>Click the pencil icon corresponding to a mode formula. A dialog opens.</p> <p>The following image shows the opened Formula for Delete Access dialog.  </p> <p> </p> </li> <li> <p>In the text field in the dialog, edit the <code>@True</code> or <code>@False</code> entry and click Save to close the dialog.</p> </li> </ol> <p>Tip</p> <ul> <li>You can configure the Formula for Write Access to be computed with form. For more information, see Set computed with form.</li> <li>As a provided option, you may test the formula using the Test Formulas.</li> </ul> <p>Signing feature</p> <p>The signing feature is available starting from the Domino REST API v1.1.0 release. Make sure to set up Domino REST API for encryption, decryption, and signing before executing the following steps for encryption and signing.</p> <p>Click the Sign Document toggle to the on position to enable this feature. For more information on encryption and signing, see Using encryption, decryption, and signing during development.</p> </li> <li> <p>(Optional) Under Validation Rules:</p> <ol> <li>Click Add Rule if you want to add a validation rule to validate the value of a field. The Add Rule dialog opens.</li> <li>Enter the validation formula in the Formula field and the error message in the Error Message field.</li> <li>Click Add.</li> </ol> Example of validation rule <p>The image shows an example of an added validation rule requiring that the value of the <code>first_name</code> field must be Adam.</p> <p></p> Tips for validation rules <ul> <li>You can add a validation rule for each field you added to the database form. </li> <li>To delete a validation rule, select the validation rule and then click Delete Rule. In the confirmation dialog, click Delete.</li> <li> <p>You can go to OpenAPI to check if the added validation rule works. As an example, an error occurs showing the provided error message when creating a document with the <code>first_name</code> field having a value of George since it is not equal to the value set by the formula, which is Adam.</p> <p>The image shows the document being created with an incorrect value for the first_name field. Click the image for better viewing.</p> <p></p> <p>The image shows the error message. Click the image for better viewing</p> <p></p> </li> </ul> </li> <li> <p>Click Save.</p> </li> </ol>"},{"location":"references/usingwebui/schemaui.html#add-a-mode","title":"Add a mode","text":"<ol> <li>On the Database Forms tab, click the pencil icon corresponding to the activated form that you want to add a mode. The form Access Mode page opens showing the <code>default</code> access mode.</li> <li>Click Add Mode.</li> <li> <p>In the Add New Mode dialog, enter the name of the new mode and click Save. The new mode has been added to the <code>Mode</code>list.</p> <p>The following image shows an example of the added mode, which is the <code>dql</code>.</p> <p></p> </li> <li> <p>Add fields and set the read or write access formula for each of the added fields. </p> </li> <li>Click Save.</li> </ol>"},{"location":"references/usingwebui/schemaui.html#clone-a-mode","title":"Clone a mode","text":"<p>Use Clone Mode to add a new mode based on an existing mode in the same schema.</p> <ol> <li>On the Database Forms tab, click the pencil icon corresponding to the activated form that you want to clone a mode. The form Access Mode page opens showing the <code>default</code> access mode.</li> <li>From the Mode dropdown list, choose the mode you want to clone, for example the <code>default</code> mode.</li> <li>Click Clone Mode.</li> <li> <p>In the Clone &lt;mode name&gt; dialog, enter the name of the mode and click Save. </p> <p>The new mode cloned from an existing mode is now available. You can remove or add fields to the new mode and read or write access formula for each of the fields.</p> </li> <li> <p>Click Save.</p> </li> </ol>"},{"location":"references/usingwebui/schemaui.html#compare-modes","title":"Compare modes","text":"<p>Use this function to see the differences between the modes of a selected form. To use this function, you must have at least two modes in your selected form.</p> <ol> <li>On the Database Forms tab, click the pencil icon corresponding to the activated form that you want to compare the modes. The form Access Mode page opens showing the <code>default</code> access mode.</li> <li>Click Open Mode Compare. The Mode Compare - &lt;form name&gt; page opens.</li> <li>Select the modes to compare from the drop-down lists in the comparison columns. The comparison result is displayed.</li> </ol> <p></p> <p>Note</p> <ul> <li>A field available in only one mode is highlighted, and then indicated as Field not existing in the other mode. </li> <li>Fields with differences are highlighted. </li> </ul> <p>Tip</p> <ul> <li>Click the Show only fields with differences toggle to only show fields with differences.</li> <li>In case there are too many fields, and you want to find a specific field, you can enter the field name in the Search Field to only display the specific field if available.</li> <li>Click Add New Column to add more modes in the comparison.</li> <li>Click the close icon to close the Mode Compare - &lt;form name&gt; page.</li> </ul>"},{"location":"references/usingwebui/schemaui.html#list-available-database-views","title":"List available database views","text":"<ol> <li>Select a schema from the list of schemas to load the details.</li> <li> <p>Select Database Views from the menu bar. This lists all the views for the selected schema.</p> <p></p> </li> </ol>"},{"location":"references/usingwebui/schemaui.html#activate-a-view","title":"Activate a view","text":"<p>To activate a specific view or views:</p> <ul> <li>Select the view that you want to activate, and then click the corresponding Active option under Status.</li> </ul> <p>Tip</p> <p>Clicking the Inactive option corresponding to a view deactivates the view. On the Reset Views Columns dialog, click Yes to confirm deactivation of the view. </p> <p>To activate all views:</p> <ul> <li>Click Activate All.</li> </ul> <p>Tip</p> <p>Clicking Deactivate All deactivates all active views and removes all configurations you have made to each of the views. On the Reset ALL View Columns dialog, click Yes to confirm deactivation of all views.</p>"},{"location":"references/usingwebui/schemaui.html#edit-a-view","title":"Edit a view","text":"<p>See Edit a database view of a schema for more information.</p>"},{"location":"references/usingwebui/schemaui.html#list-available-database-agents","title":"List available database agents","text":"<ol> <li>Select a schema from the list of schemas to load the details.</li> <li> <p>Select Database Agents from the menu bar. This lists all the Agents for the selected database.</p> <p></p> </li> </ol>"},{"location":"references/usingwebui/schemaui.html#activate-an-agent","title":"Activate an agent","text":"<p>To activate a specific agent or agents</p> <ul> <li>Select the agent you want to activate, and then click the corresponding Active option under Status.</li> </ul> <p>Tip</p> <p>Clicking the Inactive option corresponding to an agent deactivates the agent.</p> <p>To activate all agents</p> <ul> <li>Click Activate All.</li> </ul> <p>Tip</p> <p>Clicking Deactivate All deactivates all active agents. On the Reset ALL Agents dialog, click Yes to confirm the deactivation of all agents.</p>"},{"location":"references/usingwebui/schemaui.html#view-source","title":"View Source","text":"<p>The Source tab allows you to view the database schema details in JSON format.</p> <ol> <li>Select a schema from the list of schemas to load the schema details.</li> <li> <p>Select Source from the menu bar to show the details for the selected schema in the following view mode:</p> <ul> <li>Text View - shows the text view of the details of the selected schema in JSON format</li> <li>Tree View - shows the collapsible view of the details of the selected schema in JSON format</li> </ul> </li> </ol> <p>Note</p> <ul> <li> <p>To edit the database schema JSON details, see Edit database schema JSON.</p> </li> <li> <p>To export the schema in a JSON file, see Export schema as JSON file.</p> </li> </ul>"},{"location":"references/usingwebui/scopeui.html","title":"Scope Management","text":"<p>Select Database Management - Activation from the home page or Scopes from the side navigation pane to access the Scope Management page.</p>"},{"location":"references/usingwebui/scopeui.html#view-available-scopes","title":"View available scopes","text":"<p>The Scope Management page shows the available scopes.</p> <p></p> <p>You can arrange the scopes in Stack View, Card View, Alphabetical View, or NSF View. There is also a provision to search through the list either via Scope Name or NSF Name.</p>"},{"location":"references/usingwebui/scopeui.html#add-a-scope","title":"Add a scope","text":"<p>Tip</p> <p>A scope points to a schema that's contained in a database. A database can have many schemas for different use cases and a schema can be pointed to by more than one scope.</p> <ol> <li> <p>On the Scope Management page, click Add Scope to add a database.</p> <p></p> </li> <li> <p>Under Available Schema, select the schema that the scope will belong to.</p> </li> <li> <p>Under Add New Scope, fill in the form and click Add.</p> <ul> <li> <p>For the Server field, enter the name of the server the scope is available on, or leave it blank for the current server. The value of the entered name must be either the server's hierarchical name or in canonical format. See the following examples for reference:</p> <ul> <li>MyServer/MyOrg</li> <li>CN=MyServer/O=MyOrg</li> </ul> <p>Note</p> <p>Accessing a scope on a different server will always return an HTTP 302 response. The server to be redirected to will be dictated by the <code>Fully qualified Internet hostname</code> from the server connection document of the server that owns the scope.</p> </li> <li> <p>For the Maximum Access Level, the default is Editor. You can set it to another value to set the scope's maximum access anyone using the scope has. </p> </li> </ul> </li> </ol> <p></p> <p>Note</p> <p>The Maximum Access Level prevents an app that has inherited a user's access rights when the user grants the app access from unauthorized altering of schemas or access control lists.\u00a0 To know more about what each access level allows and to whom the access level is assigned, see Access levels in the ACL.</p>"},{"location":"references/usingwebui/scopeui.html#edit-a-scope","title":"Edit a scope","text":"<ol> <li>On the Scope Management page, click the scope that you want to edit. </li> <li>In the Edit Scope pane, edit the details that you want to change.</li> <li>Click Update.</li> </ol> <p>Note</p> <p>You can only edit the Description, Server, Maximum Access Level, and Scope Icon. </p>"},{"location":"references/usingwebui/scopeui.html#delete-a-scope","title":"Delete a scope","text":"<ol> <li>On the Scope Management page, click the scope that you want to delete.</li> <li>In the Edit Scope pane, click Delete. </li> <li>In the delete confirmation dialog, click Yes. </li> </ol>"},{"location":"topicguides/index.html","title":"Topic guides","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p> <p>This section discusses and explains topics and concepts about HCL Domino REST API to help you gain a better understanding of how HCL Domino REST API works.</p> <ul> <li> <p>Introducing Domino REST API</p> </li> <li> <p>Understanding Domino REST API</p> </li> <li> <p>How HCL Domino REST API works</p> </li> <li> <p>Schema and scopes</p> </li> <li> <p>Form modes</p> </li> <li> <p>Domino REST API is different</p> </li> <li> <p>HCL Domino REST API flows</p> </li> <li> <p>Factories and caches</p> </li> <li> <p>Architectural decisions</p> </li> <li> <p>Planning your application</p> </li> <li> <p>Barbican</p> </li> <li> <p>EventBus</p> </li> <li> <p>HTTP handler</p> </li> <li> <p>DominoJNX</p> </li> <li> <p>Agent processing</p> </li> <li> <p>Use cases</p> </li> <li> <p>Domino REST API and Proxy</p> </li> <li> <p>Auxiliary services</p> </li> <li> <p>Reserved Form mode names</p> </li> <li> <p>Web world - a primer</p> </li> <li> <p>Ports</p> </li> </ul>"},{"location":"topicguides/KeepFactory-and-caches.html","title":"Factories and Caches","text":""},{"location":"topicguides/KeepFactory-and-caches.html#keepfactory","title":"KeepFactory","text":"<p>The KeepFactory provides access to individual caches for:</p> <ul> <li>KeepConfig</li> <li>DesignCache</li> <li>LoggedOutUserList</li> <li>JWTManager</li> </ul> <p>It also provides a holder for a relevant user session, a KeepJnxSession object. This is why each instance of <code>AsyncDominoJNXRequest</code> creates a new KeepFactory object, to ensure no pollution of KeepJnxSessions.</p> <p>KeepFactory often needs to work differently for JUnit tests. This is why instances of <code>AbstractKeepVerticle</code> (and <code>AsyncDominoJNXRequest</code>) create their own instance of KeepFactory and have a setter.</p> <p>The KeepFactory is also used by the HttpListener and AbstractKeepDataVerticle to load handler classes according to the OpenAPI spec.</p> <p></p>"},{"location":"topicguides/KeepFactory-and-caches.html#keepconfig","title":"KeepConfig","text":"<p>The KeepConfig contains two main objects:</p> <ul> <li> <p>A map of KeepApiInfo objects, one for each endpoint in the OpenAPI spec with an operationId. The key in the map is the operationId. The contents are loaded when Domino REST API loads. The KeepApiInfo object also checks whether it can work as a JSON handling endpoint, if it:</p> <ul> <li>responds with JSON </li> <li>receives only JSON or expects no body</li> </ul> </li> <li> <p>A map of KeepDbInfo objects, one for each database exposed for Domino REST API access. The key in the map is the Domino REST API name for the database. The structure is:</p> <ul> <li>ApiName</li> <li>FilePath</li> <li>Icon</li> <li>IconName</li> <li>Description</li> <li>List of owners, for reference purposes only</li> <li>FormulaEngine (currently just \"domino\", future plan will include OpenFormula)</li> <li>Whether or not it's active</li> <li>UNID of the Notes Document in Domino REST API Config database</li> <li>ConfigInfo, indicating:<ul> <li>Whether the database allows access from browsers (openAccess).</li> <li>Whether the database allows code to be submitted via the \"/run/code\" and \"/run/codejs\" endpoints (allowCode).</li> <li>Whether Domino Query Language (DQL) can be run against the database (dqlAccess).</li> <li>Formula (applied according to the formulaEngine) for more tightly constraining access to DQL (dqlAccessFormula).</li> <li>List of views that can be used from Domino REST API (availableViews).</li> <li>List of agents than can be run from Domino REST API (agents).</li> <li>List of stored procedures (code that the Domino REST API Administrator has added to be run) - NOT YET IMPLEMENTED (storedProcedures).</li> <li>List of people who must approve requests for external applications to use this database - NOT YET IMPLEMENTED (applicationAccessApprovers).</li> <li>Map of FormAccessModeInfo objects (formConfigs) where the modeName is the key. Every form exposed must have at least one FormAccessModeInfo for a modeName \"default\". Each FormAccessModeInfo contains:<ul> <li>ModeName</li> <li>List of fields exposed to read access (readAccessFields)</li> <li>List of fields exposed to write access (writeAccessFields)</li> <li>Formula (applied according to the formulaEngine) for read access (readAccessFormula)</li> <li>Formula (applied according to the formulaEngine) for write access (writeAccessFormula). This can include validation of the payload.</li> <li>Formula(s) to be applied for any GET requests for the form mode (onLoad)</li> <li>Formula(s) to be applied before saving any documents for this form mode (onSave)</li> </ul> </li> <li>Whether the Input Translation and Input Validation formulas on the underlying Notes Form should be applied (computeWithForm). </li> </ul> </li> </ul> </li> </ul> <p>The KeepConfig is also used to:</p> <ul> <li>Get and retrieve the system user name.</li> <li>Check if local users are allowed, managed via the GodMode environment variable.</li> <li>Scan and retrieve actual database names for the Domino REST API Admin module.</li> <li>Read the JSON OpenAPI spec.</li> </ul>"},{"location":"topicguides/KeepFactory-and-caches.html#designcache","title":"DesignCache","text":"<p>This is a cache for a database's design. It's populated from DesignFetchdxlRequest. Requests for individual design elements automatically route through DesignFetchdxlRequest if the design hasn't yet been cached. There are two buckets of data:</p> <ul> <li>bucket, containing the design extracted as a JSON object.</li> <li>dxlbucket, containing the raw DXL.</li> </ul> <p>Entries are removed from the caches after 8 hours. There is also a specific endpoint to evict the whole cache.</p> <p>The design cache is used by the Domino REST API Admin module to select:</p> <ul> <li>Views to enable for Domino REST API access.</li> <li>Forms to enable for Domino REST API access.</li> <li>Agents to expose for Domino REST API access.   As a result, anyone using the Domino REST API Admin module must have a minimum of Designer access to the databases they are enabling for Domino REST API access.</li> </ul>"},{"location":"topicguides/KeepFactory-and-caches.html#jwtmanager","title":"JWTManager","text":"<p>This is responsible for generating JWT tokens.</p>"},{"location":"topicguides/KeepFactory-and-caches.html#loggedoutuserlist","title":"LoggedOutUserList","text":"<p>This uses an ExpiringMap to auto-expire JWT tokens. The \"/logout\" endpoint also expires a JWT token. The expired tokens are checked by the \"jwt\" security handler, <code>ExpiringJwtHandler</code>.</p>"},{"location":"topicguides/agents.html","title":"Agent processing","text":""},{"location":"topicguides/agents.html#agents-one-of-dominos-differentiators","title":"Agents - One of Domino's Differentiators","text":"<p>One of the differentiators for Domino compared to some other NoSQL databases is the ability for agents to store business logic, workflow processing logic or ad hoc data processing. Moreover, this can be stored in Domino's Formula Language, LotusScript (Lotus's VB-like generic scripting language, only surviving in HCL Notes) or Java. A context document can be passed into the agent, a selection formula can be set via simple settings, or the agent itself can define the document set to run on.</p> <p>About triggers</p> <p>Certain triggers like selected documents or programmatic collections like <code>unprocessedDocuments</code> only make sense in Notes Client. Other triggers like \"Before Mail Arrives\" only make sense in the context of server scheduling. LotusScript UI classes for interacting with the Notes Client will cause an agent to error if you attempt to run it from outside the context of the Notes Client.</p> <p>For further clarification, a developer can use the <code>/design/agents?dataSource=</code> endpoint to get full information about properties of an agent. The @validForKeep property will confirm whether or not the agent can be used from Domino REST API. This does not (currently) introspect the LotusScript to check for NotesUI classes. It only uses the triggers to identify agents that cannot be called from outside the Notes Client.</p>"},{"location":"topicguides/agents.html#running-agents","title":"Running Agents","text":"<p>There are three ways to run an agent via Domino REST API:</p>"},{"location":"topicguides/agents.html#post-runagent","title":"POST: /run/agent","text":"<p>This is used to run an agent in real time. The payload expects at least <code>agentName</code> to define which agent to trigger. NOTE: the calling HTTP thread will be tied up until the agent finishes, so this should only be used for short-running agents. This is designed to simulate running an agent using the \"?OpenAgent\" URL endpoint. Any content from LotusScript <code>print</code> statements will be returned as the HTTP response or, if no print statements are used <code>{\"agentResponse\":\"done\"}</code>. In addition, <code>NotesSession.documentContext</code> will get an in-memory document with the following properties:</p> <ul> <li>REQUEST_METHOD set to \"KEEP\". This can be used to identify how the agent was triggered, for contextual processing.</li> <li>CONTENT_TYPE set to \"application/json\".</li> <li>SERVER_NAME set to \"\".</li> <li>HTTPS set to \"ON\".</li> <li>SERVER_PORT set to \"443\".</li> <li>QUERY_STRING set to \"openagent\"</li> <li>REQUEST_CONTENT set to any additional content from the payload.</li> </ul>"},{"location":"topicguides/agents.html#post-runagentwithcontext","title":"POST: /run/agentWithContext","text":"<p>Caution</p> <p>Might not be supported on current version.</p> <p>This is used to run an agent in real time, passing the <code>unid</code> of a document to use as context and the <code>returnMode</code> to use to generate the response for the agent. If <code>returnMode</code> was not specified or does not exist, the default <code>{\"agentResponse\":\"done\"}</code> response is returned.</p> <p>Note</p> <p>The calling HTTP thread will be tied up until the agent finishes, so this should only be used for short-running agents.</p>"},{"location":"topicguides/agents.html#postrunagentasync","title":"POST:/run/agentAsync","text":"<p>Caution</p> <p>Might not be supported on current version.</p> <p>This is used to run an agent asynchronously via Domino REST API. A successful response contains a status of \"processing\" and a uuid for the request. The uuid can be used to check the status of the agent (GET /run/agentAsync/{uuid}) or cancel the agent (DELETE /run/agentAsync/{uuid}). The payload is of the format:</p> <pre><code>{\n  \"agentName\": \"processJson\",\n  \"runAsServer\": false,\n  \"callbackUrl\": \"https://www.acme.com/api/callback\",\n  \"method\": \"POST\",\n  \"payload\": {\n    \"FirstName\": \"Adrian\",\n    \"TestBoolean\": false,\n    \"TestVal\": \"20\"\n  }\n}\n</code></pre> <p>The properties are:</p> Property Description <code>agentName</code> Name of the agent in this Domino REST API Database to run <code>runAsServer</code> True if the agent should be run under the server's access. Note This cannot be used if the agent has the \"Run As Web User\" flag set. <code>callbackUrl</code> A URL for Domino REST API to send a response to once the agent has completed. <code>callbackUrlError</code> A URL for Domino REST API to send to if the agent fails. <code>method</code> HTTP Method to use for the callbackUrl and callbackUrlError. <code>payload</code> A JSON object to pass into then agent. This can contain any additional information the agent needs to use. <p>This process creates a document in KeepAgents.nsf to track processing of the agents. You can check that in the Notes Client, with the UUID, or query with an API.</p>"},{"location":"topicguides/agents.html#asynchronous-agent-scheduler","title":"Asynchronous Agent Scheduler","text":"<p>The asynchronous agent scheduler picks up and processes asynchronous agents. The threads property in the config.json defines how many agents can be run asynchronously, by default 10. Multiple agents within the same database and even multiple instances of the same agent can be run simultaneously. Any additional agents are queued up for processing once a thread becomes available.</p> <p>Domino REST API can still be stopped with agents running or queued. In this scenario, running agents will be cancelled and set to the status \"CANCELLED\". Because we can't know if it will cause problems to restart the agents, you will need to manually review and, if necessary, start the agent again or complete any remedial data fixup.</p> <p>Any queued agents will be picked up for processing when the server restarts.</p>"},{"location":"topicguides/architecture.html","title":"Architectural decisions","text":"<p>\"Architecture represents the significant design decisions that shape a system, where significant is measured by cost of change.\" -- Grady Booch</p> <p>Domino REST API objectives</p> <p>\"Make Domino development and access available to a broad audience with diverse development backgrounds. Keep the barrier to entry low without sacrificing enterprise and container deployability. Ensure access control through declaration on the server and its databases, relieving end-user applications from that task\"</p> <p>The following sections provide some insight into the architectural decisions that were made keeping in mind the objectives of Domino REST API. Listed here are the justifications, alternatives that were considered and the implications. The objective is to help you understand how Domino REST API was designed and implemented.</p>"},{"location":"topicguides/architecture.html#1-api-definition","title":"1. API definition","text":"<p>Domino REST API uses the OpenAPI v3 (a.k.a Swagger) specification to describe its APIs.</p>"},{"location":"topicguides/architecture.html#justification","title":"Justification","text":"<p>OpenAPI offers the following benefits:</p> <ul> <li> <p>OpenAPI provides definitions and descriptions that are both machine- and human-readable. It supports several GUI implementations (Swagger, Redoc, Apicurio) to make it accessible to different audiences.</p> </li> <li> <p>The OpenAPI specification combines endpoint definitions, data types, examples and textual explanations in a single document. So, a potential disconnect between documentation and implementation is less likely.</p> </li> <li> <p>Accessing data via REST is available to all programming languages without the need to generate custom libraries. There is rich tooling (code generation, if required) available. Security of https is well understood.</p> </li> <li> <p>OpenAPI is governed by the OpenAPI Initiative, an open source consortium under the auspices of the Linux foundation. No single company can steer it in a new direction.</p> </li> </ul>"},{"location":"topicguides/architecture.html#alternatives","title":"Alternatives","text":"<p>We considered but decided against the following APIs:</p> <ul> <li>SOAP (outdated)</li> <li>Protocol buffers (backend format, no support in browser despite being donated to Cloud Computing Foundation driven by single vendor, code generation limited to a few languages, poor documentation of proto files)</li> <li>Java RPC (single language only)</li> <li>Websockets (not suitable for backend, no documentation format)</li> <li>OData (decided to implement that as a database specific option)</li> </ul>"},{"location":"topicguides/architecture.html#implication","title":"Implication","text":"<p>OpenAPI allows for contract-first-design with well defined and documented APIs. We're not limited by CRUD operation considerations and OpenAPI offers higher function calls (like accepting meetings, sending emails and more). In one Domino REST API instance, we can load different API definitions, which can then be used for versioning and for add-on APIs like Admin or Quattro.</p> <p>We use the OpenAPI specified OperationId to identify what EventBus routes and processing classes to use. When Domino REST API starts, it checks for the availability of operation classes matching each OperationId. In info API, where the information about the configuration is available, Domino REST API specifies which classes have been identified and loaded and gives error messages on startup console for missing classes.</p>"},{"location":"topicguides/architecture.html#2-network-protocol","title":"2. Network protocol","text":"<p>Domino REST API uses HTTP(S) distributed over four ports:</p> <ul> <li>Domino REST API (the main access)</li> <li>Domino REST API Admin commands (usually limited to localhost)</li> <li>Prometheus metrics (usually only accessible by Prometheus)</li> <li>Domino REST API JWT service for responding to IdVault requests (typically on one Domino REST API node)</li> </ul> <p>However, we are not limited to HTTP. The EventBus model allows us to implement additional protocols. We have an experimental PubSub access using Redis to the EventArch. There's also an ability to use gRPC, once its format (Protocol Buffers or JSON) is clarified.</p>"},{"location":"topicguides/architecture.html#justification_1","title":"Justification","text":"<p>HTTP is a well understood and well supported protocol. Given the EventBus framework we use, support for Http/2 is already available. Using HTTP not only allows application servers (NodeJS, Websphere, SpringBoot etc) to access Domino REST API but also Web clients hosted on static URLs, opening access to front-end developers who want to use Domino as the backend.</p>"},{"location":"topicguides/architecture.html#alternatives_1","title":"Alternatives","text":"<p>We also looked at NRPC (Notes only, no SDK), gRPC (server to server only, no browser support), native sockets (not routable), custom (outright crazy!) and UDP (not supported in browsers).</p>"},{"location":"topicguides/architecture.html#implication_1","title":"Implication","text":"<p>HTTP is the most used and widely supported transport protocol. Considering that we also cater to MS-Excel (on Windows) and pure browser applications, it was the only logical choice.</p>"},{"location":"topicguides/architecture.html#3-programming-language","title":"3. Programming language","text":"<p>Domino REST API is written in Java 8.</p>"},{"location":"topicguides/architecture.html#justification_2","title":"Justification","text":"<p>Domino provides its own JVM (OpenJava 8), so Java was a good option. Furthermore, it allows flexible access to the C API without the limitations (see alternatives) of the C API. Domino REST API bypasses Domino's Java API and can run \"outside\" of Domino. This makes Domino REST API compatible with Java 11 (or later) and/or GraalVM going forward.</p>"},{"location":"topicguides/architecture.html#alternatives_2","title":"Alternatives","text":"<p>LotusScript is not flexible enough to process Open API, caching, etc. C/C++ offers extensibility but is not a common skill in customer environments. Although we loved RUST, that is also not a common skill set.</p>"},{"location":"topicguides/architecture.html#implication_2","title":"Implication","text":"<p>Domino REST API depends (for now) on the modified Java 8 runtime that Domino provides. This eliminates the need for an additional runtime install (e.g. NodeJS or dotNet). Using Java 8, the option stays open to upgrade to later JVM versions, as they become available for Domino or fast forward and use its own JVM (or GraalVM), which is more cloud native.</p>"},{"location":"topicguides/architecture.html#4-framework","title":"4. Framework","text":"<p>Domino REST API uses the Eclipse vert.x framework. Vert.x offers polyglot, event-driven and reactive development capabilities and an EventBus.</p>"},{"location":"topicguides/architecture.html#justification_3","title":"Justification","text":"<p>Running Domino REST API standalone outside the Domino HTTP stack allows for deployment into a Notes client, thus minimizing the barrier to entry for a developer who wants to test things out or develop offline. Vert.x is the foundation of (and is sponsored by) RedHat's Quarkus cloud native Java stack. It also offers excellent support for OpenAPI contracts. The EventBus allows separation of incoming protocols from the database operations, thus enabling the deployment of multi-protocol access.</p>"},{"location":"topicguides/architecture.html#alternatives_3","title":"Alternatives","text":"<p>OSGI plugins would limit us to Domino servers. Spring Boot involved a learning curve and bundled Tomcat. Plain servlets are not polyglot and are an outdated model.</p>"},{"location":"topicguides/architecture.html#implication_3","title":"Implication","text":"<p>We can deploy Domino REST API to Linux (server), Windows (client &amp; server), and Mac (client only) with minimal effort. The vert.x HTTP stack supports HTTP2 and SSL certificates in multiple formats. Using more than one port allows us to fine-tune access, so administrator operations (shutdown, restart) and metrics can be network isolated from regular operations. Vert.x also offers deployment into multiple threads (Workers) and can make use of available cores by deploying extra instances of its unit of work, the verticle.</p> <p>Caveat: Event driven or reactive programming is a new technology and might require some learning for most Java developers.</p>"},{"location":"topicguides/architecture.html#5-authentication","title":"5. Authentication","text":"<p>Access to the Domino REST APIs requires a valid JavaScript Web Token (JWT), signed by a trusted party. There is an API Endpoint available that allows, if activated (default = yes), exchange of Domino credentials for a JWT token. Tokens generated by RedHat Keycloak and custom generated tokens have also been successfully tested.</p>"},{"location":"topicguides/architecture.html#justification_4","title":"Justification","text":"<p>Domino REST API is API only, so any dance that requires user interaction must happen before Domino REST APIs are accessed. The ability to use Domino credentials, including local users (note: local users work in Notes client only) to obtain a JWT token lowers the barrier to entry. JWT is an established industry standard (RFC7519) and also is the end result of an OpenID Connect (OIDC) dance. So its use and risks are well understood and documented.</p>"},{"location":"topicguides/architecture.html#alternatives_4","title":"Alternatives","text":"<p>We also looked at OIDC, SAML, and Kerberos. They all require user interaction to authorize access. Since Domino REST API is API only and has no user interface, the application must authorize access.</p>"},{"location":"topicguides/architecture.html#implication_4","title":"Implication","text":"<p>Developers can get started with Domino REST API without deploying an IdP (Identity Provider) infrastructure. By using an established standard, customers can integrate their own identity solution without the need to deploy a Domino-only Identity and Access Manager.</p>"},{"location":"topicguides/architecture.html#6-eventbus","title":"6. EventBus","text":"<p>Domino REST API uses the vert.x internal EventBus to separate database operations from network I/O.</p>"},{"location":"topicguides/architecture.html#justification_5","title":"Justification","text":"<p>The EventBus caters to multiple network protocols (PubSub, WebSockets, HTTP, gRPC) without duplicating database operations. Furthermore, Verticles (units of work in vert.x) can run in their own threads, allowing full utilization of available cores. We wrapped the EventBus into a reactive observer pattern, so the regular maintainer doesn't need to deal with EventBus specifics.</p>"},{"location":"topicguides/architecture.html#alternatives_5","title":"Alternatives","text":"<p>Manual thread programming required too much effort and Google Guava EventBus was not flexible enough.</p>"},{"location":"topicguides/architecture.html#implication_5","title":"Implication","text":"<p>Since all data flows from a point of entry over the EventBus to a database request handler, identity checking (validating the JWT token) needs to happen on both ends- point of entry and database level. This is important since requests on the EventBus can come from a custom module and there is no way to determine if security checks have been performed. By segregating runtime flow into different verticles/threads, the EventBus allows us to run certain operations with server privileges without compromising the regular database operations bound by user and ACL settings.</p>"},{"location":"topicguides/architecture.html#7-cicd","title":"7. CI/CD","text":"<p>Domino REST API uses Apache Maven as its build system. The Maven plugin Google JIB generates container images for use in Docker, Kubernetes or OpenShift</p>"},{"location":"topicguides/architecture.html#justification_6","title":"Justification","text":"<p>Maven allows us to build Domino REST API, its satellite projects, Docker containers, and documentation from a single source. It runs tests (unit &amp; integration) and generates code coverage and code quality reports, as well as technical documentation (like this page that you are currently reading). Thus, information stays in the repository, where it is more likely to stay current.</p>"},{"location":"topicguides/architecture.html#alternatives_6","title":"Alternatives","text":"<p>Shell scripts are too messy, Apache Ant involves too much dependency management, Gradle site plugin is too weak, and Jenkins scripts don't allow local builds.</p>"},{"location":"topicguides/architecture.html#implication_6","title":"Implication","text":"<p>Focusing on Maven-based builds allows us to run builds both locally and on our CI environment Jenkins. So a developer can ensure all is well before a pull request kicks off a build.</p> <p>To familiarize yourself with Domino REST API's functionality, you should read the following pages:</p> <ul> <li> <p>Domino REST API Overview</p> </li> <li> <p>OpenAPI specification</p> </li> <li> <p>The EventBus</p> </li> <li> <p>The Barbican</p> </li> <li> <p>OData</p> </li> </ul>"},{"location":"topicguides/barbican.html","title":"The Barbican","text":"<p>A barbican (from Old French: barbacane) is a fortified outpost or gateway, such as an outer defense of a city or castle, or any tower situated over a gate or bridge which was used for defensive purposes.</p> <p>The Barbican in Domino REST API decides what a given user can read from or write to a document. The following constraints apply:</p> <ul> <li>Documents can only be read when they have a <code>Form</code> item that is configured in <code>keepconfig</code> to allow access.</li> <li>Only the fields that are configured can be created, read, or updated.</li> <li>Exception: If NO fields are configured in <code>keepconfig</code>, no fields on the form can be accessed. As a best practice, define fields to constitute the schema for the document at this mode. A warning is logged to the console, if fields are not set. On write access, this ensures unexpected fields are not submitted.</li> <li>An item in a document can be accessed only if there is a matching field on the form or a field configured in <code>keepconfig</code>.</li> </ul> <p></p> <p>The Barbican functions as the schema definition for the Domino REST API.</p>"},{"location":"topicguides/barbican.html#reading-documents","title":"Reading documents","text":""},{"location":"topicguides/barbican.html#updating-documents","title":"Updating documents","text":""},{"location":"topicguides/barbican.html#creating-documents","title":"Creating documents","text":""},{"location":"topicguides/barbican.html#form-modes","title":"Form Modes","text":"<p>Form Modes are used to manage access to documents. Domino REST API only allows access to documents that have a <code>Form</code> item. The content of the Form item determines the form definition used to decide access.</p> <p>When a form is not configured, documents with that form item are not accessible via Domino REST API. A form configuration has one or more Form Modes to determine access.</p> <p></p> <p>Each mode, specified in JSON as a series of flags and formulas, that determine access. Currently we make use of the <code>@Formula</code> language, but we might extend the options in future.</p> <p>Using a configuration, rather than code in an individual application shifts preserving integrity to the Domino server, an important step to roll out Single Page WebApps or mobile apps without the need for extended application server infrastructure</p> <p></p> Item Sample Value Explanation modeName default The first mode always is called <code>default</code>. It is used when creating new documents with that form computeWithForm false Should form formulas be executed when loading / saving a document. Mainly used for existing form logic strictInput true data types specified in the form must match submitted data types (no check on load) allowAnyField false Bypass field list (formulas still apply - WIP) onLoad Formula to execute before a Note gets converted to JSON onSave @SetField(\\\"Status\\\";\\\"Submitted\\\") formula that gets executed after JSON has been converted to a Note, before save runs readAccessFields [ \"Approver\", \"Subject\", \"Requestor\", \"DueDate\", \"Status\", \"Body\" ] Array of field names that are readable if present in the document readAccessFormula @IsMember(\\\"[RaiseRequest]\\\"; @UserNamesList) Formula to determine if this read mode is available for the current document and user writeAccessFields [ \"Approver\", \"Subject\", \"Requestor\", \"DueDate\", \"Status\", \"Body\" ] Array of field names that can be updated Note: they are case sensitive, JSON wants it like that writeAccessFormula Status==\"\" Formula to determine if this write mode is available for the current document and user deleteAccessFormula @False Formula to determine if the current document could be deleted by the user with delete access validationRules Array of formula/message pairs Validation on a database level"},{"location":"topicguides/barbican.html#validation-rules","title":"Validation Rules","text":"<p>Validation rule allow to ensure business rules to be enforce regardless of client (other application, web app, mobile app, curl). Domino REST API used the <code>@Formula</code> language for them</p> Field Example Purpose formula @IsMember(status;\\\"Submitted\\\":\\\"Approved\\\":\\\"Rejected\\\") <code>@Formula</code> with a true/false result DueDate &lt; @Today message Status must be either 'Submitted','Approved' or 'Rejected' Static message to be returned You can't backdate requests"},{"location":"topicguides/barbican.html#example","title":"Example","text":"<p>Let's take a simple example of the approval workflow, where the requestor submits an expense report for approval to understand this better.</p> <p>The requestor has read and write access to the subject, body, and amount fields of the expense report. The requestor fills in the details and the request then goes to the approver. The approver has different access rights to the different fields of the same form. The approver only has read access to the subject, body, and amount fields but read and write access for updating the approval status. Now, add an auditor in the same scenario. The auditor has only read access to subject, body, amount, and approval status field. The auditor, however, has read and write access to fill in the audit status, which is non-editable for either the requestor or the approver.</p> <p>This assigning of access to documents to different users, based on their roles, can easily be done using Form Modes. Managing the Form Modes can be done via the Project Domino REST API Admin GUI.</p>"},{"location":"topicguides/barbican.html#further-readings","title":"Further readings","text":"<p>Check the pages about the Admin UI and go through the Tutorials.</p>"},{"location":"topicguides/configuringPorts.html","title":"Ports","text":"<p>Domino REST API uses four ports which have different purposes and warrant different access/security settings. By dividing Domino REST API access across more than one port, an administrator can take advantage of access security provided by the operating system and/or firewall.</p> <p>The ports are specified in <code>config.json</code> but can be overwritten using environment variables. See the page on configuration parameters for details.</p>"},{"location":"topicguides/configuringPorts.html#data-port-8880","title":"Data PORT (8880)","text":"<p>This is the main port used by Domino REST API to interact with API users. This port should be exposed to all users and be secured by https, either on Domino REST API or using a proxy. All access to data requires authentication.</p>"},{"location":"topicguides/configuringPorts.html#healthcheck-port-8886","title":"Healthcheck Port (8886)","text":"<p>Healthcheck is to check whether Domino REST API is up. It's a standard approach for Docker and Kubernetes environments, so any automated tooling that manages your containers can periodically check and automatically take action if the tool (in this case Domino REST API) is no longer working. It has a single endpoint, \"/health\" which responds with information about whether all parts of Domino REST API are responding - the eventbus, main Domino REST API server, Domino REST API management server, Domino REST API metrics server and access to a Domino database. It has separate security, it's own username and password. This follows the same approach as the management server, but it's a completely separate user. None of the users that have access to the rest of Domino REST API will have access to the healthcheck port, and the healthcheck user will not have access to other areas of Domino REST API.</p>"},{"location":"topicguides/configuringPorts.html#management-port-8889","title":"Management Port (8889)","text":"<p>The management port allows access to Domino REST API runtime behavior, such as the current configuration via <code>/config</code>, runtime info via <code>/info</code>, or Domino REST API shutdown/restart. It must not be exposed to normal users, only exposed to the administrator network.</p> <p>A typical configuration is to block access to Port 8889 from anything but <code>localhost</code>. An administrator who wants to interact with the management port would use an <code>ssh</code> session to access the server and use <code>curl</code> to access the management endpoints.</p>"},{"location":"topicguides/configuringPorts.html#port-for-prometheus-metrics-8890","title":"Port for Prometheus metrics (8890)","text":"<p>Domino REST API provides metrics in Prometheus format on Port 8890. When you don't collect metrics, block access to this port. When you do collect them, open access to this port to the collecting server or servers only.</p>"},{"location":"topicguides/configuringPorts.html#additional-information","title":"Additional information","text":"<p>To learn more on how to secure the ports to encrypt the communication between any client and the Domino REST API server in a production environment, see Secure ports.</p>"},{"location":"topicguides/dominojnx.html","title":"DominoJNX","text":"<p>DominoJNX (JNX stands for JavaNeXt) is a new take on the Domino Java API. It implements modern Java concepts like Streams, Optionals, and functional programming. It removes the need to call <code>recycle()</code> from the API and deals well with JSON.</p>"},{"location":"topicguides/eventbus.html","title":"EventBus","text":"<p>The Vert.x EventBus is the nervous system of Domino REST API. Vert.x relies on an internal EventBus that can operate in a request/reply or a broadcast mode. For simulating a flowable (from reactive principles), we follow a pattern:</p> <ul> <li>When the HttpListener receives a request from the HttpClient, it forwards it to the WebHandler based on the OperationId.</li> <li>The WebHandler generates a temporary address to listen for results and forwards the request to the EventBus.</li> <li>The EventBus relays the request to the WorkerVerticle.</li> <li>The WorkerVerticle sends an acknowledgment to the EventBus and requests the DbHandler to perform an action.</li> <li>The DbHandler sends data to the temporary address in batches, until all the data is sent to the HttpListener.</li> <li>The HttpClient starts interacting with data as soon as it receives it. The data is received in batches.</li> <li>The header determines if it is Data, Error, or completion. (See below.)</li> <li>Once all the data is sent, the DbHandler sends 'end of data' notification back to the EventBus.</li> </ul>"},{"location":"topicguides/eventbus.html#flowchart","title":"Flowchart","text":"<pre><code>title EventBus use in KEEP\n\nparticipant HttpClient\nparticipant HttpListener\nparticipant WebHandler\nparticipant EventBus\nparticipant WorkerVerticles\nparticipant DbHandler\nopt Startup\n   HttpListener-&gt;WebHandler: load known handlers\n   WorkerVerticles-&gt;DbHandler: load known handlers\n   WorkerVerticles-&gt;EventBus: Subscribe to events\\nbased on tags\nend\n\nHttpClient-&gt;HttpListener: GET/POST/PUT\\nPATCH/DELETE\nHttpListener-&gt;HttpListener: Validate against OpenAPI\nHttpListener-&gt;WebHandler: forward request\\nbased on operationId\nnote right of WebHandler: Transforms request\\ngenerate Temp address\nWebHandler-&gt;EventBus: subscribe to TEMP address\nWebHandler-&gt;EventBus: forward request\nEventBus-&gt;WorkerVerticles: forward request\nWorkerVerticles-&gt;EventBus: acknowledge request\nEventBus-&gt;WebHandler: acknowledge request\nWebHandler-&gt;HttpListener: Set response headers\nWorkerVerticles-&gt;DbHandler: request data\nloop Response data\n    DbHandler-&gt;WorkerVerticles: provide data\n    WorkerVerticles-&gt;EventBus: publish data\\nto TEMP address\n    EventBus-&gt;WebHandler: forward data\n    WebHandler-&gt;HttpListener: forward data\n    HttpListener-&gt;HttpClient: chunked response\nend\nDbHandler-&gt;WorkerVerticles:End of data\nWorkerVerticles-&gt;EventBus: publish end\\nto TEMP address\nEventBus-&gt;WebHandler: notify end\nWebHandler-&gt;EventBus: unsubscribe TEMP address\nWebHandler-&gt;HttpListener: notify end\nHttpListener-&gt;HttpClient: response end\n</code></pre>"},{"location":"topicguides/eventbus.html#anatomy-of-the-eventbus-message","title":"Anatomy of the EventBus message","text":"<p>EventBus uses header values to transport the meta data. The body (usually JSON) has a \"payload\" property with the requested data.</p> <p></p>"},{"location":"topicguides/eventbus.html#initial-request-header","title":"Initial request header","text":"<p>Below are the values in the initial request sent over the EventBus using <code>EventBus.request()</code></p> <ul> <li>db: The Domino REST API alias name of the requested database (<code>MAIL</code> for Quattro)</li> <li>jwtclaim: The JWT string the user authenticated with</li> <li>appId: (Optional) Id of the calling server app</li> <li>appSecret: (Optional) secret of the calling server app</li> <li>operationId: The operationId as defined in OpenApiSpec</li> <li>replyAddress: Address the handler will listen for replies</li> </ul>"},{"location":"topicguides/eventbus.html#initial-reply","title":"Initial reply","text":"<ul> <li>status: Could be \"failure\" or \"success\"</li> <li>cause: String with explanation of potential failure</li> <li>statuscode: Suggested HTTP Response code</li> <li>ErrorClass: Type of error based on <code>com.hcl.domino.keep.exceptions</code></li> </ul> <p>See also the <code>DeliveryOpts</code> class</p>"},{"location":"topicguides/eventbus.html#data-replies","title":"Data replies","text":"<p>Data reply is similar to the initial reply but with more options in <code>status</code>:</p> <ul> <li><code>data</code>: Actual data in body</li> <li><code>complete</code>: No more data to expect, no data in body</li> <li><code>failure</code> : as above, stating what went wrong</li> </ul>"},{"location":"topicguides/eventbus.html#reactive-wrapper","title":"Reactive wrapper","text":"<p>To simplify the creation of handler and requesters, helper classes are built. They encapsulate the process back and forth on the EventBus following the Reactive pattern. This allows for flexible pre/post processing of data sent over the EventBus.</p>"},{"location":"topicguides/eventbus.html#todo-more-on-the-wrapper","title":"TODO: more on the wrapper","text":"<p>The wrapper classes can be found in the package <code>com.hcl.domino.keep.eventbus</code></p>"},{"location":"topicguides/formmodes.html","title":"Form modes","text":"<p>Form Modes are enhanced security measures provided by The Barbican. They allow you to specify which document items are available for read-and-write operations based on a formula result. For example, <code>@IsMember(Approvers; @UserName)</code> makes the mode available when the current user is listed in the <code>Approvers</code> item.</p>"},{"location":"topicguides/formmodes.html#how-to-guides","title":"How-to guides","text":"<ul> <li>Add a mode</li> <li>Clone a mode</li> <li>Compare modes</li> </ul>"},{"location":"topicguides/formmodes.html#references","title":"References","text":"<ul> <li>Form Modes</li> <li>Reserved Form mode names</li> <li>Forms &amp; Mode</li> </ul>"},{"location":"topicguides/formmodes.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"topicguides/howkeepworks.html","title":"How HCL Domino REST API works","text":"<p>Let's take a look at the internal structure of Domino REST API to understand how it works. Domino REST API has a layered architecture with an HTTP listener at the top that receives the requests and hands them over to the handler. The handler then sends the requests to EventBus, which distributes them between different worker verticles. Then come the dbrequests classes that process the requests.</p> <p></p> <ul> <li>Requests arrive at the HTTP listener.</li> <li>Based on OpenAPI specification, the listener loads routes and the required classes are derived from the OperationId of the OpenAPI specification.</li> <li>Most requests and responses are JSON data and the HTTP listener identifies it based on OpenAPI specification.</li> <li>Requests that provide and expect JSON are handled by the default code i.e. the defaultJsonHandler class. When the content-type is different, an HTTP side handler is provided. This handler is named after the operationID from the OpenAPI specification. The runtime indicates which handler classes are missing.</li> <li>These classes then send the message to EventBus.</li> <li>The EventBus then distributes the work to worker verticles, the DominoDefaultVerticle class.</li> <li>The basic configuration of the Domino REST API system has worker verticles for code, data, design and personal information management (PIM). Since Domino REST API is extensible, you can add worker verticles, if needed.</li> <li>The DominoDefault Verticle class knows which handler class to load.</li> <li>The appropriate dbrequests handler class then takes over and processes the request, for example, talks to the Notes database, retrieves or updates information, and so forth.</li> </ul> <p>Here is how Domino REST API handles different errors. </p>"},{"location":"topicguides/httpHandler.html","title":"HTTP handler","text":"<p>The HTTP handler accepts incoming requests defined in the OpenAPI specification and sends them, if they are in compliance with the specification, to the EventBus.</p> <p></p> <p>All incoming request parts get mapped:</p> <ul> <li>Headers</li> <li>Cookies</li> <li>Path parameters</li> <li>Query parameters</li> <li>Body</li> </ul>"},{"location":"topicguides/introducingrestapi.html","title":"Introducing the Domino REST API","text":""},{"location":"topicguides/introducingrestapi.html#what-can-the-domino-rest-api-do-for-you","title":"What can the Domino REST API do for you?","text":"<p>The HCL Domino REST API provides a secure REST API with access to HCL Domino servers and databases.</p> <p>Domino REST API runs on Domino and/or your Notes Client on Windows/Linux/Mac. Someone with previous working experience of Notes and Domino can quickly get started with Domino REST API.</p> <p>Domino REST API is based on industry standards, allows Notes and Domino to be accessed from other platforms, follows standard APIs, is extendable and uses the Notes and Domino security model. Domino REST API also puts the power in the hands of the developer to work using their preferred programming language.</p> <p>You can click the topics in the image for more information.</p> <p>Domino REST API is designed to re-establish Domino as a world class, modern, standards-compliant, cloud native and enterprise-level collaboration platform. It adds contemporary REST APIs to Notes and Domino, enabling a modern programming experience with the tools of your choice.</p> <p>Classic Domino applications are document-oriented and often based on an approval model: documents flow through a business lifecycle and are approved at each stage. Domino developers develop a separate user interface for each approval state that is used by the people who perform the actions for that state.</p> <p>Where is the actual API documentation?</p> <p>We use an OpenAPI based API specification. Its documentation can be seen after starting Domino REST API and opening its URL (depending on your Domino server URL). This way you can be sure to always look at the specification running on your server, current and accurate.</p> <p>Domino REST API moves access control out of the code and into the configuration. But it means control stays with those who need to support the data, not those who consume the data. Domino REST API grants granular access for actions like read or write depending on what the document data is and who is viewing it. This approach ensures that the correct person can perform the correct action on the document and its data. Most importantly, it means control over data quality remains with those who need to support the data, not those who provide and consume the data.</p> <p></p> <p>For example, in the case of an expense report filed by an employee, the approver and the employee can only edit the fields that correspond to their role. An approver might be able to approve and add a remark only and an employee might be able to provide a subject, description, and cost only.</p> <p>This granular access managed through configurations is what makes Domino REST API unique.</p> <p>Also, in Domino REST API, we built modern REST APIs that are designed to bring Notes and Domino forward in the current market. Domino REST API adds OpenAPI specified REST APIs to Domino and allows the latter to talk to any server or client over http, https, or http/2. Using Domino REST API, any application that talks https can access the data from a Domino database, hence extending the availability of this data beyond the Notes client.</p> <p></p> <p>For example, the data in a Domino database that could earlier be viewed only in a Notes client, can now be viewed on mobile applications as well using the Domino REST API. Refer to the use cases for more examples.</p> <p>The Domino REST API are secure and standards-compliant, making them the right choice for your Notes and Domino ecosystem.</p> <p>Info</p> <p>Much like the architectural keep that fortifies the castle, Project Domino REST API adds to the existing functionalities provided by Notes and Domino.</p> <p>Domino REST API can run on your developer desktop, where you can evaluate it from your Notes client. Domino REST API is available on Windows (client &amp; server), Linux (server), Docker (server) and macOS (client) as add-on for Notes and Domino 12.0.2 and later.</p> <p>Domino REST API caters to Domino mail as well as Domino applications, irrespective of the difference in the way they work. While Domino mail allows one-to-one mapping between users and mail files (with only occasional exceptions), Domino applications allow multiple users to access the same application. Domino REST API looks beyond this difference and serves both Domino mail as well as Domino applications.</p> <p></p>"},{"location":"topicguides/introducingrestapi.html#what-applications-does-domino-rest-api-support","title":"What applications does Domino REST API support?","text":"<p>Domino REST API is designed to work with:</p> <ul> <li> <p>Desktop applications with direct access to the Domino server, written in any language, for example Java, C#, Rust, Electron, Jupyter, Python etc.</p> </li> <li> <p>Browser-based applications hosted on Domino REST API or elsewhere, written in HTML and JavaScript, for example ReactJS, VueJS, Svelte, Angular, VanillaJS etc.</p> </li> <li> <p>Application-server-based applications, for example NodeJS, HCL DX, Spring, SpringBoot, Vaadin, Vert.x, Quarkus, PHP, Wordpress.</p> </li> <li> <p>Command Line Interfaces (CLI), starting with but not limited to curl.</p> </li> <li> <p>OData aware applications (e.g. SAP, Salesforce, Microsoft Excel, Tableau etc).</p> </li> <li> <p>LowCode environments like HCL Volt MX, NodeRED or others.</p> </li> </ul>"},{"location":"topicguides/introducingrestapi.html#domino-rest-api-is-secure","title":"Domino REST API is secure","text":"<p>Domino REST API is secure by default since it inherits all the security features of Notes and Domino. All access to the database is authenticated using JSON Web Token (JWT) and Scopes. Identity can be provided using Domino credentials and/or your Enterprise IdP (Identity Provider) like Keycloak or Active Directory. The databases or forms and views that can be accessed are explicitly listed. Security extends to a field level read/write control by the Barbican.</p>"},{"location":"topicguides/introducingrestapi.html#modern-java-api-java-8","title":"Modern Java API (Java 8++)","text":"<p>Project Domino REST API uses redesigned Java APIs named Domino JNX (Domino Java Next), which follow industry standards and best practices.</p>"},{"location":"topicguides/introducingrestapi.html#public-api-based-on-openapi-30","title":"Public API based on OpenAPI 3.0","text":"<p>We follow the API first design with full interactive documentation. Our public APIs follow the standards set by OpenAPI 3.0. The OpenAPI specifications you see in Swagger/Redoc on the server are used dynamically by Domino REST API to validate requests, so you know they are up-to-date.</p>"},{"location":"topicguides/introducingrestapi.html#extensible-architecture","title":"Extensible architecture","text":"<p>Domino REST API has an extensible architecture that allows it to serve multiple API versions from a Domino server. We currently support admin, core, CI/CD and PIM APIs but Domino REST API can be extended to add more APIs.</p>"},{"location":"topicguides/introducingrestapi.html#web-gui-for-schema-scope-and-app-management","title":"Web GUI for Schema, Scope and App management","text":"<p>We provide a Web UI that facilitates managing schemas, scopes, and applications.</p>"},{"location":"topicguides/introducingrestapi.html#design-admin-and-data","title":"Design, admin and data","text":"<p>Along with the application design and admin features, Domino REST API allows CRUD operations on documents, retrieval of collections (aka views and folders), execution of queries and submission of access control,and design and code, while maintaining and extending Domino\u2019s security model.</p>"},{"location":"topicguides/keepFlows.html","title":"Domino REST API flows","text":""},{"location":"topicguides/keepFlows.html#selected-flows-in-the-domino-rest-api-architecture","title":"Selected Flows in the Domino REST API Architecture","text":"<p>To fully understand Domino REST API, it is helpful to know the main flows, Domino REST API has three of them:</p> <ul> <li>Domino REST API Boot</li> <li>Loading of OpenAPI defined routes</li> <li>serving requests on the loaded routes</li> </ul>"},{"location":"topicguides/keepFlows.html#domino-rest-api-boot","title":"Domino REST API Boot","text":""},{"location":"topicguides/keepFlows.html#loading-of-openapi-defined-routes","title":"Loading of OpenAPI defined routes","text":""},{"location":"topicguides/keepFlows.html#serving-requests-on-the-loaded-routes","title":"Serving requests on the loaded routes","text":""},{"location":"topicguides/keepFlows.html#accepting-requests-on-http","title":"Accepting requests on HTTP","text":"<p>Request get put on the EventBus after successful acceptance.</p> <p></p>"},{"location":"topicguides/keepFlows.html#processing-requests-from-eventbus","title":"Processing requests from EventBus","text":"<p>Actual database communication happens here:</p> <p></p> <p></p>"},{"location":"topicguides/keepasproxy.html","title":"Domino REST API and Proxy","text":"<p>We use separate ports so you can individually use a proxy and/or a firewall to open up access to sensitive information or not. You can have a proxy on the same machine, you can have a proxy on a different machine, or you can use your firewall as a proxy.</p> <p>The use of nginx as a proxy is provided as an example, but Domino REST API works with any type of proxy or ingress controller.</p>"},{"location":"topicguides/keepdifference.html","title":"Domino REST API is different","text":"<p>The audience for this chapter are mostly experienced Notes and Domino developers. It explains the differences and constraints compared to regular Notes development. However the curious mind, coming from other development disciplines will find interesting insights what makes Notes a highly flexible and unique platform.</p>"},{"location":"topicguides/keepdifference.html#recap-on-notes-uniqueness","title":"Recap on Notes' uniqueness","text":"<p>A Notes document contains items. Those items can have different data types, including some unique to Notes like Reader or Author (for declarative security) or Rich Text (a catch it all). The correct name is <code>item</code> not <code>field</code> - later more on this. An item can have a single value or multiple values. There is a loose connection to a Notes form, created by the value of an item with the name <code>form</code>. The connection is loose, since the value of that item can be overwritten or the item being absent.</p> <p>The loose connection between document and form establishes an even looser connection between <code>items</code> in the document and <code>fields</code> in the form. When a document only is created or updated through the Notes, Domino, or XPages that don't have trigger code (onButton, on Save etc), the link is strong and field data type matches item data type.</p> <p>Since items can be created, updated, and deleted through code (C, LotusScript, Java, @Formula, JavaScript, XPages, REST, DIOOP, gRPC), a document can have more, less, differently types items than fields on the document. This bond gets further loosened through the ability of computing names of subforms (shared sets of fields) at runtime based on conditions of the document or the cycle of the moon. There is no guarantee, just a possibility, that 2 documents with the same form item, have the same set of items.</p> <p>Notes forms and views don't have unique names, there can be 10 folders with the name \"Test\" and a form and a subform. Often this views or forms are used to separate Notes client from WebUI behavior. Forms and views can have one or more aliases and can be hidden (only accessible programmatically). View are like folders with a fixed query attached. A column in a view can carry more than one data type and more than one document type. Views/Folders can be sorted by columns when specified in the design and can be organized into hierarchies.</p> <p>There is plenty of documentation on details, look it up if so desired.</p>"},{"location":"topicguides/keepdifference.html#constraints","title":"Constraints","text":"<p>We don't try to boil the ocean, but follow Antoine de Saint-Exup\u00e9ry who proclaimed:</p> <p>\"Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.\"</p> <ul> <li>Domino REST API uses Forms as data schema. So access to a document is determined by the value of the form item.</li> <li>The Domino REST API configuration determines what items can be read/written per form and mode.</li> <li>The Admin UI provides access to the field names of the form, but the API lets you specify any field name.</li> <li>If an item doesn't exist in a document, it doesn't get returned.</li> <li>When you have multiple forms with the same name, the AdminUI will pick one, we don't guarantee which one.</li> <li>Same applies for views: we pick the first we find. Unique aliases or names help to avoid ambiguity.</li> <li>When an item name is not specified in the configuration, you can't read or write it.</li> <li>We translate Rich Text to HTML/MIME. This is one way. We don't translate MIME back to Rich Text.</li> </ul>"},{"location":"topicguides/notesprimer.html","title":"The shiny web world - a primer","text":"<p>This is work in progress</p> <p>We are constantly working on improving Domino REST API's functionality and documentation. You have a documentation page which is not quite ready. Feel free to feedback what you would like to see here.</p>"},{"location":"topicguides/notesprimer.html#ports","title":"Ports","text":"<p>Communication between clients and servers require an address and a port (akin to building name and unit number). There is an official list to look at. In Notes/Domino land we usually deal with client access (1352), SMTP (25), http (80) and https(443).</p> <p>Rule/Fact</p> <p>Only one service can listen on a specific port at a given address. So when you have two web servers, only one can use the default ports.</p> <p>The official port to protocol mapping serves as a simple shortcut when specifying destination locations:</p> <ul> <li><code>http://someserver.com/</code> is short for <code>http//someserver.com:80/</code></li> <li><code>https://someserver.com/</code> is short for <code>https//someserver.com:443/</code></li> </ul> <p>The Domino REST API adds additional ports to be used. When a non-standard port is used, it can be any protocol, so <code>https://someserver.com:8880</code> is equally valid as <code>http://someserver.com:8880</code>. Valid doesn't mean working. Which protocol responds depends on the server configuration.</p> <p>Practical pranks you can play: reconfigure an http server, such as Domino's http task, to use port 443 for http and port 80 for https and watch the confusion. Don't do that to a production system.</p>"},{"location":"topicguides/notesprimer.html#json","title":"JSON","text":"<p>JSON is part of the operating system and programming language independent, human readable data (interchange) formats that include CSV, XML, JSON, and YAML.</p> <p>key value pairs</p> <p>JSON is a set of case-sentitive key-value pairs</p> <p>The keys are strings and the values can be only a few data types: string, number, boolean, null, or JSON. Notably absent are integers and date/time formats or binary data.</p> <p>These shortcomings are mitigated in JSON Schema that defines the missing data types. For example, a date is defined as String in ISO 8601 Date format.</p> <p>JSON is both used for data exchange, popular in REST APIs, and configuration settings (replacing ini and properties files).</p> <p>The Domino REST API makes heavy use of the JSON based OpenAPI specification</p>"},{"location":"topicguides/notesprimer.html#json-web-token-jwt","title":"JSON Web Token (JWT)","text":"<p>A JWT is a string with a fixed structure. It's composed of 3 strings in Base64 encoding joined by a <code>.</code> (dot). When decoded, the first part is JSON describing the signature algorithm and token type. The second part is also JSON, providing the actual information, while the third part is a digital signature.</p> <p>NO encryption</p> <p>JWT are not encrypted, so they are not suitable to carry confidential information.</p> <ul> <li>The signature \"only\" guarantees that the token hasn't been altered since signing.</li> <li> <p>For verification, you need access to the public key of the signer. For more information, see OAuth.</p> </li> <li> <p>The actual information could be anything JSON, but has defined elements like issue date and expiry when used as access token.</p> </li> </ul> <p>There is more to learn about JWT, including an easy tool to check.</p> <p>JWT is often used, including in the Domino REST API, as Access Tokens to gain authorized access to a server. To serve as an access token, it gets presented with the Authorization http(s) header as <code>Bearer [JWT Token]</code>.</p> <p>A reasonable good analogy: </p> <p>The JWT token is your concert ticket. At the entrance of the concert hall, security checks if the ticket is valid. They don't care how you did get it: ordered online, queued at the ticket booth, got it from an authorized reseller or won it from the local radio morning show. They only care if it's genuine.</p> <p>The same principle applies to JWT as access token. As long as the token is signed by a trusted issuer, commonly referred to as an Identity Provider or IdP, and is still valid, security lets you through. Of course, a valid \"Adele\" ticket won't get you into the \"Taylor Swift\" concert, so the content of the ticket matters.</p>"},{"location":"topicguides/notesprimer.html#oauth","title":"OAuth","text":"<p>From the official documentation</p> <p>OAuth 2.0 is the industry-standard protocol for authorization. OAuth 2.0 focuses on client developer simplicity while providing specific authorization flows for web applications, desktop applications, mobile phones, and living room devices. This specification and its extensions are being developed within the IETF OAuth Working Group.</p> <p>In OAuth, two parties are usually involved. One is an Identity Provider (IdP), the place you log in and consent, and the other is a Service Provider (SP), the application that does the actual work.</p> <p>In an OAuth sequence, (colloquially referred to as OAuth dance) to obtain permission to act on a user's behalf (called an OAuth grant), the users get directed to the IdP, where, after authentication, they're asked for consent that the application (the SP) acts on their behalf (the exact flow depends on the grant type).</p> <p>The result of the dance is at least an access token and quite commonly a refresh token. The application uses the access token for interaction with the API. Ideally, access tokens are short lived, minutes rather than hours. On expiration, the application would use the refresh token to obtain a new access token without the need of user interaction. Refresh tokens can be issued with long validity, ranging from days, weeks, or months. If a refresh token is suspected to be compromised, it can be invalidated, so obtaining a new access token would fail and trigger the consent dialogue.</p> <p>Lots to learn</p> <p>Make sure to learn more about this complex topic!</p> <p>OAuth is an open and complex standard. To use its Authorization capabilities for Authentication, the OpenID Foundation implemented a specific subset named OpenID Connect. That's used here.</p>"},{"location":"topicguides/notesprimer.html#certificates","title":"Certificates","text":"<p>Certificates (nothing new to Notes people, we had them in the <code>notes.id</code> for decades) in the internet world come in three flavors:</p> <ul> <li> <p>Issued by a recognized certificate authority CA like LetsEncypt</p> </li> <li> <p>Issued by a private or unrecognized CA</p> </li> <li> <p>Self signed</p> </li> </ul> <p>Don't self sign</p> <p>Sounds like easy for test system, not worth the headache, go for your own private CA</p> <p>The important term here is recognized. All browsers ship with a list of recognized CA, by having a copy of their Public keys. One can amend this list by adding or removing public keys, something one better leaves to automated tooling.</p> <p>When dealing with other clients, for example your venerable Tomcat, the known CA list in the browser doesn't help. You need to add the cert where the application can find it. For example for Java, that's the Java keystore (remember keytool).</p> <p>If you use self-signed (please don't), you have to add each and every cert to all the clients, using a private CA, only the CA's public keys.</p> <p>There is much to learn, worth your time.</p>"},{"location":"topicguides/notesprimer.html#tls-ssl-http2","title":"TLS, SSL &amp; HTTP/2","text":"<p>Any application available on the intranet or internet needs secure communication. The standard means for that is TLS - Transport-Layer-Security. Colloquially, the term SSL is used with cert vendors, but implementation is almost always TLS - and should be. SSL is considered compromisable.</p> <p>Obtaining a valid certificate used to be a huge headache, but with the availability of LetsEncrypt it's now easy for internet facing systems. Domino has built-in support to use LetsEncrypt.</p> <p>Use a wildcard cert for internal systems</p> <p>Obtain a wildcard cert (*.yourdomain.net) using an internet facing system and use it for the internsl systems too. Does require proper local DNS setup</p> <p>The current prevalent version of HTTP is HTTP1.1, a standard introduced last century (1995). Modern browsers (read: no IE) and contemporary web servers support HTTP/2. HTTP/2 requires a TLS connection, so you can't try it out using <code>http://localhost</code>. The Domino REST API uses HTTP/2 if a client supports it. All browsers do, but at the time of writing, Postman didn't.</p> <p>HTTP/2 offers better security and shorter response times.</p>"},{"location":"topicguides/notesprimer.html#openapi","title":"OpenAPI","text":"<p>The OpenAPI specification describes in a standardized way what to expect from an API. The specification, expressed in JSON or YAML, is both machine readable and human readable (using a UI). It defines:</p> <ul> <li>The available endpoint URLs and supported methods</li> <li>Authentication required if any</li> <li>mandatory and optional parameters</li> <li>data formats to expect or provide</li> <li>external meta data</li> </ul> <p>There is a rich eco system of tooling that allows to produce or consume OpenAPI specifications, here's just a small selection:</p> <ul> <li> <p>UI to read and try the specs: Swagger UI and ReDoc</p> </li> <li> <p>UI to create and edit: Apicurio Studio and Swagger Editor</p> </li> <li> <p>Tools to generate code from a spec</p> </li> <li> <p>Libraries that consume a spec, create routes and enforce the defined constrains. For example Java, NodeJS, Python. There are many more.</p> </li> </ul>"},{"location":"topicguides/planning.html","title":"Planning your application","text":"<p>Domino REST API allows a very flexible approach to utilize Domino as your NoSQL data store. This flexibility requires that you plan well and consider a number of questions, based on Domino REST API's properties.</p>"},{"location":"topicguides/planning.html#application-type","title":"Application type","text":"<p>Determine what type of application you want to build.</p> <p>If the planned application is mobile, desktop (including Excel), or just uses a command line with curl, it would use direct access.</p> <p></p> <p>If the planned application is a web application, build using ReactJS, Angular, etc, you can host the static application files in <code>keepweb.d</code> directory or your Domino server of choice.</p> <p></p> <p></p> <p>Finally, if the planned application is application-server-based, like NodeJS, Ruby, SpringBoot, PHP RUST or Go, it can sit between Domino REST API and the application. This type of application doesn't support open access and requires additional credentials.</p> <p></p>"},{"location":"topicguides/planning.html#authentication","title":"Authentication","text":"<p>Domino REST API provides an endpoint to exchange a Domino user name and password for a JWT Access Token. This is a great way to get started.</p> <p>For more robust and flexible authentication, the use of an external identity provider (IdP) that generates the JWT access token as result of an OAuth flow is recommended.</p> <p></p>"},{"location":"topicguides/planning.html#detailed-access-management","title":"Detailed access management","text":"<p>The Domino REST API configuration allows you to fine tune access permissions. Domino REST API allows you to:</p> <ul> <li>Execute DQL queries. Further access can be fine tuned using an <code>@Formula</code>.</li> <li>Post code snippets (JS or Groovy) for execution.</li> <li>Decrypt encrypted items, if the user has a suitable key.</li> <li>Specify which views to expose on the API.</li> <li> <p>Specify which agents to expose on the API.</p> </li> <li> <p>Specify which forms to expose on the API. Here, the Barbican's capabilities is used to tailor field access based on document data and current user, allowing for API-based data integrity.</p> </li> </ul> <p></p>"},{"location":"topicguides/schemabackup.html","title":"Schema backup","text":"<p>Domino REST API supports schema backup. The following diagram explains the process flow for different scenarios.</p> <p></p>"},{"location":"topicguides/schemabackup.html#create-or-edit-schema","title":"Create or edit schema","text":"<ul> <li>Domino REST API saves the schema in the application database and submits the schema to the schema service for backup when a developer creates or edits a schema.</li> <li>The Schema Service computes the checksum per database or template and then saves the schema to the SchemaStore based on the new checksum.</li> </ul>"},{"location":"topicguides/schemabackup.html#on-schedule","title":"On schedule","text":"<ul> <li>Domino REST API reads the schema from the application database on a set schedule and then submits the schema to the Schema Service for a check.</li> <li>The Schema Service computes the checksum and then saves the schema to the SchemaStore based on the new checksum.</li> </ul>"},{"location":"topicguides/schemabackup.html#import-schema","title":"Import schema","text":"<ul> <li>Domino REST API reads the schemas from the SchemaStore based on the received list of schemas, and then presents the list of schemas to the developer.</li> <li>Domino REST API then saves the presented schemas in the application database.</li> </ul>"},{"location":"topicguides/schemascope.html","title":"Schema &amp; Scope","text":"<p>To effectively operate Domino REST API, one needs to be familiar with a few terms, their application, and the range of responsibility.</p>"},{"location":"topicguides/schemascope.html#schema","title":"Schema","text":"<p>A Schema is a design element located inside an NSF. It determines what data is accessible in the REST API, for read and write operations. For Views, Folders, and Agents, the schema narrows down from the existing Domino design elements.</p>"},{"location":"topicguides/schemascope.html#form-item-not-form-design-element","title":"Form item, not Form design element","text":"<p>In case of a Form in a schema, this is different. A Form definition means: applicable for documents with a form item with the defined value. The REST API works even when there are no Form design elements in the NSF, which would be hard to use in a Notes client or nhttp.</p> <p>In other words:</p> <ul> <li>What a form design element is to a document in a client, is the form schema in the REST API.</li> <li>The form schema can do more, see Form modes and The Barbican.</li> <li>The schema is the responsibility of the Domino developer.</li> </ul>"},{"location":"topicguides/schemascope.html#scope","title":"Scope","text":"<p>The scope is the name of a database advertised to REST API consumers. Once published, it's hard to change since all API consumers would need to update too. This is why there is a scope instead of using the NSF file path or replica ID.</p> <p>The scope is mapped to an NSF, which is currently <code>KeepConfig.nsf</code>, through an entry in the REST directory. The scope is the responsibility of the Domino administrator.</p>"},{"location":"topicguides/schemascope.html#tutorials","title":"Tutorials","text":"<ul> <li>Using Admin UI</li> <li>Lab 03 - Schema exploration</li> <li>Lab 04 - Additional scope &amp; schema</li> <li>Using Postman and curl to create a scope</li> <li>Using Postman and curl to create a schema</li> <li>Steps in creating a schema and scope in Quick Config</li> </ul>"},{"location":"topicguides/schemascope.html#how-to-guides","title":"How-to guides","text":"<ul> <li>Use external names in schema definitions</li> <li>The Domino REST API Schema</li> <li>Enabling a database via Schema and Scope</li> </ul>"},{"location":"topicguides/schemascope.html#references","title":"References","text":"<ul> <li>Schema Management</li> <li>Scopes</li> <li>Scope Management</li> <li>Databases, schemas and scopes</li> <li>Form and Alias handling</li> </ul>"},{"location":"topicguides/schemascope.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"topicguides/understanding.html","title":"Understanding HCL Domino REST API","text":"<p>HCL Domino REST API is the middleware connecting Notes &amp; Domino to a contemporary REST like API consuming and producing mostly JSON data. Each element has its own set of properties, you might call them quirks, that required considerations and decisions. After all, designing functionality is balancing tradeoffs between competing approaches.</p> <p></p>"},{"location":"topicguides/understanding.html#a-note-can-contain-anything-an-api-shouldnt","title":"A Note can contain ANYTHING, an API shouldn't","text":"<p>A document note (a.k.a. a document) in a Notes database can contain any number of items (colloquially referred to as fields - which is actually inaccurate) that are fully self contained, describing their datatype, cardinality (single value, multi-value) and content. There is no fixed relationship to any form containing defining fields.</p> <p>By convention, documents contain an item with the name <code>Form</code> pointing to what the document tentatively might contain. Tentative! The document might not contain items for each field in the referred form, might contain items created by actions, agents, or external code without a matching field in the form or items which don't match the data type of the field definition.</p> <p>Furthermore, a document might be viewed with different forms and/or change the value of its form item during its lifetime.</p> <p>These free for all capabilities aren't suitable to be exposed in an API. An API that states \"You will get something JSON, but we can't tell what\" is of limited use. Therefore, we considered how to define the shape of data to expose. Our initial approach was to just use the form design at runtime, but found this too limiting. Now the Scope and Schema management UI (a.k.a. AdminUI) uses form design as input for a schema definition that's close to JSON Schema. Our resulting decisions/constrains are:</p> <ul> <li>We use the value of the <code>form</code> item to link a document to 1:n schemas.</li> <li>Documents without a <code>form</code> item aren't available in the API, but can contribute to views/forms.</li> <li>If a form item value has no matching schema definition, it's not available in the UI.</li> <li>There are 1:n schemas for any enabled form. In Domino REST API, they're referred to as <code>mode</code> or <code>formMode</code>.</li> <li>You can create a schema for an non-existing form using the API. This is valid since we use the value of a document's form item rather than the form itself.</li> <li>Which mode is available to a given user is determined by an <code>@Formula</code> that can include item values, UserName, Groups and roles for its computation. This allows to map permissions and workflows on an API level.</li> <li>Reading and writing coerces note item values into the ones defined in the schema. Multi-value fields are delivered as array, while single values as scalar, regardless of item content.</li> </ul>"},{"location":"topicguides/understanding.html#security-is-declared-not-computed","title":"Security is declared, not computed","text":"<p>Notes' security uses ACL entries and special item types <code>Reader</code>, <code>Name</code> and <code>Author</code> to define access permissions. Since this is near and dear to all applications, the API needs to support this:</p> <ul> <li>The schema's format containing values like <code>date-time</code> or <code>int64</code> got extended to include <code>readers</code>, <code>names</code>, <code>authors</code> and <code>richtext</code>. This allows for appropriate data mappings.</li> <li>JSON's boolean data type is mapped to 0 and 1.</li> </ul>"},{"location":"topicguides/understanding.html#who-are-you-it-depends","title":"Who are you? It depends","text":"<p>Domino provides its own source of identity, the Domino directory. However this isn't the only option in use in customer environments. Furthermore, applications need to access data on your behalf. To accommodate this Domino REST API uses JWT tokens, defined scopes and an OAuth 2.0 compliant authorization service:</p> <ul> <li>Authorization is provided using a JWT token defining permitted scope and user identity.</li> <li>Direct login is provided for users, it can be deactivated.</li> <li>Third-party JWT can be configured to be trusted, so your corporate IdP can be used to issue valid JWT.</li> <li>The API allows to configure OAuth applications providing <code>client_id</code> and <code>client_secret</code> to empower user authorizing API access to a defined scope.</li> <li>The management (8889), metrics (8890), and healthcheck (8886) endpoints use identities that are stored in <code>identities : { ... }</code> in Domino REST API's configuration. Out of the box, none are configured.</li> </ul>"},{"location":"topicguides/understanding.html#databases-schemas-and-scopes","title":"Databases, schemas and scopes","text":"<ul> <li>A database contains 1:n schema files in its design file resources.</li> <li>Each schema contains 0:n form definitions. 0 if you only want to read view/folder data.</li> <li> <p>Each form definition contains 1:n modes. The first mode is called <code>default</code>, which is used on document creation.</p> </li> <li> <p>When using OData access, a mode <code>odata</code> is required.</p> </li> <li> <p>The field definitions are based on JSON schema.</p> </li> <li>Each schema in an NSF database can be mapped to one or more scopes in the directory.</li> <li>The scope is the name used in <code>?dataSource=</code> as public access name. You shouldn't change scope names after they get used. However, you can change which schema they map to any time.</li> <li>Each scope can be mapped to one schema at a time.</li> <li>Each OAuth app can store multiple scopes it wants to access. Created by admin, not by the calling application.</li> <li>In the OAuth cycle, if an application requests an undefined scope or an unknown callback, the request gets denied.</li> </ul>"},{"location":"topicguides/understanding.html#rich-text","title":"Rich Text","text":"<p>Before diving into details, a quick trip down the IT history lane. Rich Text (RTF) was specified by Microsoft in 1987. Notes/Domino uses a similar specification. It's essentially a container format designed to host plain text, formatted text, images, attachments, embedded objects and layout information. It's white space sensitive, a fancy term for: being able to \"format\" something by hitting the space key repeatedly.</p> <p>The container formats today that resemble these capabilities are ECMA-376 (ISO/IEC-29500) (a.k.a Office Open XML), ISO/IEC 26300:2006 (a.k.a Open Document Format), which are both XML based and MIME (RFC 1341) which is widely used in eMail. The XML formats, mainly used in word processors aren't native to the web, while MIME doesn't prescribe (it's multipurpose after all) its content parts and isn't native to web browsers.</p> <p>Based on this mismatch of source and target environment we designed your option dealing with Rich Text in Domino REST API.</p>"},{"location":"topicguides/understanding.html#roles","title":"Roles","text":"<ul> <li>Domino developer: creates the schema that defines what data can be accessed in an NSF database.</li> <li>Domino administrator: creates and activates the scope that defines how the data can be accessed. Also creates (optional) OAuth compatible applications with <code>client_id</code> and <code>client_secret</code> properties.</li> <li>Volt MX administrator: configures Volt MX's foundry middleware to interact with Domino REST API using the foundry Domino REST API adapter.</li> <li>Application developer: develops applications leveraging Domino REST API Endpoints, Volt MX services and front-end tools like Volt MX Iris, VS Code or any tools and framework of choice.</li> </ul> <p>Read more about them in Domino REST API Roles.</p>"},{"location":"topicguides/understanding.html#on-the-todo-list","title":"On the todo list","text":"<p>We're not done yet:</p> <ul> <li>Schema doctor comparing schema to form to flag inconsistencies</li> <li>Form / document scan: check if documents contain edge cases</li> <li>More options of the JSON schema</li> </ul>"},{"location":"topicguides/usecases.html","title":"Use cases","text":"<p>Domino REST API makes the data in Notes databases available in a way that it can be used by any application, server, or middleware that speaks HTTP(S). Let's take a look at a few examples.</p>"},{"location":"topicguides/usecases.html#web-applications","title":"Web applications","text":"<p>An engineering company stores the security data sheets of their products in a Notes database. These sheets contain information about the hazards of the products and the necessary safety precautions to take. Using Domino REST API, all the information can be available on a web application, allowing someone who doesn't have access to a Notes client to view the security data sheets on the web.</p> <p>A third-party is building a vacancies website for a Domino customer. The website needs access to job details from your Domino database and will post applications for the jobs to the Domino application. However, the Domino application holds more information than the third-party needs to interact with and the application goes on a workflow subsequently. So, applications must only be submitted at the right status and data must be validated, else the Notes Client part will break. Using Domino REST API, the Domino customer can manage all this without needing skills in Java or JavaScript.</p>"},{"location":"topicguides/usecases.html#mobile-applications","title":"Mobile applications","text":"<p>A software consultancy firm uses a Notes application for travel approval. The workflow requires the consultants to raise travel requests in the system, which are then approved by the managers. Without Domino REST API, the approving manager needs a computer with a Notes client installed on it to take action on the request. Domino REST API allows you to build mobile applications that allow the managers to process the requests on their mobile devices. The Domino REST API's grant access to managers to approve, reject, or comment on requests.</p>"},{"location":"topicguides/usecases.html#integration-with-other-apps","title":"Integration with other apps","text":"<p>An organization maintains their presentation decks in a Notes application. The customer sales representatives use these presentations when meeting with customers. Without Domino REST API, the representatives switch between the Notes application and Salesforce when preparing for the presentation. With the Domino REST API, data from the Notes application can be integrated into Salesforce. Then, sales representatives have a single view of sales-related data in Salesforce and presentation decks in Domino, saving them time and making them more productive.</p>"},{"location":"topicguides/usecases.html#integration-with-third-party-companies","title":"Integration with third-party companies","text":"<p>An organization processes applicants for various third-party companies. They may have different levels of experience and provide data with varying levels of data quality. With Domino REST API, the organization can allow REST API access for the third-party companies, confident that data verification or data fixup won't delay processing of the applicants.</p>"},{"location":"topicguides/auxiliary/index.html","title":"Auxiliary services","text":"<p>While the main purpose of a REST API is serving data, mostly JSON, over https, any complete system comes with a range of auxiliary services. The HCL Domino REST API is no exception. Check the details. </p>"},{"location":"topicguides/auxiliary/index.html#identity-provider-idp","title":"Identity Provider (IdP)","text":"<p>Domino REST API has a dual-use function. It can be your OICD compliant Identity Provider and it can be configured to accept users authenticated with an external IdP like Keycloak, Okta, or Microsoft Entra ID formerly Azure Active Directory.</p>"},{"location":"topicguides/auxiliary/index.html#webdav","title":"webDAV","text":"<p>Domiro REST API implements the webDAV HTTP extensions to facilitate the Office Round Trip Experience.</p>"},{"location":"topicguides/auxiliary/index.html#odata","title":"OData","text":"<p>OData or Open Data Protocol  allows compliant software, for example Excel on Windows, Salesforce, Power BI, to read and potentially write REST data.</p>"},{"location":"topicguides/auxiliary/index.html#ical","title":"iCal","text":"<p>iCal allows to read and write calendar information and is part of the fixed PIM Schema.</p>"},{"location":"topicguides/auxiliary/index.html#health-metrics","title":"Health &amp; metrics","text":"<p>Cloud and Kubernetes compatible health monitoring and system metrics in Prometheus format.</p>"},{"location":"topicguides/auxiliary/index.html#management-console","title":"Management console","text":"<p>System functions using a protected port and a functional account.</p>"},{"location":"topicguides/auxiliary/index.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"topicguides/auxiliary/healthmetrics.html","title":"Health &amp; metrics","text":"<p>Cloud and Kubernetes compatible health monitoring and system metrics in Prometheus format.</p>"},{"location":"topicguides/auxiliary/healthmetrics.html#how-it-works","title":"How it works","text":""},{"location":"topicguides/auxiliary/healthmetrics.html#health","title":"Health","text":"<p>The operation of Domino REST API is checked via the Healthcheck port 8886. This enables any automated tooling that manages your containers to periodically check and automatically act if Domino REST API is no longer working. It's a standard approach for Docker and Kubernetes environments.</p>"},{"location":"topicguides/auxiliary/healthmetrics.html#metrics","title":"Metrics","text":"<p>Metrics are exposed on their own dedicated port, METRICSPORT in the config. The default, if not set, is port 8890. Domino REST API supports metrics produced by MicroMeter in a Prometheus compatible format, pollable from the metrics port.</p>"},{"location":"topicguides/auxiliary/healthmetrics.html#tutorials","title":"Tutorials","text":"<ul> <li>Set up a functional account to access health and metrics ports</li> </ul>"},{"location":"topicguides/auxiliary/healthmetrics.html#how-to-guide","title":"How-to guide","text":"<ul> <li>Configure ports in production</li> </ul>"},{"location":"topicguides/auxiliary/healthmetrics.html#references","title":"References","text":"<ul> <li>Metrics</li> <li>Healthcheck Port (8886)</li> <li>Port for Prometheus metrics (8890)</li> </ul>"},{"location":"topicguides/auxiliary/healthmetrics.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"topicguides/auxiliary/ical.html","title":"iCal","text":"<p>iCal allows to read and write calendar information and is part of the fixed PIM Schema.</p>"},{"location":"topicguides/auxiliary/ical.html#the-ical-standard","title":"The iCal standard","text":"<p>The iCalendar Standard is an open standard for exchanging calendar and scheduling information between users and computers. The standard allows products from many vendors to transfer calendar information between each other.</p>"},{"location":"topicguides/auxiliary/ical.html#references","title":"References","text":"<ul> <li>iCalendar.org</li> <li>RFC 5545 - Internet Calendaring and Scheduling Core Object Specification</li> <li>RFC 7986 - New Properties for iCalendar</li> </ul>"},{"location":"topicguides/auxiliary/ical.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"topicguides/auxiliary/idp.html","title":"Identity Provider (IdP)","text":"<p>Domino REST API has a dual-use function. It can be your OICD compliant Identity Provider and it can be configured to accept users authenticated with an external IdP like Keycloak, Okta, or Microsoft Entra ID formerly Azure Active Directory.</p> <p>In theory, any OICD compliant Identity Provider should be usable with Domino REST API. If you tried one, let us know the results.</p>"},{"location":"topicguides/auxiliary/idp.html#how-to-guides","title":"How-to guides","text":"<p>See the Identity Provider topic page for a list of how-to guides for configuring IdPs. </p>"},{"location":"topicguides/auxiliary/idp.html#references","title":"References","text":"<ul> <li>Custom Identity Provider (IdP)</li> </ul>"},{"location":"topicguides/auxiliary/idp.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"topicguides/auxiliary/management.html","title":"Management console","text":"<p>System information and interactions conducted through a functional account.</p>"},{"location":"topicguides/auxiliary/management.html#tutorials","title":"Tutorials","text":"<ul> <li>Create user and password to initially access the Management console.</li> <li>Set up a functional account</li> </ul>"},{"location":"topicguides/auxiliary/management.html#how-to-guides","title":"How-to guides","text":"<p>Check the Management console how-to guides for completing goals and tasks about Domino REST API requiring access to the Management console.</p>"},{"location":"topicguides/auxiliary/management.html#references","title":"References","text":"<ul> <li>Using the Management Console for encryption operations</li> <li>Using Domino Console</li> <li>Management Port (8889)</li> </ul>"},{"location":"topicguides/auxiliary/management.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"topicguides/auxiliary/odata.html","title":"OData","text":"<p>OData or Open Data Protocol  allows compliant software, for example Excel on Windows, Salesforce, Power BI, to read and potentially write REST data.</p> <p>OData doesn't use JSON Schema but its own definition format, which is a mix on JSON, XML, and dot-notation. We tested with Salesforce and MS-Excel and we'd love to hear what you are using.</p>"},{"location":"topicguides/auxiliary/odata.html#tutorials","title":"Tutorials","text":"<ul> <li>OData tutorials</li> </ul>"},{"location":"topicguides/auxiliary/odata.html#references","title":"References","text":"<ul> <li>Reserved Form mode names</li> </ul>"},{"location":"topicguides/auxiliary/odata.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"topicguides/auxiliary/webdav.html","title":"webDAV","text":"<p>Domiro REST API implements the webDAV HTTP extensions to facilitate the Office Round Trip Experience.</p>"},{"location":"topicguides/auxiliary/webdav.html#how-it-works","title":"How it works","text":"<p>WebDAV enables user agents to collaboratively create and edit content directly on an HTTP web server. It offers tools for concurrency control and namespace operations, transforming web content into a writable and collaborative medium rather than just a read-only one. The WebDAV protocol provides a framework that allows users to create, modify, and move documents on a server.</p>"},{"location":"topicguides/auxiliary/webdav.html#references","title":"References","text":"<ul> <li>WebDAV</li> <li>WebDaV Resources</li> <li>OpenAPI definitions and specifications</li> <li>RFC 4918 - HTTP Extensions for Web Distributed Authoring and Versioning (WebDAV)</li> </ul>"},{"location":"topicguides/auxiliary/webdav.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"topicguides/extensibility/index.html","title":"Extensibility","text":"<p>The Domino REST API has been designed from ground up to be extensible. While effort has been spend to ease extensibility, some fundamental understanding of the architecture, the tooling and the extension points is required. This page will serve as the introduction.</p>"},{"location":"topicguides/extensibility/index.html#components-involved","title":"Components involved","text":"<p>DRAPI is written in Java running on the JVM that is part of your Domino installation: Java8 for Domino 12, Java17 for Domino 14 and Java 21 for Domino 14.5.</p> <p>It connects to Domino's core C libraries using DominoJNX and a server task <code>restapi</code> written in RUST.</p> <p>Network connectivity, application logic, access control and eventing are provided by the Eclipse vert.x framework (which also underpins Quarkus). Important concepts to understand are Verticles, The Event Bus and asynchronous programming with Futures.</p> <p>Domino's C API is strictly synchronous</p> <p>We solved the transition between the event loop based high performance asynchronous model of vert.x to and from synchronous calls into the Domino API for you</p> <p>The code style used leans heavily on modern Java, using functional interfaces, Optional and the Stream API</p> <p>Testing is done using JUnit5, Mockito, the vert.x test extensions and Rest-assured</p> <p>Last, not least, all interface definitions are maintained as OpenAPI 3.0.x specification in JSON format.</p> <p></p>"},{"location":"topicguides/extensibility/index.html#skills-and-tools-you-need","title":"Skills and tools you need","text":"<ul> <li>Java skills, good ones</li> <li>Understanding of OpenAPI (I like APIGit as tool)</li> <li>Familiarity with Domino</li> <li>An IDE. Our team works with VSCode, IntelliJ or Eclipse</li> <li>Optional, but strongly recommended: Container (a.k.a Docker) skills</li> </ul>"},{"location":"topicguides/extensibility/index.html#planning-your-extension","title":"Planning your extension","text":"<p>There are three starting poin to write an extension (with increasing complexity):</p> <ul> <li>Create a custom RichText processor (everyone has their own view on RichText, so we built an extension point)</li> <li>create your own API endpoints. E.g. you want an endpoint for approvals <code>/api/v1-workflow/approve</code>.</li> <li>create a custom Verticle that could do anything, e.g. periodically call a web service.</li> </ul>"},{"location":"topicguides/extensibility/index.html#richtext-processors","title":"RichText processors","text":"<p>TCreating your own RichText processor is covered in this reference entry. In a nutshell: you create a <code>jar</code> file to be placed into DRAPI's <code>libs/</code> directory implementing the interfaces <code>IncomingRichtextProcessor</code> and <code>OutgoingRichtextProcessor</code> and declaring them in <code>resources/META-INF/services</code></p>"},{"location":"topicguides/extensibility/index.html#api-endpoints","title":"API Endpoints","text":"<p>Creating your own API Endpoints requires more planning and a few more steps:</p> <ol> <li>Create your OpenAPI 3.0.x specification in JSON format. Be careful, the latest version of the OpenAPI specification is 3.1.x, which is due to Java8 limitations currently not supported in DRAPI 1.1.x. You need to save the specification in JSON format, we don't support YAML. Details about file location and naming can be found in the tutorial</li> <li>Create a Java Maven project following the standard Maven layout. You will use the parent module provided by JNX. Details can be found in the tutorial</li> <li>Create <code>src/main/resources/config/config.json</code>. In that file you point to your OpenAPI file, specify how endpoints get processed. While you can overwrite the configuration later in <code>keepconfig.d</code>, you want sensible defaults in that <code>config.json</code>. Make sure you understand how configuration works. Details can be found in the tutorial</li> <li>Implement the class(es) that execute your business logic. As long as your API only sends JSON in and out, you will need to implement just one class that extends the abstract class <code>AsyncDominoJNXJson</code> and in that class a single method <code>process</code> which gives you access to a session, the database and the incoming request. You can use <code>@Annotations</code> to define access requirements. Details can be found in the tutorial</li> <li>Deployment is as simple as putting your jar into the <code>libs/</code> directory. For containerized deployments you can use a custom Domino container leveraging jib. Details can be found in the tutorial</li> </ol>"},{"location":"topicguides/extensibility/index.html#custom-verticles","title":"Custom Verticles","text":"<p>The vert.x runtime allows to deploy your own verticles as unit of compute. You can implement functionality that is even unrelated to core REST capabilities. A few examples:</p> <ul> <li>Custom caches</li> <li>Scheduled processing like Agtmgr</li> <li>Calling web services (REST / SOAP)</li> <li>Websocket based functions</li> </ul>"},{"location":"topicguides/extensibility/index.html#tutorial","title":"Tutorial","text":"<p>The tutorial walks you through the example of a foundational approval service that can work on multiple, data compatible, databases.</p>"},{"location":"topicguides/extensibility/index.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"tutorial/index.html","title":"Tutorials","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p> <p>The tutorials intends to familiarize Domino REST API administrators and Notes or Web developers with the Domino REST API.</p> <p>Important</p> <p>Before starting the tutorial, make sure that Domino REST API is installed and running. For more information, see Installation and configuration.</p> <p>In this tutorial, we will use the database <code>Demo.nsf</code>. You can download it from Downloadable resources.</p>"},{"location":"tutorial/index.html#whats-next","title":"What's Next","text":"<p>This tutorial includes multiple sections. You will see how to add a database to the Domino REST API configuration so that its content can be accessed by the Domino REST API. You will also perform basic actions like viewing the list of databases, checking the views and forms, creating a document, deleting a document and more. Each of these actions can be performed using the AdminUI or Postman/curl.</p> <p>Tip</p> <p>If you have working experience in HCL Notes and HCL Domino and wants to quickly get started with Domino REST API, you can directly go to Quickstart.</p>"},{"location":"tutorial/index.html#more-tutorials","title":"More tutorials","text":"<p>Additional tutorials are available here. For more information, see the descriptions below: </p>"},{"location":"tutorial/index.html#notes-and-domino-developers","title":"Notes and Domino Developers","text":"<p>Follow the Domino ToDo Database tutorial for Notes and Domino developers. It walks you through:</p> <ul> <li>Using the XPages ToDo Application.</li> <li>Viewing the ACL via Domino REST API Postman APIs.</li> <li>Configuring it for validated Domino REST API access.</li> <li>Using OData to access data in Microsoft Excel. All steps are done via the Domino REST API Admin GUI.</li> </ul>"},{"location":"tutorial/index.html#web-developers","title":"Web Developers","text":"<p>If you are new to Domino, see the New Domino Database tutorial for web developers. It walks you through:</p> <ul> <li>Creating a new Domino database.</li> <li>Adding forms for customers and contacts.</li> <li>Adding views.</li> <li>Configuring the database for validated REST API access.</li> <li>Updating the access for the database. Some steps are done via the Domino REST API Admin GUI, some via Postman.</li> </ul>"},{"location":"tutorial/index.html#odata","title":"OData","text":"<p>The tutorial demonstrates how to export data from Notes databases to OData using Domino REST API.</p>"},{"location":"tutorial/adminui.html","title":"Using Admin UI","text":"<p>This tutorial shows how to use the Admin UI to configure and use a database for Domino REST API. Download the database <code>Demo.nsf</code> from Resources and follow along. Anything you can do with the Admin UI you can also do using Postman, curl, Swagger UI, or similar tools. See how to do each of the tasks in this tutorial using Postman and Curl and using Swagger UI.</p> <p>Note</p> <p>The screenshots may vary. The screenshots are based on latest Domino REST API snapshots. Make sure you're up-to-date.</p>"},{"location":"tutorial/adminui.html#prepare-database-access","title":"Prepare database access","text":"<p>Download <code>Demo.nsf</code> from Resources and save it in the Notes data directory.</p>"},{"location":"tutorial/adminui.html#login","title":"Login","text":"<p>Go to the Domino REST API Admin UI.</p> <p>For example <code>http://restapi.myhost.com:8880/admin/ui</code>, replacing the host with your Domino REST API's host.</p> <p>On the login page, enter the administrator username and password, and then click LOG IN WITH PASSWORD.</p> <p></p> <p>See other log in options to learn more.</p>"},{"location":"tutorial/adminui.html#landing","title":"Landing","text":"<p>A successful login would lead to this landing page:</p> <p></p> <p>Tip</p> <p>Starting with the Domino REST API v1.1.2 release, you can click Overview on the landing page, indicated by the red arrow in the image, to open the Domino REST API functional diagram. Clicking parts of the functional diagram directs you to corresponding topics in the documentation.</p>"},{"location":"tutorial/adminui.html#list-available-schemas","title":"List available schemas","text":"<p>Click Database Management - Rest API in the landing page. This opens the Schema Management page.</p> <p></p>"},{"location":"tutorial/adminui.html#add-a-schema","title":"Add a schema","text":"<ol> <li> <p>In the Schema Management page, click Add Schema.</p> <p></p> </li> <li> <p>In the Add New Schema dialog, click Create Schema.</p> <p></p> </li> <li> <p>In the Create Schema dialog:</p> <ol> <li>Select <code>Demo.nsf</code> from the Database drop-down list.</li> <li>Select an Icon.</li> <li>Enter a Schema Name and a Schema Description.</li> <li>Click Save Schema.</li> </ol> </li> </ol> <p>This creates a schema that defines what views, folders, document, and agents you can access through the Domino REST API.</p> <p>Note</p> <p>If the Only show schemas configured with scopes toggle is turned on, you can't see the created schema because it doesn't have a scope yet.</p>"},{"location":"tutorial/adminui.html#create-a-scope","title":"Create a scope","text":"<ol> <li> <p>Go back to the landing page by clicking Overview.</p> <p></p> </li> <li> <p>Click Database Management - Activation. This opens the Scope Management page.</p> <p></p> </li> <li> <p>Click Add Scope. This opens a pane as shown below:</p> <p></p> </li> <li> <p>Under Available Schema, click <code>Demo.nsf</code>. This shows a list of schemas that uses <code>Demo.nsf</code> as a database.</p> </li> <li>Select the schema you created earlier.</li> <li> <p>Under Add New Scope, fill in the form and click Add.</p> <p>For the Server field, enter the name of the server the scope is available on, or leave it blank for the current server. The value of the entered name must be either the server's hierarchical name or in canonical format. See the following examples for reference:</p> <ul> <li>MyServer/MyOrg</li> <li>CN=MyServer/O=MyOrg</li> </ul> <p>Note</p> <p>Accessing a scope on a different server will always return an HTTP 302 response. The server to be redirected to will be dictated by the <code>Fully qualified Internet hostname</code> from the server connection document of the server that owns the scope.</p> <p>For the Maximum Access Level, the default is Editor. You can set it to another value to set the scope's maximum access anyone using the scope has.</p> </li> </ol> <p></p> <p>Note</p> <p>The Maximum Access Level prevents an app that has inherited a user's access rights when the user grants the app access from unauthorized altering of schemas or access control lists.\u00a0 To know more about what each access level allows and to whom the access level is assigned, see Access levels in the ACL.</p> <p>You can use the scope to access a schema via the Domino REST API. One NSF can be made available under more than one scope, such as with different security settings.</p>"},{"location":"tutorial/adminui.html#manage-created-schema","title":"Manage created schema","text":"<p>Go back to the Schema Management page, and click the schema you created earlier. This takes you to the page shown below:</p> <p></p> <p>This page allows you to set various configurations to your schema.</p>"},{"location":"tutorial/adminui.html#manage-database-forms","title":"Manage database forms","text":"<ol> <li>Click Database Forms from the menu bar. This lists all the forms available for the schema.</li> <li> <p>Select the form that you want to activate, click the corresponding menu icon beside the form's status, and then select Activate.</p> <p></p> </li> </ol> <p>Tip</p> <p>Clicking the menu icon and selecting Deactivate corresponding to a form deactivates the form. In the Reset Form dialog, click Yes to confirm.</p> <p>To make changes to the configured form:</p> <ol> <li>On the Database Forms tab, click the pencil icon corresponding to the configured form that you want to edit to load the form Access Mode page showing the <code>default</code> access mode.</li> <li> <p>Under Show fields from, hover over a field item and click the + icon to add the field in the form. Repeat this for all the fields you want to add.</p> <p></p> </li> <li> <p>Set the Read or Write access formula for each of the fields in the form.</p> </li> <li>Click Save.</li> </ol> <p>To learn more, see Schema Management.</p>"},{"location":"tutorial/adminui.html#manage-database-views","title":"Manage database views","text":"<ol> <li>Click Database Views from the menu bar. This lists all the views for the selected database.</li> <li> <p>Select the view that you want to activate, and then click the corresponding Active option under Status.</p> <p></p> </li> </ol> <p>Tip</p> <p>Clicking the Inactive option corresponding to a view deactivates the view. On the Reset Views Columns dialog, click Yes to confirm deactivation of the view.</p>"},{"location":"tutorial/adminui.html#manage-database-agents","title":"Manage database agents","text":"<ol> <li> <p>Click Database Agents from the menu bar. This lists all the agents for the selected database.</p> <p></p> </li> <li> <p>Select the agent you want to activate, and then click the corresponding Active option under Status.</p> </li> </ol> <p>Tip</p> <p>Clicking the Inactive option corresponding to an agent deactivates the agent.</p>"},{"location":"tutorial/adminui.html#logout","title":"Logout","text":"<p>To log out, click the profile icon and then select Sign Out.</p> <p></p>"},{"location":"tutorial/adminui.html#additional-information","title":"Additional information","text":"<p>Refer to the Swagger UI tutorial for a UI-driven tutorial for creating a document and more.</p>"},{"location":"tutorial/postmancurl.html","title":"Using Postman and curl","text":"<p>This tutorial shows how to use Domino REST API using Postman and curl. Download the database <code>Demo.nsf</code> from Resources and follow along. We also have a Postman collection and environment under Resources to download and use for getting up to speed fast.</p> <p>Note</p> <p>You must install Postman and curl on your workstation. For more information, see Postman and curl. </p>"},{"location":"tutorial/postmancurl.html#prepare-database-access","title":"Prepare database access","text":"<p>Download <code>Demo.nsf</code> from Resources and save it in the Notes data directory.</p>"},{"location":"tutorial/postmancurl.html#login","title":"Login","text":""},{"location":"tutorial/postmancurl.html#postman","title":"Postman","text":"<ol> <li>Start Postman and import the Postman collection and environment you downloaded.</li> <li>Open the Domino REST API Environment by clicking Environments and selecting <code>Domino REST API</code>.</li> <li>Find and set the <code>AdminName</code> and <code>AdminPassword</code> initial value variables in your Postman environment with your username and password values.</li> <li>You may need to also update the <code>HOST</code>, <code>SETUPHOST</code>, <code>ADMINHOST</code> and <code>METRICSADMINHOST</code> with the correct URL to your Domino server. If you are using the Notes client, the default, <code>localhost</code> should be ok.</li> <li>Click Save.</li> <li>Go to Collections and expand <code>Domino REST API</code>.</li> <li>Expand <code>Authentication</code> and select <code>Admin Login</code></li> <li>Click Send to execute the command.</li> </ol>"},{"location":"tutorial/postmancurl.html#curl","title":"curl","text":"<p>Replace <code>$password</code> with your password value and <code>$username</code> with your username value.</p> <pre><code>curl --location --request POST 'localhost:8880/api/v1/auth' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"password\" : $password,\n    \"username\" : $username\n}'\n</code></pre> <p>This will return a bearer token that will be used to replace all <code>$Bearer</code> in this tutorial.</p>"},{"location":"tutorial/postmancurl.html#list-available-databases","title":"List available databases","text":"<p>Use the following API to list all the databases:</p>"},{"location":"tutorial/postmancurl.html#postman_1","title":"Postman","text":""},{"location":"tutorial/postmancurl.html#curl_1","title":"curl","text":"<p>Replace <code>$Bearer</code> with the bearer token from login.</p> <pre><code>curl --location --request POST 'localhost:8880/api/setup-v1/admin/access' \\\n--header 'Authorization: Bearer $Bearer' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"checkAllNsf\": true,\n    \"onlyConfigured\": false\n}'\n</code></pre> <p>You should be able to see <code>Demo.nsf</code> in the list of databases if it's in the Notes data directory.</p>"},{"location":"tutorial/postmancurl.html#create-a-schema","title":"Create a schema","text":"<p>Use the following to create a schema:</p>"},{"location":"tutorial/postmancurl.html#postman_2","title":"Postman","text":""},{"location":"tutorial/postmancurl.html#curl_2","title":"curl","text":"<p>Replace <code>$Bearer</code> with the bearer token from login.</p> <pre><code>curl --location --request POST 'localhost:8880/api/setup-v1/schema?nsfPath=Demo.nsf&amp;configName=demo' \\\n--header 'Authorization: Bearer $Bearer' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"apiName\": \"demo\",\n    \"name\": \"demo\",\n    \"description\": \"Demo database\",\n    \"nsfPath\": \"Demo.nsf\",\n    \"icon\": \"Base64 stuff, preferably SVG\",\n    \"iconName\": \"mountain\",\n    \"isActive\": true,\n    \"requireRevisionToUpdate\": false,\n    \"formulaEngine\": \"domino\",\n    \"openAccess\": true,\n    \"allowCode\": true,\n    \"dqlAccess\": true,\n    \"dqlFormula\": {\n        \"formulaType\": \"domino\",\n        \"formula\": \"@True\"\n    },\n    \"views\": [\n        {\n            \"name\": \"Customers\",\n            \"alias\": [\n                \"Customers\"\n            ],\n            \"unid\": \"86C72C1BF64B6DF04825847100373215\"\n        },\n        {\n            \"name\": \"MarketingInfo\",\n            \"alias\": [\n                \"MarketingInfo\"\n            ],\n            \"unid\": \"10EA9EC66EA748BC4825851100420810\"\n        },\n        {\n            \"name\": \"ChineseCustomers\",\n            \"alias\": [\n                \"ChineseCustomers\"\n            ],\n            \"unid\": \"3FE5CD63E179F21600258680006DB25B\"\n        },\n        {\n            \"name\": \"($All)\",\n            \"alias\": [\n                \"($All)\"\n            ],\n            \"unid\": \"0E35D520A1EBBB5B48258435003E8284\"\n        },\n        {\n            \"name\": \"Samples\",\n            \"alias\": [\n                \"Samples\"\n            ],\n            \"unid\": \"5318911D496571410025860D00544B17\"\n        }\n    ],\n    \"forms\": [\n        {\n            \"formName\": \"Customer\",\n            \"formModes\": [\n                {\n                    \"modeName\": \"default\",\n                    \"fields\": [\n                        {\n                            \"name\": \"Form\",\n                            \"type\": \"string\",\n                            \"readOnly\": true,\n                            \"fieldGroup\" : \"thing\",\n                            \"multivalue\" : true\n                        },\n                        {\n                            \"name\": \"Pet\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"color\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"email\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"employee_count\",\n                            \"type\": \"integer\"\n                        },\n                        {\n                            \"name\": \"first_name\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"last_name\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"hobbies\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\"\n                            }\n                        },\n                        {\n                            \"name\": \"Owner\",\n                            \"type\": \"string\",\n                            \"format\": \"authors\"\n                        },\n                        {\n                            \"name\": \"Body\",\n                            \"type\": \"object\",\n                            \"format\": \"richtext\"\n                        }\n                    ],\n                    \"required\": [\n                        \"Form\",\n                        \"email\",\n                        \"first_name\"\n                    ],\n                    \"readAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@True\"\n                    },\n                    \"writeAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@True\"\n                    },\n                    \"deleteAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@False\"\n                    },\n                    \"computeWithForm\": false\n                },\n                {\n                    \"modeName\": \"dql\",\n                    \"fields\": [\n                        {\n                            \"name\": \"Form\",\n                            \"type\": \"string\",\n                            \"readOnly\": true\n                        },\n                        {\n                            \"name\": \"Pet\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"color\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"email\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"first_name\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"last_name\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"hobbies\",\n                            \"type\": \"array\",\n                            \"items\": {\n                                \"type\": \"string\"\n                            }\n                        }\n                    ],\n                    \"required\": [\n                        \"Form\",\n                        \"email\",\n                        \"first_name\"\n                    ],\n                    \"readAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@True\"\n                    },\n                    \"writeAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@True\"\n                    },\n                    \"deleteAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@False\"\n                    },\n                    \"computeWithForm\": false\n                }\n            ]\n        },\n        {\n            \"formName\": \"Marketing\",\n            \"formModes\": [\n                {\n                    \"modeName\": \"default\",\n                    \"fields\": [\n                        {\n                            \"name\": \"Form\",\n                            \"type\": \"string\",\n                            \"readOnly\": true\n                        },\n                        {\n                            \"name\": \"Assets\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"Country\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"FullName\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"Industry\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"Newsletter\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"email\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"gender\",\n                            \"type\": \"string\",\n                            \"writeOnly\": true\n                        }\n                    ],\n                    \"readAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@True\"\n                    },\n                    \"writeAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@True\"\n                    },\n                    \"deleteAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@False\"\n                    },\n                    \"computeWithForm\": false\n                }\n            ]\n        },\n        {\n            \"formName\": \"SampleForm\",\n            \"formModes\": [\n                {\n                    \"modeName\": \"default\",\n                    \"fields\": [\n                        {\n                            \"name\": \"Color\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"Form\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"Shape\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"Taste\",\n                            \"type\": \"string\"\n                        }\n                    ],\n                    \"readAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@True\"\n                    },\n                    \"writeAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@True\"\n                    },\n                    \"deleteAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@False\"\n                    },\n                    \"computeWithForm\": false\n                },\n                {\n                    \"modeName\": \"odata\",\n                    \"fields\": [\n                        {\n                            \"name\": \"Color\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"Form\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"Shape\",\n                            \"type\": \"string\"\n                        },\n                        {\n                            \"name\": \"Taste\",\n                            \"type\": \"string\"\n                        }\n                    ],\n                    \"readAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@True\"\n                    },\n                    \"writeAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@True\"\n                    },\n                    \"deleteAccessFormula\": {\n                        \"formulaType\": \"domino\",\n                        \"formula\": \"@False\"\n                    },\n                    \"computeWithForm\": false\n                }\n            ]\n        }\n    ],\n    \"formAliases\": {\n        \"Entry\": \"Entry\",\n        \"SampleEntry\": \"SampleEntry\",\n        \"Customer\": \"Customer\"\n    }\n}'\n</code></pre> <p>The created schema would have configured forms and views.</p>"},{"location":"tutorial/postmancurl.html#create-a-scope","title":"Create a scope","text":"<p>Use the following to create a scope for the schema we created:</p>"},{"location":"tutorial/postmancurl.html#postman_3","title":"Postman","text":""},{"location":"tutorial/postmancurl.html#curl_3","title":"curl","text":"<p>Please replace <code>$Bearer</code> with the bearer token from login.</p> <pre><code>curl --location --request POST 'localhost:8880/api/setup-v1/admin/scope?createSchema=true' \\\n--header 'Authorization: Bearer $Bearer' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"apiName\": \"demo\",\n    \"schemaName\": \"demo\",\n    \"nsfPath\": \"Demo.nsf\",\n    \"isActive\": true\n}'\n</code></pre>"},{"location":"tutorial/postmancurl.html#verify-the-forms-for-the-demo-database","title":"Verify the forms for the demo database","text":"<p>Use the following to check the forms in the database:</p>"},{"location":"tutorial/postmancurl.html#postman_4","title":"Postman","text":""},{"location":"tutorial/postmancurl.html#curl_4","title":"curl","text":"<p>Please replace <code>$Bearer</code> with the bearer token from login and <code>$scope</code> with the demo scope name.</p> <pre><code>curl --location --request GET 'localhost:8880/api/setup-v1/design/forms?dataSource=$scope' \\\n--header 'Authorization: Bearer $Bearer' \\\n--header 'Accept: application/json'\n</code></pre>"},{"location":"tutorial/postmancurl.html#verify-the-views-for-the-demo-database","title":"Verify the views for the demo database","text":"<p>Use the following to check the views in the database:</p>"},{"location":"tutorial/postmancurl.html#postman_5","title":"Postman","text":""},{"location":"tutorial/postmancurl.html#curl_5","title":"curl","text":"<p>Replace <code>$Bearer</code> with the bearer token from login and <code>$scope</code> with the demo scope name.</p> <pre><code>curl --location --request GET 'localhost:8880/api/v1/lists?dataSource=$scope' \\\n--header 'Authorization: Bearer $Bearer' \\\n--header 'Accept: application/json'\n</code></pre>"},{"location":"tutorial/postmancurl.html#create-document","title":"Create document","text":"<p>Use the following to create a document:</p>"},{"location":"tutorial/postmancurl.html#postman_6","title":"Postman","text":""},{"location":"tutorial/postmancurl.html#curl_6","title":"curl","text":"<p>Replace <code>$Bearer</code> with the bearer token from login and <code>$scope</code> with the demo scope name.</p> <pre><code>curl --location --request POST 'localhost:8880/api/v1/document?dataSource=$scope' \\\n--header 'Authorization: Bearer $Bearer' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"first_name\": \"George\",\n    \"last_name\": \"Branthwaite\",\n    \"email\": \"gbranthwaite0@nba.com\",\n    \"gender\": \"Male\",\n    \"ip_address\": \"91.254.204.27\",\n    \"Color\": \"Red\",\n    \"Pet\": \"Black-capped chickadee\",\n    \"Form\": \"Customer\"\n}'\n</code></pre>"},{"location":"tutorial/postmancurl.html#retrieve-document","title":"Retrieve document","text":"<p>Use the following to retrieve a document:</p>"},{"location":"tutorial/postmancurl.html#postman_7","title":"Postman","text":""},{"location":"tutorial/postmancurl.html#curl_7","title":"curl","text":"<p>Replace <code>$Bearer</code> with the bearer token from login, <code>$UNID</code> with the UNID from the previously created document and <code>$scope</code> with the demo scope name.</p> <pre><code>curl --location --request GET 'localhost:8880/api/v1/document/$UNID?dataSource=$scope' \\\n--header 'Authorization: Bearer $Bearer'\n</code></pre>"},{"location":"tutorial/postmancurl.html#delete-document","title":"Delete document","text":"<p>Use the following command to delete a document:</p>"},{"location":"tutorial/postmancurl.html#postman_8","title":"Postman","text":""},{"location":"tutorial/postmancurl.html#curl_8","title":"curl","text":"<p>Replace <code>$Bearer</code> with the bearer token from login, <code>$UNID</code> with the UNID from the previously created document and <code>$scope</code> with the demo scope name.</p> <pre><code>curl --location --request DELETE 'localhost:8880/api/v1/document/$UNID?dataSource=$scope' \\\n--header 'Authorization: Bearer $Bearer'\n</code></pre>"},{"location":"tutorial/postmancurl.html#verify-document-deletion","title":"Verify document deletion","text":"<p>To verify document deletion, try getting it again using the retrieve command shown before. The retrieve should fail.</p>"},{"location":"tutorial/postmancurl.html#logout","title":"Logout","text":"<p>Use the following command to log out:</p>"},{"location":"tutorial/postmancurl.html#postman_9","title":"Postman","text":""},{"location":"tutorial/postmancurl.html#curl_9","title":"curl","text":"<p>Replace <code>$Bearer</code> with the bearer token.</p> <pre><code>curl --location --request POST 'localhost:8880/api/v1/auth/logout' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer $Bearer' \\\n--data-raw '{\n    \"logout\" : \"Yes\"\n}'\n</code></pre>"},{"location":"tutorial/postmancurl.html#shutdown","title":"Shutdown","text":"<p>Use the following command to shut down the Domino REST API server:</p>"},{"location":"tutorial/postmancurl.html#postman_10","title":"Postman","text":""},{"location":"tutorial/postmancurl.html#curl_10","title":"curl","text":"<p>Replace <code>$Bearer</code> with the bearer token.</p> <pre><code>curl --location --request POST 'localhost:8889/shutdown' \\\n--header 'Authorization: Bearer $Bearer' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{\n    \"shutdownkey\" : \"The End is near!!\",\n    \"StopServer\" : true\n}'\n</code></pre>"},{"location":"tutorial/quickstart.html","title":"Quickstart","text":"<p>This guide allows new users with working experience in HCL Notes and HCL Domino to quickly get started with Domino REST API. These are the steps:</p> <ul> <li> <p>Download the installer or Container (a.k.a. Docker) image</p> </li> <li> <p>Install and run the REST API</p> </li> <li> <p>Follow the tutorials to learn about AdminUI</p> </li> <li> <p>Read the introduction to the concepts, especially schemas and scopes</p> </li> <li> <p>Get to know Postman and curl, two invaluable tools for REST usage</p> </li> </ul>"},{"location":"tutorial/quickstart.html#downloading-domino-rest-api","title":"Downloading Domino REST API","text":"<p>Log in to My HCLSoftware Portal  and download Domino REST API.</p>"},{"location":"tutorial/quickstart.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"tutorial/quickstart.html#whats-new","title":"What's New","text":"<p>Check What's New to learn what's new in Domino REST API.</p>"},{"location":"tutorial/quickstart.html#the-domino-rest-api-schema","title":"The Domino REST API schema","text":"<p>You will find a snapshot of the Domino REST API schemas here. The actual schema however resides on your Domino REST API server instance as OpenAPI specification. You can read and explore it directly with your own data.</p>"},{"location":"tutorial/quickstart.html#a-few-phrases-you-should-know","title":"A few phrases you should know","text":"<ul> <li>A database exposed on the API is referred to as a scope. The exposure happens through an entry in Domino REST API's configuration database by an administrator with <code>Editor</code> access there. The scope gets used in the URLs as <code>?dataSource=[scopename]</code>. Scopes for databases are lowercase only.</li> <li>The shape of data available is referred to as a schema. The schema is an json file in the design resources of the database. It gets created by a developer with <code>Designer</code> access to the NSF.</li> <li> <p>A Domino REST API Application is an OAuth compatible definition of a <code>client_id</code> and a <code>client_secret</code> as well as the list of permitted scopes.</p> </li> <li> <p>A scope points to a schema that is contained in a database. A database can have multiple schemas for different use cases and a schema can be pointed to by more than one scope.</p> </li> </ul> <p>Pick the name of your scope wisely. It's the external name you share with others and thus hard to change without breaking external apps.</p>"},{"location":"tutorial/quickstart.html#lets-get-started","title":"Let's get started","text":"<p>To get up and running quickly, you will need to:</p> <ul> <li> <p>Install Domino REST API on a Notes client or a Domino server.</p> </li> <li> <p>Pick a database you want to work with. You could use demo.nsf.</p> </li> <li> <p>Use the Domino REST API to create a schema REST access (if you dare, use Domino Designer).</p> </li> <li> <p>Pick the forms and fields to expose.</p> </li> <li>Pick the views you want to be REST accessible.</li> <li> <p>Pick the agents. (Optional)</p> </li> <li> <p>Use the Domino REST API to create a scope.</p> </li> <li>Try out the API.</li> </ul> <p>You can use the built-in Swagger API, Postman and Curl, or the Admin UI. To help you, use one of the following tutorials. We have a curl based Domino REST API shell script for you to play with.</p> <p>Tip</p> <p>Make sure to complete the post installation steps to ensure proper operation.</p>"},{"location":"tutorial/quickstart.html#tutorials","title":"Tutorials","text":"<ul> <li> <p>Easy steps on this site</p> </li> <li> <p>A tutorial for the skilled Notes developer</p> </li> <li> <p>Similar to the previous one, but from the viewpoint of a skilled web developer</p> </li> <li> <p>Explore on your own using a Postman collection</p> </li> </ul> <p></p> <p>The Postman collection has sample interactions with the local sample <code>Demo.nsf</code>, go check it out.</p>"},{"location":"tutorial/quickstart.html#roles","title":"Roles","text":"<ul> <li>Domino developer creates the schema that defines what data can be accessed in a nsf database.</li> <li>Domino administrator creates and activates the scope that defines how the data can be accessed. Also creates (optional) OAuth compatible applications with <code>client_id</code> and <code>client_secret</code> properties.</li> <li>Volt MX administrator configures Volt MX's foundry middleware to interact with Domino REST API using the foundry Domino REST API adapter</li> <li>Application developer develops applications leveraging Domino REST API Endpoints, Volt MX services and front-end tools like Volt MX Iris, VS Code or any tools and framework of choice</li> </ul> <p>Read more about them in Domino REST API roles.</p>"},{"location":"tutorial/quickstart.html#endpoints","title":"Endpoints","text":"<p>Ensure your endpoints are secure. Bring up a browser and verify that you can hit these endpoints:</p> Endpoints Ports Details Webpages Domino REST API Home Page 8880 Start page Live Domino REST API 8880 Interact live with the API Admin UI 8880 Login with an admin user. LocalDomainAdmin member Management API 8889 Access to the log and runtime info Prometheus Metrics 8890 Performance info in Prometheus format. Protected with basic authentication (metrics/metrics) Health check endpoint 8886 Server healthcheck endpoint as used by Kubernetes or Openshift Auth 8880 The endpoint, <code>[POST] http/s://${HOST}:8880/api/v1/auth</code>, is the default end point to exchange Domino web credentials for a JWT access token. For example, use the token in Postman request headers as a Bearer authentication header. You also can use your own IdP to gain access tokens"},{"location":"tutorial/quickstart.html#whats-next","title":"What's next?","text":"<p>Based on your interest, start by exploring the following sections of this documentation:</p> <ul> <li> <p>Dive deeper into installation and configuration.</p> </li> <li> <p>Learn more about using Domino REST API.</p> </li> <li> <p>Explore the internal working of Domino REST API and know more about the Barbican.</p> </li> </ul>"},{"location":"tutorial/swagger.html","title":"OpenAPI UI (a.k.a. Swagger)","text":""},{"location":"tutorial/swagger.html#overview","title":"Overview","text":"<p>This tutorial shows how to use the OpenAPI UI (a.k.a. Swagger UI) to:</p> <ul> <li>create a JWT token for authorization</li> <li>create a document</li> <li>list views</li> <li>view Domino REST API databases</li> </ul> <p>The Swagger UI is an OpenSource component supported and maintained by SmartBear and packaged into a WebJar to render the collection of definitions that constitute the Domino REST API. For an introduction, see Swagger UI.</p> <p>URLs in this tutorial</p> <p>The URLs in this tutorial point to a local instance of the Domino REST API. When you want to follow it on your own remote server, you need to replace <code>http://localhost</code> with your server address.</p>"},{"location":"tutorial/swagger.html#before-you-begin","title":"Before you begin","text":"<ul> <li>You have already created a schema using the <code>Demo.nsf</code> database.</li> <li>You have activated the database forms and views of your created schema.</li> <li>You have created a scope.</li> </ul> <p>For more information, see Using Admin UI.</p>"},{"location":"tutorial/swagger.html#create-a-jwt-token-for-authorization","title":"Create a JWT token for authorization","text":"<p>You need to create a JWT token to get proper authorization to try out the endpoints. Without proper authorization, you can try executing the endpoints, but you will get an access error.</p> <ol> <li> <p>Go to Swagger UI.</p> </li> <li> <p>Select your server from the Servers drop-down list.</p> <p></p> </li> <li> <p>Go to and expand authentication, and then expand the POST /auth endpoint.</p> <p></p> </li> <li> <p>In the Request body, update the <code>username</code> and <code>password</code> with your Domino REST API username and password, and then click Execute.</p> <p></p> <p>When your credentials are valid, the returned JSON has the JWT token in the <code>bearer</code> key.</p> <p></p> </li> <li> <p>Copy the JWT token in the <code>bearer</code> key.</p> </li> <li> <p>Go to the top of the page and click Authorize.</p> <p></p> </li> <li> <p>In the Available authorizations dialog, paste the JWT token in the Value field under jwt (http, Bearer), and then click Authorize.</p> <p></p> </li> <li> <p>Close the Available authorizations dialog.</p> </li> </ol>"},{"location":"tutorial/swagger.html#create-a-document-with-swagger-ui","title":"Create a document with Swagger UI","text":"<ol> <li> <p>Go to and expand data, and then go to and expand the POST /document endpoint.</p> <p></p> </li> <li> <p>Make sure that the scope name provided for the dataSource parameter is the same as the scope name you created for your schema.</p> </li> <li> <p>In the Request body, enter all the mandatory field values as shown below, and then click Execute.</p> <pre><code>{\n \"Form\": \"Customer\",\n \"Color\": \"Red\",\n \"Pet\": \"Hamster\",\n \"email\": \"me@donotreply.com\",\n \"first_name\": \"John\",\n \"last_name\": \"Doe\"\n}\n</code></pre> <p></p> </li> <li> <p>Observe what happens when you supply less fields.</p> </li> </ol>"},{"location":"tutorial/swagger.html#list-views-with-swagger-ui","title":"List views with Swagger UI","text":"<ol> <li>Go to and expand data, and then go to and expand the GET /lists endpoint.</li> <li> <p>In the dataSource, enter the scope name, and then click Execute.</p> <p>Make sure that the scope name you entered is the same as the scope name you created for your schema.</p> <p></p> </li> <li> <p>Check the Server Response to see the information on available views or folders.</p> <p></p> </li> </ol>"},{"location":"tutorial/swagger.html#view-specific-domino-rest-api-database","title":"View specific Domino REST API database","text":"<ol> <li> <p>Select your specific Domino REST API database from the Select a definition drop-down list.</p> <p></p> </li> <li> <p>Review the endpoints.</p> <ol> <li> <p>Expand data, authentication, or code.</p> <p></p> </li> <li> <p>Review the endpoints.</p> <p>The admin and design APIs aren't included since they're not appropriate for accessing the demo database's data. The <code>dataSource</code> parameter is always \"demo\" because the OpenAPI specification is for that Domino REST API database.</p> <p></p> </li> </ol> </li> <li> <p>Review the schemas at the bottom. If you haven't specified read/write fields on a form, you'll see the genericFormResponse/genericFormRequest. If you have specified read or write fields, you'll see a schema for <code>formName-modeName Responses</code>/<code>formName-modeName Requests</code>.</p> <p>In the following example image, the read or write fields have been specified so you can see the schema for <code>formName-modeName Responses</code>/<code>formName-modeName Requests</code>. Wherein, the <code>formName</code> is Customer and the <code>modeName</code> is default and dql.</p> <p></p> </li> </ol> <p>You can share the specific Domino REST API database to other developers who also consume the Domino REST API for that database by copying the URL and then sending it to those developers.</p>"},{"location":"tutorial/extensibility/index.html","title":"Extensibility tutorial","text":"<p>The tutorial will walk you through the creation of a custom URL endpoint approving and rejecting generic request. You need to be familiar with Java and Domino to follow it.</p>"},{"location":"tutorial/extensibility/index.html#setting-up-the-maven-java-project","title":"Setting up the Maven Java project","text":"<p>First step is to setup the Java project. It will use a published parent project and libraries installed with your DRAPI installation</p>"},{"location":"tutorial/extensibility/index.html#openapi-specification","title":"OpenAPI specification","text":"<p>Second step is to create an OpenAPI 3.0.x specification. You can do that using notepad, but you want to use available tooling. You could use the original Swagger Editor, Redhat's Apicurio (Apicurito will suffice in most cases) or (what the creator of this tutorial liked best APIGit)</p>"},{"location":"tutorial/extensibility/index.html#creating-the-configjson","title":"Creating the config.json","text":"<p>DRAPI is driven by a dynamic configuration. In order to get your extension recognized you must provide the information what verticle will run your code and what classes implement your business logic. To do so a file <code>resources/config/config.json</code> is required</p>"},{"location":"tutorial/extensibility/index.html#implementing-business-logic","title":"Implementing business logic","text":"<p>To implement functionality two Java classes get involved. A handler class that takes in the http request and forwards it on the Eventbus and a dbrequest class that performs the database interaction.</p> <p>For the most common use case of JSON in/out, the default handler performs all the necessary actions, no custom code is required.</p>"},{"location":"tutorial/extensibility/index.html#access-control","title":"Access Control","text":"<p>DRAPI follows Domino's access control, there's no sidestepping. You can however tighten the screws to be very specific on individual access requirements</p>"},{"location":"tutorial/extensibility/index.html#deployment","title":"Deployment","text":""},{"location":"tutorial/extensibility/index.html#setting-up-a-devcontainer","title":"Setting up a devcontainer","text":"<p>This step is strictly optional. It can, after the initial setup steps greatly improve your developer experience by creating a well known development environment.</p> <p>Next</p> <p>Setting up the Maven Java project</p>"},{"location":"tutorial/extensibility/index.html#future-versions-and-breaking-changes","title":"Future Versions and Breaking Changes","text":"<p>While the intent is that Java extensibility APIs will be stable over time, the specifics are more likely to change across major versions than the published REST API endpoints. Be sure to check release notes for any changes between versions that may affect Java extensions.</p> <p>Beyond the published DRAPI APIs, take care to not assume the presence of most specific dependencies within DRAPI's \"libs\" directory. Some dependencies - namely, domino-jnx-api and Vert.x - are almost guaranteed to remain consistent over time. Others, like specific utility libraries, are liable to change or be removed even between minor versions of DRAPI. The safest route is to use few third-party dependencies in your Java projects, and otherwise check each DRAPI version for changes.</p>"},{"location":"tutorial/extensibility/index.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"tutorial/extensibility/accesscontrol.html","title":"Access Control","text":"<p>DRAPI follows Domino's access control, there's no sidestepping. You can however tighten the screws to be very specific on individual access requirements.</p>"},{"location":"tutorial/extensibility/accesscontrol.html#access-annotations","title":"Access Annotations","text":"<p>You can decorate each request class with a series of Java annotations to both document and early enforce access requirements:</p> <ul> <li><code>@MinimumAcl(AclLevel)</code> - specify the required ACL access. While e.g. Editor access suffices for updating a document, you can specify that this function requires Designer access</li> <li><code>@AclAttributes(AclAccessFlags)</code> - require specific flags like <code>CreateDocuments</code> or <code>CreateSharedFoldersViews</code>, all the checkboxes in the ACL</li> <li><code>@AclRoles(String[])</code> - User must have one of the roles to perform the operation</li> <li><code>@ServerAclSecurity(ServerAclType)</code> - required Server ACL entries like <code>SERVER_ADMIN</code>, <code>FULL_ADMIN</code>, <code>DATABASE_ADMIN</code> and more</li> <li><code>@ServerEclSecurity(ServerEclType)</code> - required execution permissions like <code>RUN_UNRESTRICTED_CODE</code>, <code>RUN_RESTRICTED_CODE</code> and <code>RUN_FORMULA</code></li> </ul> <p>So your class could look like this:</p> <pre><code>@MinimumAcl(AclLevel.AUTHOR)\n@AclAttributes({AclAccessFlags.CreateDocuments})\n@AclRoles({\"Approver\"})\npublic class SubmitDecision extends AsyncDominoJNXJson {\n  public void process(final DbRequestParameters&lt;JsonObject&gt; request) throws Exception {\n    request.validate();\n    // Your code goes here\n  }\n}\n</code></pre>"},{"location":"tutorial/extensibility/accesscontrol.html#helper-methods","title":"Helper methods","text":"<p>There are a number of helper methods available to perform common checks. Most of them can be found in the <code>KeepJnxSession</code>, or as static methods in <code>DocumentFunctions</code> check the JavaDoc for details:</p> <ul> <li><code>Optional&lt;Document&gt; session.getDocumentByUNID(request.db, unid, DocumentScope.VALID_DOCUMENTS_ONLY)</code></li> <li><code>Document validateDocumentAccessRequest(final Database db, final String unid, final DocumentAccess docAccess, final Optional&lt;KeepRequestId&gt; requestId)</code></li> <li><code>Document createDocFromJson(final Database db, final JsonObject body)</code></li> <li><code>void updateDocumentFromJson(final JsonObject jsonSource, final Document doc)</code></li> <li><code>JsonObject DocumentFunctions.document2Json(doc, includeMeta)</code></li> </ul> <p>Typical code pattern would look like this:</p> <pre><code>// Get a specific document\nfinal Optional&lt;Document&gt; optionalNote = request.session.getDocumentByUNID(request.db, unid, DocumentScope.VALID_DOCUMENTS_ONLY);\n\n// Throw an error\nfinal Document note = optionalNote.orElseThrow(() -&gt; new KeepExceptionNotFound(KeepExceptionStrings.NO_DOCUMENT_ACCESS, unid));\n\n// Create a new doc\nfinal Document note = optionalNote.orElse(() -&gt; db.createDocument());\n</code></pre>"},{"location":"tutorial/extensibility/accesscontrol.html#priviledged-operations","title":"Priviledged operations","text":"<p>A typical requirement in web applications is the need for operation specific elevated priviledges. E.g. you want the default access for \"ApprovalLog.nsf\" to be Reader, so nobody can manually create or alter documents, but the code in <code>SubmitDecision</code> needs to be able to create. For this scenario, the <code>KeepJnxSession</code> allows to execute operations as the server, using server privileges.</p> <p>The modified code from Business Logic would look like this:</p> <pre><code>    try (KeepClient kc = request.session.getClientAsIDUser(); // Session as server\n        Database approvalLog = kc.openDatabase(\"ApprovalLog.nsf\")) {\n      // Write to log\n      Document logEntry = approvalLog.createDocument();\n      logEntry.replaceItemValue(\"Form\", \"logentry\");\n      // like before\n      logEntry.save();\n\n      // Update document\n      // like before\n      doc.save();\n    } catch (Exception e) {\n      logger.error(e.getMessage());\n      throw e;\n    }\n</code></pre> <p>With great powers...</p> <p>...come great responsibilites. While this allows to have tight access control, it can backfire when not implemented carefully</p> <p>Next</p> <p>Deployment</p>"},{"location":"tutorial/extensibility/accesscontrol.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"tutorial/extensibility/businesslogic.html","title":"Implementing business logic","text":"<p>To implement functionality two Java classes get involved. A handler class that takes in the http request and forwards it on the Eventbus and a dbrequest class that performs the database interaction.</p> <p>For the most common use case of JSON in/out, the default handler performs all the necessary actions, no custom code is required.</p> <p></p>"},{"location":"tutorial/extensibility/businesslogic.html#handlers","title":"Handlers","text":"<p>The handler is part of the initial REST processing which includes:</p> <ul> <li>Checking the validity of the JWT Token</li> <li>Ckecking the conformance to the API specification (all mandatory fields present, reject extra fields when specified so in the API)</li> <li>Gather all parameters and body for the EventBus</li> <li>Prepare response type chunked for Array or blob returns</li> </ul> <p>All of that is take care of.</p>"},{"location":"tutorial/extensibility/businesslogic.html#dbrequests","title":"DBRequests","text":"<p>We have two OperationIDs to take care of: <code>getApprovals</code> and <code>submitDecision</code>. The will both act on the database specified in the <code>dataSource</code> query parameter and accept / return JSON data. There is some overlap in utility methods needed, we shall entertain a utility class for that. Both will extend the abstract class <code>AsyncDominoJNXJson</code> which only needs the method <code>process</code> to be implemented.</p>"},{"location":"tutorial/extensibility/businesslogic.html#primer-on-dbrequestparameters","title":"Primer on DbRequestParameters&lt;?&gt;","text":"<p>The class provides convenient access to everthing needed to implement a custom functionality:</p> Property / Method Type Purpose <code>client</code> DominoClient Access to the Domino API <code>db</code> or <code>db()</code> DominoDatabase the database specified in dataSource <code>incoming</code> JSON Object All parameters, headers, body <code>factory</code> Keepfactory Access to helper objects &amp; methods <code>session</code> or <code>session()</code> KeepJNXSession EntryPoint for regular operations, user, other dbs emit(JsonObject) void Sending data back, can be called more than once <p>There are a few more, check the JavaDoc for details.</p> <p>In a nutshell: the <code>process</code> method needs to call <code>emit()</code> at least once or throw an error. When the return type ia an array, it can call <code>emit()</code> multiple times.</p>"},{"location":"tutorial/extensibility/businesslogic.html#errors-to-throw","title":"Errors to throw","text":"<p>While you can throw any Exception to terminate a failed operation, DRAPI has a set of Exception classses that determine how the exception maps to a http status code.</p> <p></p>"},{"location":"tutorial/extensibility/businesslogic.html#getapprovals","title":"GetApprovals","text":"<p>The <code>process</code> method can look like this:</p> <pre><code>final static String APPROVAL_VIEW_NAME = \"PendingApprovalByApprover\";\n\n  @Override\n  public void process(DbRequestParameters&lt;JsonObject&gt; request) throws Exception {\n\n    final String approver = request.session.getUserName();\n    final DominoCollection view = request.db.openCollection(APPROVAL_VIEW_NAME)\n        .orElseThrow(() -&gt; new KeepExceptionWrongDataRequest(\"database is not approval enabled\"));\n\n    final CollectionSearchQuery searchQuery = view.query()\n        .readColumnValues()\n        .selectByKey(approver, true);\n\n    List&lt;CollectionEntry&gt; result = searchQuery.collectEntries(0, Integer.MAX_VALUE);\n\n    result.stream()\n        .map(this::entryToJson)\n        .filter(Optional::isPresent)\n        .map(Optional::get)\n        .forEach(request::emit);\n\n  }\n</code></pre> <p>A helper method <code>entryToJson</code> converts the <code>CollectionEntry</code> into a JsonObject that gets emitted back to HTTP as part of the resulting array. All the plumbing is taken care of.</p> <p>Style: Optional over null</p> <p>Nobody likes null(PointerExceptions). So as a style decision DRAPI doesn't return <code>null</code> (unless it's broken), but Java's Optional, that makes intend in the code more visible.</p> <p>Instead of</p> <pre><code>SomeObject some = someFunction();\nif (some == null) {\n    doTheNullCase();\n} else {\n    doTheGoodCase(some);\n}\n</code></pre> <p>You would write more distinct code:</p> <pre><code>// When you have a default fallback\nSomeObject some = someOptional().orElse(makeDefault());\n// When no value raises an error\nSomeObject some = someOptional().orElseThrow(new ShitHappenedException());\n// When you only are interested in an existing result\nsomeOptional().ifPresent(this::doTheGoodCase);\n// Java &gt; 8 has more options, check them out\n</code></pre> <pre><code>  static final List&lt;String&gt; COLUMN_NAMES =\n      Arrays.asList(\"requestor\", \"value\", \"status\", \"subject\", \"submission\");\n\n   Optional&lt;JsonObject&gt; entryToJson(final CollectionEntry source) {\n    final JsonObject result = new JsonObject();\n    final List&lt;String&gt; missing = new ArrayList&lt;&gt;();\n    final String unid = source.getUNID();\n    result.put(\"unid\", unid);\n    COLUMN_NAMES.forEach(colName -&gt; {\n      final Object colValue = source.get(colName);\n      if (colValue != null) {\n        result.put(colName, colValue);\n      } else {\n        missing.add(colName);\n      }\n    });\n    // We don't send incomplete records\n    if (missing.isEmpty()) {\n      logger.trace(\"Record {} processed {}\", unid, source.toString());\n      return Optional.of(result);\n    }\n    logger.error(\"record {} has misssing columns: {}\", unid, missing);\n    return Optional.empty();\n  }\n</code></pre>"},{"location":"tutorial/extensibility/businesslogic.html#submitdecision","title":"SubmitDecision","text":"<p>The code is similar simple. We check if the document exists, is an a state to be approved by the current user, record the decision in the ApprovalLog central database and update the document.</p> <pre><code> @Override\n  public void process(DbRequestParameters&lt;JsonObject&gt; request) throws Exception {\n\n    request.validate();\n\n    final String unid = request.incoming.getString(\"unid\");\n    final String status = request.incoming.getString(\"status\");\n    final Optional&lt;String&gt; delegee = Optional.ofNullable(request.incoming.getString(\"delegee\"));\n\n    final Document doc = this.isTheRequestGoodToGo(request.session, request.db, unid, status);\n    final Date now = new Date();\n\n    try (Database approvalLog = request.session.getDatabaseDomino(\"ApprovalLog.nsf\")) {\n      // Write to log\n      Document logEntry = approvalLog.createDocument();\n      logEntry.replaceItemValue(\"Form\", \"logentry\");\n      logEntry.replaceItemValue(\"unid\",unid);\n      logEntry.replaceItemValue(\"StatusOld\",doc.getItemValue(\"status\"));\n      logEntry.replaceItemValue(\"StatusNew\",status);\n      logEntry.replaceItemValue(\"Approver\",request.session.getUserName());\n      delegee.ifPresent(d -&gt; logEntry.replaceItemValue(\"Delegee\", delegee));\n      logEntry.replaceItemValue(\"TransactionDate\",now);\n      logEntry.save();\n\n      // Now update document\n      if (delegee.isPresent() &amp;&amp; \"delegated\".equals(status)) {\n        doc.replaceItemValue(\"Approver\",delegee.get());\n        doc.replaceItemValue(\"Status\",\"pending\");\n      } else {\n        doc.replaceItemValue(\"Approver\",request.session.getUserName());\n        doc.replaceItemValue(\"Status\",status);\n      }\n      doc.save()\n    } catch (Exception e) {\n      logger.error(e.getMessage());\n      throw e;\n    }\n\n    JsonObject happyResult = new JsonObject()\n        .put(\"StatusCode\", \"200\")\n        .put(\"Status\", String.format(\"Decision %s recorded for %s\",status,unid));\n\n    request.emit(happyResult);\n\n  }\n\n    Document isTheRequestGoodToGo(final KeepJnxSession session, final Database db, final String unid, final String status)\n      throws KeepException {\n    Document doc = session.validateDocumentAccessRequest(db, unid, DocumentAccess.WRITE, this.getRequestId());\n    String docStatus = doc.get(\"Status\", String.class, \"Unknown\");\n    String approver = doc.get(\"Approver\", String.class, \"Unknown\");\n    if (\"approved\".equals(docStatus) || \"rejected\".equals(docStatus)) {\n      throw new KeepExceptionWrongDataRequest(\"Request is already %s\", docStatus);\n    }\n    if (!session.getUserName().equals(approver)) {\n      throw new KeepExceptionWrongDataRequest(\"Request can only be approved by %s\", approver);\n    }\n    return doc;\n  }\n</code></pre>"},{"location":"tutorial/extensibility/businesslogic.html#testing","title":"Testing","text":"<p>Compile the Jar and throw it into DRAPI's <code>libs</code> folder. Restart DRAPI and it should show up. Test using curl or Bruno</p> <p>Next</p> <p>Access Control</p>"},{"location":"tutorial/extensibility/businesslogic.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"tutorial/extensibility/configjson.html","title":"The config.json configuration","text":"<p>DRAPI is driven by a dynamic configuration. To get your extension recognized you must provide the information what verticle will run your code and what classes implement your business logic. To do so a file <code>resources/config/config.json</code> is required:</p> <pre><code>{\n  \"versions\": {\n    \"eoffice\": {\n      \"path\": \"/schema/openapi.eoffice.json\",\n      \"active\": true\n    }\n  },\n  \"verticles\": {\n    \"MyOffice\": {\n      \"worker\": false,\n      \"className\": \"com.hcl.domino.keep.verticles.DominoDefaultVerticle\",\n      \"tags\": {\n        \"approval\": \"io.projectkeep.domino.keep.dbrequests.approval\"\n      },\n      \"active\": true\n    },\n    \"RestAPI\": {\n      \"versions\": {\n        \"eoffice\": {\n          \"package\": \"io.projectkeep.domino.keep.handlers\",\n          \"route\": \"/api/eoffice-v1\",\n          \"defaultClass\": \"com.hcl.domino.keep.handlers.core.DefaultJsonHandler\",\n          \"defaultDatabase\": \"names\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"tutorial/extensibility/configjson.html#explanation","title":"Explanation","text":"Item Description 1 <code>versions</code> contains all active API collections. 2 The name must match the middle part of your OpenAPI file (<code>openapi.eoffice.json</code>). 3 The entries in the verticle key determine how the HTTP side (fixed name <code>RestAPI</code>) and the database side (choose your own name) process your API. 4 Specifies the verticle to use on the database side. The default entry works for all regular API calls. 5 The tags entry is used to determine the package name for your implementation class (see below). 6 This must match item 2 and the middle part of your OpenAPI filename. 7 The package name for eventual HTTP side handlers, not relevant as long as you deal with JSON in/out. 8 The route needs to match your OpenAPI file and is the actual route used. If mismatched, interactive Swagger won't work. 9 Leave the default entries as is. Advanced use cases aren't subject of this tutorial."},{"location":"tutorial/extensibility/configjson.html#determine-the-class-names-for-the-business-logic","title":"Determine the class names for the business logic","text":"<p>The class name gets derived from the tag and the OperationID specified in the OpenAPI file. The tag gets mapped to a Java package name, while the OperationID forms the class name after the first letter gets captallized</p> <p>Next</p> <p>Implementing business logic</p>"},{"location":"tutorial/extensibility/configjson.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"tutorial/extensibility/deployment.html","title":"Deployment","text":""},{"location":"tutorial/extensibility/deployment.html#os-level","title":"OS Level","text":""},{"location":"tutorial/extensibility/deployment.html#container","title":"Container","text":"<p>Next</p> <p>Setting up a Development Container</p>"},{"location":"tutorial/extensibility/deployment.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"tutorial/extensibility/devcontainer.html","title":"Development Container","text":"<p>Development Containers is a Micosoft initiated open standard, extending the use case for containers (colloquial Docker) to development environments. Curently VSCode and IntelliJ are supported.</p> <p>In a nutshell</p> <p>a devcontainer setup allows for a standardized development environment, so all tools and runtimes are available to the developer consistently.</p> <p>We will walk through the steps required for a consistent DRAPI development experience. This includes a local Domino instance for testing.</p>"},{"location":"tutorial/extensibility/devcontainer.html#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>A container runtime:</p> </li> <li> <p>Docker desktop (Win, Mac, Linux)</p> </li> <li>Rancher desktop (Win, Mac, Linux)</li> <li>Podman desktop (Win, Mac, Linux)</li> <li>MicroK8s (Linux)</li> <li>Orbstack (Mac)</li> </ul> <p>Depending on your choice you might need to obtain a license, be sure to ckeck!</p> <ul> <li>a supported Ide</li> <li>The HCL Domino Container repository</li> <li>Your HCL credentials to obtain the Domino installer</li> <li>some patience and a few hours time</li> </ul>"},{"location":"tutorial/extensibility/devcontainer.html#initial-image","title":"Initial image","text":"<p>We start with a Java development image and add Domino and tooling</p>"},{"location":"tutorial/extensibility/devcontainer.html#devcontainer-and-scripts","title":"<code>.devcontainer</code> and scripts","text":""},{"location":"tutorial/extensibility/devcontainer.html#side-cars-anyone","title":"Side cars anyone?","text":"<p>This is work in progress</p> <p>We are constantly working on improving Domino REST API's functionality and documentation. You have a documentation page which is not quite ready. Feel free to feedback what you would like to see here.</p>"},{"location":"tutorial/extensibility/devcontainer.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"tutorial/extensibility/javaproject.html","title":"Setting up the Java Maven project","text":"<p>You will install the DRAPI dependencies and configure a <code>pom.xml</code> as well a the maven standard directory structure. We outline the manual steps, your Ide might have some automation that works faster.</p>"},{"location":"tutorial/extensibility/javaproject.html#prerequisites","title":"Prerequisites","text":"<ul> <li>You need a matching JDK installed (Domino doesn't ship a JDK);</li> <li>Java 8 for Domino 12</li> <li>Java 17 for Domino 14</li> <li>Java 21 for Domino 14.5</li> <li>Apache Maven latest 3.9 edition</li> <li>Version control, we presume <code>git</code> for this tutorial</li> <li>An Ide, but you could just use <code>vi</code> if you remember how to exit it</li> </ul> <p>Be careful when installing a JDK, it might have license requirents (e.g. the Oracle version), so stick with OpenJDK.</p>"},{"location":"tutorial/extensibility/javaproject.html#locate-and-install-drapi-dependencies","title":"Locate and install DRAPI dependencies","text":"<p>Maven at compile time relies on dependencies in the <code>~/.m2</code> direcory structure, so you need to install DRAPI's jar files there manually since they are not published to Maven central and can't be automagically downloaded.</p> <p>Locate the DRAPI installation diectory and change into it. It typically is something like <code>/opt/hcl/keep</code> or <code>C:\\Program files\\HCL\\restapi</code>, Make sure you see the following files (there are more, but not relevat here):</p> <ul> <li>keep-core-*.jar</li> <li>keep-extension-*.jar</li> <li>keep-core-*-javadoc.jar</li> <li>keep-extension-*-javadoc.jar</li> </ul> <p>where <code>*</code> stands for the internal build number, e.g <code>1.38.0</code> for DRAPI 1.1.2.</p> <p>You can use the installer</p> <p>An easy way to get the files is to run the installer using the parameters <code>-a -n -s</code> to \"install\" the files to a temp directory. Make sure you have the matching installer for your Domino version</p> <p>Install the jars to <code>~/.m2</code> using this command (all OS):</p> <pre><code>mvn install:install-file -dfile=keep-core-1.38.0.jar\nmvn install:install-file -dfile=keep-core-1.38.0-javadoc.jar\nmvn install:install-file -dfile=keep-extension-1.38.0.jar\nmvn install:install-file -dfile=keep-extension-1.38.0-javadoc.jar\n</code></pre>"},{"location":"tutorial/extensibility/javaproject.html#create-the-direcory-structure","title":"Create the direcory structure","text":"<p>I keep all my code in <code>~/Code</code> ( <code>%HOME%\\Code</code> for Windows), Don't put files under version control in your <code>Documents</code> or <code>Desktop</code> folder, you only risk conflicts between version control and cloud sync (Google Drive, OneDrive, iCloud etc).</p> <p>Decide on your organisation, usually it is the reverse URL, so when your url is <code>acme.com</code>, you use <code>com.acme</code> as org, which is the entry to your packet hierachy, for the purpose of this tutorial we will use <code>io.projectkeep</code>. Please do not use it for your actual code.</p> <p></p> <p>For macOS or Linux:</p> <pre><code>mkdir -p extension-tutorial/src/main/java/io/projectkeep/domino/keep/dbrequests/approvals\nmkdir -p extension-tutorial/src/main/resources/config\nmkdir -p extension-tutorial/src/main/resources/openapi\nmkdir -p extension-tutorial/src/test/java/io/projectkeep/domino/keep/dbrequests/approvals\nmkdir -p extension-tutorial/src/test/resources\n</code></pre> <p>For Windows:</p> <pre><code>mkdir \"extension-tutorial\\src\\main\\java\\io\\projectkeep\\domino\\keep\\dbrequests\\approvals\"\nmkdir \"extension-tutorial\\src\\main\\resources\\config\"\nmkdir \"extension-tutorial\\src\\main\\resources\\openapi\"\nmkdir \"extension-tutorial\\src\\test\\java\\io\\projectkeep\\domino\\keep\\dbrequests\\approvals\"\nmkdir \"extension-tutorial\\src\\test\\resources\"\n</code></pre> <p>The strucutre follows the maven defaults and the package naming used in DRAP</p>"},{"location":"tutorial/extensibility/javaproject.html#add-the-pomxml","title":"Add the <code>pom.xml</code>","text":"<p>In this tutorial we will only add the pieces we absolutely need. SO, depending on your corporate standards you might add additional entries, listing developers, version control, check style, documentation creation etc.</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\n    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\n    &lt;groupId&gt;io.projectkeep.domino.keep&lt;/groupId&gt;\n    &lt;artifactId&gt;extension-tutorial&lt;/artifactId&gt;\n    &lt;version&gt;1.0.0-SNAPSHOT&lt;/version&gt;\n    &lt;packaging&gt;pom&lt;/packaging&gt;\n    &lt;name&gt;Keep API Extension Example&lt;/name&gt;\n\n    &lt;properties&gt;\n       &lt;!-- Adjust Domino &amp; Java version to your environment --&gt;\n       &lt;domino.version&gt;14.0.0&lt;/domino.version&gt;\n       &lt;java.version&gt;17&lt;/java.version&gt;\n       &lt;keep.version&gt;1.38.0&lt;/keep.version&gt; &lt;!-- your Keep version --&gt;\n       &lt;maven.compiler.plugin.version&gt;3.13.0&lt;/maven.compiler.plugin.version&gt;\n       &lt;maven.surefire.plugin.version&gt;3.5.1&lt;/maven.surefire.plugin.version&gt;\n       &lt;mockito.version&gt;5.15.2&lt;/mockito.version&gt;\n       &lt;restassured.version&gt;5.5.0&lt;/restassured.version&gt;\n       &lt;smallrye.jandex.version&gt;3.2.3&lt;/smallrye.jandex.version&gt;\n       &lt;!-- IMPORTANT: Encoding all UTF-8 --&gt;\n       &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;\n       &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\n    &lt;/properties&gt;\n\n    &lt;dependencies&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.hcl.domino.keep&lt;/groupId&gt;\n            &lt;artifactId&gt;keep-core&lt;/artifactId&gt;\n            &lt;version&gt;${keep.version}&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n        &lt;dependency&gt;\n            &lt;groupId&gt;com.hcl.domino.keep&lt;/groupId&gt;\n            &lt;artifactId&gt;keep-extension&lt;/artifactId&gt;\n            &lt;version&gt;${keep.version}&lt;/version&gt;\n            &lt;scope&gt;provided&lt;/scope&gt;\n        &lt;/dependency&gt;\n    &lt;/dependencies&gt;\n\n    &lt;build&gt;\n       &lt;plugins&gt;\n                &lt;plugin&gt;\n                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;\n                    &lt;version&gt;${maven.compiler.plugin.version}&lt;/version&gt;\n                    &lt;configuration&gt;\n                        &lt;source&gt;${java.version}&lt;/source&gt;\n                        &lt;target&gt;${java.version}&lt;/target&gt;\n                    &lt;/configuration&gt;\n                &lt;/plugin&gt;\n\n                &lt;plugin&gt;\n                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                    &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;\n                    &lt;version&gt;${maven.surefire.plugin.version}&lt;/version&gt;\n                    &lt;configuration&gt;\n                        &lt;testFailureIgnore&gt;false&lt;/testFailureIgnore&gt;\n                        &lt;includes&gt;\n                            &lt;include&gt;**/*Test.java&lt;/include&gt;\n                            &lt;include&gt;**/*Tests.java&lt;/include&gt;\n                        &lt;/includes&gt;\n                        &lt;forkNode\n                            implementation=\"org.apache.maven.plugin.surefire.extensions.SurefireForkNodeFactory\" /&gt;\n                    &lt;/configuration&gt;\n                &lt;/plugin&gt;\n\n                &lt;plugin&gt;\n                    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;\n                    &lt;artifactId&gt;maven-surefire-report-plugin&lt;/artifactId&gt;\n                    &lt;version&gt;${maven.surefire.plugin.version}&lt;/version&gt;\n                &lt;/plugin&gt;\n\n                &lt;plugin&gt;\n                    &lt;groupId&gt;org.jetbrains.dokka&lt;/groupId&gt;\n                    &lt;artifactId&gt;dokka-maven-plugin&lt;/artifactId&gt;\n                    &lt;version&gt;2.0.0&lt;/version&gt;\n                    &lt;executions&gt;\n                        &lt;execution&gt;\n                            &lt;id&gt;site-gen&lt;/id&gt;\n                            &lt;phase&gt;pre-site&lt;/phase&gt;\n                            &lt;goals&gt;\n                                &lt;goal&gt;javadocJar&lt;/goal&gt;\n                            &lt;/goals&gt;\n                        &lt;/execution&gt;\n                        &lt;execution&gt;\n                            &lt;id&gt;package&lt;/id&gt;\n                            &lt;phase&gt;prepare-package&lt;/phase&gt;\n                            &lt;goals&gt;\n                                &lt;goal&gt;javadocJar&lt;/goal&gt;\n                            &lt;/goals&gt;\n                        &lt;/execution&gt;\n                    &lt;/executions&gt;\n                &lt;/plugin&gt;\n\n                &lt;plugin&gt;\n                    &lt;groupId&gt;org.cyclonedx&lt;/groupId&gt;\n                    &lt;artifactId&gt;cyclonedx-maven-plugin&lt;/artifactId&gt;\n                    &lt;version&gt;2.9.0&lt;/version&gt;\n                &lt;/plugin&gt;\n\n                &lt;plugin&gt;\n                    &lt;groupId&gt;io.smallrye&lt;/groupId&gt;\n                    &lt;artifactId&gt;jandex-maven-plugin&lt;/artifactId&gt;\n                    &lt;version&gt;${smallrye.jandex.version}&lt;/version&gt;\n                    &lt;executions&gt;\n                        &lt;execution&gt;\n                            &lt;id&gt;make-index&lt;/id&gt;\n                            &lt;goals&gt;\n                                &lt;goal&gt;jandex&lt;/goal&gt;\n                            &lt;/goals&gt;\n                        &lt;/execution&gt;\n                    &lt;/executions&gt;\n                &lt;/plugin&gt;\n         &lt;/plugins&gt;\n    &lt;/build&gt;\n&lt;/project&gt;\n</code></pre>"},{"location":"tutorial/extensibility/javaproject.html#configure-version-control","title":"Configure version control","text":"<p>Create the file <code>.gitignore</code> in the root of your project. Take inspiration from existing files here or here. Also strongly recommended is to create the file <code>.gitattributes</code>. Once created, initialize and populate the repository:</p> <pre><code>git init\ngit add --all\ngit commit -m 'initial creation'\n</code></pre> <p>By frequently commiting to your local git, you work with the assurance that you can respawn when things go south.</p> <p>Next</p> <p>OpenAPI specification</p>"},{"location":"tutorial/extensibility/javaproject.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"tutorial/extensibility/openapi.html","title":"OpenAPI 3.0.x specification","text":"<p>Second step is to create an OpenAPI 3.0.x specification. You can do that using notepad, but you want to use available tooling. You could use the original Swagger Editor, Redhat's Apicurio (Apicurito will suffice in most cases) or (what the creator of this tutorial liked best): APIGit</p>"},{"location":"tutorial/extensibility/openapi.html#the-idea","title":"The idea","text":"<p>The approval extension implements an approval system (simplified) that can work with any compliant database. A database is compliant when it has a view <code>pendingApprovalsByApprover</code> and a set of specified items in the document to be approved.</p> <p>We implement a base function, to give you an idea. The example easily can be extended to add notification, communication with external systems etc. You even could implement approvals for users who don't have write access to the document.</p> <p>JSON and file naming</p> <p>We support OpenApi's 3.0.x JSON format only. YAML or 3.1.x are not supported.</p> <p>The name of the file has to start with <code>openapi.</code> and end with <code>.json</code></p>"},{"location":"tutorial/extensibility/openapi.html#end-points","title":"End Points","text":"<p>Our extension shall allow to retrieve a list of pending approvals, approve or reject a request or delegate the decision.</p>"},{"location":"tutorial/extensibility/openapi.html#data-formats","title":"Data formats","text":"<p>In a typical development cycle we would start with the URLs and leave the data format unspecified a Json object for an initial iteration. In a later iteration the schema gets specified in detail and locked down.</p> <p>Iterate your design</p> <p>To be clear: OpenAPI does NOT require big upfront design, but allows for convenient ever refining iterations.</p> <p>For the sake of this tutorial we present the final structure.</p>"},{"location":"tutorial/extensibility/openapi.html#pending-approvals","title":"Pending approvals","text":"<p>The Schema looks like this, the URL (see below) will return an array of them. Note: It is good practise to compose the object definiions. In this example <code>status</code> is a referenced definition.</p> <pre><code>{\n  \"type\": \"object\",\n  \"properties\": {\n    \"unid\": {\n      \"type\": \"string\",\n      \"description\": \"primary key\",\n      \"readOnly\": true,\n      \"minLength\": 32,\n      \"maxLength\": 32\n    },\n    \"requestor\": {\n      \"type\": \"string\",\n      \"description\": \"person needing an approval\",\n      \"readOnly\": true\n    },\n    \"value\": {\n      \"type\": \"number\",\n      \"description\": \"value in USD\",\n      \"readOnly\": true,\n      \"format\": \"float\"\n    },\n    \"status\": {\n      \"$ref\": \"#/components/schemas/ApprovalStatus\",\n      \"description\": \"Where are we\"\n    },\n    \"subject\": {\n      \"type\": \"string\",\n      \"description\": \"Description of the request\",\n      \"readOnly\": true\n    },\n    \"submission\": {\n      \"type\": \"string\",\n      \"format\": \"date\",\n      \"readOnly\": true,\n      \"description\": \"creation date\"\n    }\n  },\n  \"required\": [\"unid\", \"requestor\", \"value\", \"status\", \"subject\", \"submission\"],\n  \"additionalProperties\": false\n}\n</code></pre> <p></p>"},{"location":"tutorial/extensibility/openapi.html#decision","title":"Decision","text":"<p>A decision submission needs: the unid, the new status and in case of a delegation the delegee. We reuse the appoval status. In a production level application you probably would have more fields.</p> <pre><code>{\n  \"type\": \"object\",\n  \"properties\": {\n    \"unid\": {\n      \"$ref\": \"#/components/schemas/unid\"\n    },\n    \"status\": {\n      \"$ref\": \"#/components/schemas/ApprovalStatus\"\n    },\n    \"delegee\": {\n      \"type\": \"string\",\n      \"description\": \"Person who actually decides\"\n    }\n  },\n  \"required\": [\"unid\", \"status\"],\n  \"additionalProperties\": false\n}\n</code></pre> <p></p>"},{"location":"tutorial/extensibility/openapi.html#urls","title":"URLs","text":"<p>For our tutorial project a single URL <code>/appovals</code> with <code>GET</code> for the list and <code>POST</code> for the decision is sufficient.</p> <p></p> <p>Important elements are:</p> <ul> <li>security: jwt</li> <li>tag</li> <li>OperationId</li> </ul> <p>Tag and OperationId will form the package and class name later on.</p> <pre><code>{\n  \"get\": {\n    \"summary\": \"get the list of approvals for the current user\",\n    \"description\": \"Retrieves a list of approvals the current user has to decide\",\n    \"operationId\": \"getApprovals\",\n    \"tags\": [\"approval\"],\n    \"parameters\": [],\n    \"responses\": {\n      \"200\": {\n        \"$ref\": \"#/components/responses/approvalList\"\n      }\n    },\n    \"security\": [\n      {\n        \"jwt\": []\n      }\n    ]\n  },\n  \"post\": {\n    \"summary\": \"submit an approval decision\",\n    \"description\": \"Submisssion of approval, rejection or delegation\",\n    \"operationId\": \"submitDecision\",\n    \"tags\": [\"approval\"],\n    \"parameters\": [],\n    \"responses\": {\n      \"200\": {\n        \"$ref\": \"#/components/responses/status\"\n      },\n      \"400\": {\n        \"$ref\": \"#/components/responses/status\"\n      }\n    },\n    \"security\": [\n      {\n        \"jwt\": []\n      }\n    ],\n    \"requestBody\": {\n      \"$ref\": \"#/components/requestBodies/DecissionBody\"\n    }\n  },\n  \"parameters\": [\n    {\n      \"in\": \"query\",\n      \"name\": \"dataSource\",\n      \"description\": \"Which database to check\",\n      \"schema\": {\n        \"type\": \"string\"\n      },\n      \"required\": true\n    }\n  ]\n}\n</code></pre>"},{"location":"tutorial/extensibility/openapi.html#security","title":"Security","text":"<p>We need to specify what authentication is available. It needs to match the security spec from DRAPI. the only supported value is <code>jwt</code>.</p> <p></p>"},{"location":"tutorial/extensibility/openapi.html#extensions","title":"Extensions","text":"<p>There are a number of extensions defined in DRAPI, one can use to further refine the schema.</p> <p>Our result looks like this:</p> <p>.</p> <p>You can reference the full file here as <code>openapi.eoffice.json</code></p> <p>Next</p> <p>Creating the config.json</p>"},{"location":"tutorial/extensibility/openapi.html#lets-connect","title":"Let's connect","text":"<p>We really like to hear from you!</p> <p>Your opinion matters. Let us know all your questions, discussions, ideas, and feedback.</p> <p>Join the Domino REST API discussion in the HCL Domino forum at the HCLSoftware Digital Solutions Community Forum or join the OpenNTF Discord channel.</p> <p>If you need customer support, learn and understand what information you need to provide to ensure that your support needs are met effectively. For more information, see Contact support.</p>"},{"location":"tutorial/installconfig/index.html","title":"Installation and configuration","text":"<p>The guide outlines the steps to install the Domino REST API and the necessary configuration tasks after installation to complete a production-ready deployment, ensuring full capability and a secure interface for your Domino applications.</p>"},{"location":"tutorial/installconfig/index.html#installation","title":"Installation","text":"<p>Details the necessary steps to install the Domino REST API, beginning with verifying that your system meets the required specifications, followed by downloading the installers, and concluding with the installation of the Domino REST API on the compatible platform.</p>"},{"location":"tutorial/installconfig/index.html#post-installation-tasks","title":"Post-installation tasks","text":"<p>Details the necessary configuration tasks necessary to complete a production-ready deployment of Domino REST API.</p>"},{"location":"tutorial/installconfig/index.html#additional-information","title":"Additional information","text":"<p>After completing the installation and the post-installation tasks:</p> <ul> <li> <p>Complete the walkthrough tutorial.</p> </li> <li> <p>Learn about the OpenAPI UI.</p> </li> <li> <p>Check Understanding configuration once you are ready to tweak the default configuration so that you understand how to do it.</p> </li> <li> <p>Learn about hosting static applications, often referred to as Single Page Applications (SPA) or browser apps. The tutorial has an example that you can refer to.</p> </li> </ul>"},{"location":"tutorial/installconfig/configuration/index.html","title":"Post installation","text":"<p>After installation, Domino REST API will run on port 8880 with HTTP and a transient JWT token for single server use. It's nice to try things out, but not production-ready. The following configuration tasks are needed to finalize a production-worthy Domino REST API deployment and to ensure complete functionality and a secure interface to your Domino applications.</p> <p>Important</p> <ul> <li>You should familiarize yourself with all configuration parameters and security settings before you deploy into a production environment.</li> <li>Domino REST API honors all Domino access control mechanisms and doesn't allow anonymous access. For more information, see Access Control.</li> </ul>"},{"location":"tutorial/installconfig/configuration/index.html#check-connectivity","title":"Check connectivity","text":"<p>After the installation, make sure connectivity works.</p>"},{"location":"tutorial/installconfig/configuration/index.html#secure-ports","title":"Secure ports","text":"<p>A production environment must have an encrypted communication between any client and the Domino REST API Server. Domino REST API uses multiple ports, learn how to secure them.</p>"},{"location":"tutorial/installconfig/configuration/index.html#setup-functional-accounts","title":"Setup functional accounts","text":"<p>There are a series of endpoints that aren't associated with regular user IDs:</p> <ul> <li>Management console (Port 8889)</li> <li>Metrics endpoint (Port 8890)</li> <li>Health check (Port 8886)</li> </ul> <p>To enable access to these port, you need functional accounts.</p>"},{"location":"tutorial/installconfig/configuration/index.html#configure-jwt","title":"Configure JWT","text":"<p>Domino REST API uses JSON Web Token (JWT) for authorization. To allow using Domino REST API without the deployment of an external Identity Provider (IdP), Domino REST API can be configured to provide a JWT after authentication with Domino credentials.</p> <p>The JWT token can also be shared between servers to enable SSO (Single Sign On) for Domino REST API.</p>"},{"location":"tutorial/installconfig/configuration/index.html#manage-databases","title":"Manage databases","text":"<p>There are databases created on the Domino server as part of the Domino REST API installation. These databases must be secured and managed like other production databases.</p>"},{"location":"tutorial/installconfig/configuration/index.html#expose-databases-to-rest-api-access","title":"Expose databases to REST API access","text":"<p>To make a database available on the Domino REST API, create a Domino REST API schema and link it to a publicly visible scope. The schema defines what documents, based on the value of their form item, views, folders, and agents are available for a call via HTTP.</p>"},{"location":"tutorial/installconfig/configuration/admingroup.html","title":"Manage databases","text":"<p>The following databases are created on the Domino server as part of the Domino REST API installation:</p> Database name Database filename Description Domino Keep Configuration keepconfig.nsf Database that stores the scope configurations and OAuth application information. Domino Keep Agent Scheduler keepagents.nsf Database that stores the document for tracking the processing of an agent. The document is created when running the agent asynchronously via Domino REST API. Domino Keep OAuth oauth.nsf Database that stores OAuth refresh tokens. <p>These databases must be secured and managed like other production databases.</p>"},{"location":"tutorial/installconfig/configuration/admingroup.html#about-this-task","title":"About this task","text":"<p>The procedures guide you in configuring the Domino REST API databases to secure and manage them like other production databases.</p>"},{"location":"tutorial/installconfig/configuration/admingroup.html#set-administrator-permission","title":"Set administrator permission","text":"<p>For the databases created as part of the Domino REST API installation, the <code>LocalKeepAdmins</code> group is added automatically to the ACL of these databases. The <code>LocalKeepAdmins</code> group by default has Editor access level to the <code>KeepConfig.nsf</code>.</p> <p>To utilize the <code>LocalKeepsAdmins</code> group to provide administrator permission, add users who should be Domino REST API administrators to the <code>LocalKeepAdmins</code> group. For more information, see Configuring a database ACL  in the HCL Domino documentation.</p>"},{"location":"tutorial/installconfig/configuration/admingroup.html#update-access-control-list","title":"Update access control list","text":"<p>The databases created as part of the Domino REST API installation must have their ACLs  updated to meet your organization\u2019s security requirements by adding your administration and server groups. It's also recommended that you add the Domino server where Domino REST API is installed as the administration server.</p> <ul> <li> <p>Domino Keep Agent Scheduler - <code>keepagents.nsf</code></p> <p>The default access level for this database is Reader. For those users that manage the runtime agents, they must have at least an Editor access level to this database.</p> </li> <li> <p>Domino Keep OAuth - <code>oauth.nsf</code></p> <p>The default access level for this database is Author without the Delete flag to allow users to revoke their consents using the Admin UI.</p> </li> <li> <p>Domino Keep Configuration - <code>keepconfig.nsf</code></p> <p>The default access level for this database is Reader.</p> </li> </ul> <p>For more information on updating the access control list, see Configuring a database ACL  in the HCL Domino documentation.</p> <p>To learn more about access control list, see:</p> <ul> <li>Access levels in the ACL </li> <li>Access level privileges in the ACL </li> </ul>"},{"location":"tutorial/installconfig/configuration/admingroup.html#sign-the-databases","title":"Sign the databases","text":"<p>As with any database added to your Domino server, it's recommended you sign the databases created as part of the Domino REST API installation to vouch for their integrity. You can sign the databases with either the server\u2019s ID or your organization\u2019s signing ID. Using the Domino Administrator client, select <code>keepagents.nsf</code>, <code>keepconfig.nsf</code>, and <code>oauth.nsf</code> and sign them with the respective ID file.</p> <p>For more specific information on the procedure for signing the databases, see Signing a database or template .</p>"},{"location":"tutorial/installconfig/configuration/admingroup.html#next-step","title":"Next step","text":"<p>Proceed to Expose databases for REST API access.</p>"},{"location":"tutorial/installconfig/configuration/connectivity.html","title":"Check connectivity","text":"<p>Once Domino REST API is up and running, check that communication works as expected. In this check, the following names are going to be used as examples:</p> <ul> <li>Fully qualified domain name (FQDN): <code>domino.acme.com</code></li> <li>Domino server fully qualified name: <code>CN=tango/OU=servers/O=ACME Inc</code></li> <li>Domino server common name: <code>tango</code></li> </ul> <p>Replace these names with the ones matching your installation.</p> <p>Note</p> <p>Avoid <code>localhost</code> or any <code>*.local</code> domain names. They don't route.</p>"},{"location":"tutorial/installconfig/configuration/connectivity.html#basic-check-ping","title":"Basic check - PING","text":"<p>Run the following commands on the command line on your server:</p> <pre><code>ping domino.acme.com\nping tango\n</code></pre> <p>Both commands need to succeed in reaching out to any or both <code>127.0.0.1</code> and <code>::1</code>. If any of these doesn't work, amend your hosts file:</p> <pre><code>127.0.0.1     domino.acme.com\n127.0.0.1     tango\n::1           domino.acme.com\n::1           tango\n</code></pre> <p>On Linux or macOS, edit <code>/etc/hosts</code>. On Windows, edit <code>C:\\Windows\\System32\\drivers\\etc\\hosts</code>.</p>"},{"location":"tutorial/installconfig/configuration/connectivity.html#http-connectivity","title":"HTTP connectivity","text":"<p><code>http</code> is going to be used in the following examples.</p> <p>Note</p> <p>If you have configured <code>https</code>, and you should, use that. Also, you might not need port <code>8880</code> when you opted for a proxy configuration. You can learn more about ports here.</p>"},{"location":"tutorial/installconfig/configuration/connectivity.html#client-access","title":"Client access","text":"<p>On any machine that wants to use the Domino REST API, use the following command. It needs to succeed.</p> <pre><code>curl -v http://domino.acme.com:8880/api\n</code></pre> <p>Try the following commands, which MUST fail with \"connection denied\" by your firewall.</p> <pre><code>curl -v http://domino.acme.com:8880/metrics\ncurl -v http://domino.acme.com:8889/\ncurl -v http://domino.acme.com:8886/\n</code></pre> <p>If you get an HTTP 4xx status, it means the port is reachable, which is a security hole. Close it and talk to your firewall admins.</p>"},{"location":"tutorial/installconfig/configuration/connectivity.html#privileged-access","title":"Privileged access","text":"<p>Allow access, by firewall rule or ssh tunnel, for the following ports:</p> <ul> <li> <p>Port 8889</p> <p>The management port allows access to the Management console, which enables creating certs for JWT, salting &amp; encoding passwords, and reviewing the actual configuration. Allow access to trained administrators from a secure network only.</p> </li> <li> <p>Port 8886</p> <p>The Healthcheck port is typically used in Kubernetes environments. Only the server running system management and monitoring should have access.</p> </li> <li> <p>Port 8890</p> <p>Port allowing collection of metrics data in Prometheus format. Only the Prometheus server should have access. Used for dashboards with Grafana.</p> </li> </ul>"},{"location":"tutorial/installconfig/configuration/connectivity.html#next-step","title":"Next step","text":"<p>Proceed to Secure ports.</p>"},{"location":"tutorial/installconfig/configuration/exposedb.html","title":"Expose Domino database for REST API access","text":"<p>By default, no databases are available through the Domino REST API. You decide what Domino databases you want to expose. For those databases you want to expose, you can select specific design elements and define what actions are allowed to prevent potential misuse. Exposing Domino databases for REST API access is a shared activity between an administrator and a developer. As shown in the following diagram, the developer creates the schema, while the administrator enables the schema and creates the scope and OAuth application.</p> <p></p>"},{"location":"tutorial/installconfig/configuration/exposedb.html#about-this-task","title":"About this task","text":"<p>The procedure guides you in creating the components that expose the Domino database to enable external applications to securely access Domino applications, their data, and design elements.</p>"},{"location":"tutorial/installconfig/configuration/exposedb.html#log-in-to-admin-ui","title":"Log in to Admin UI","text":"<p>The Admin UI provides an easy-to-use interface for creating and managing schemas, scopes, and OAuth applications for Domino applications to be accessible via Domino REST API.</p> <ol> <li> <p>Using a web browser, go to <code>http://serverhostname:8880/admin/ui</code>.</p> <p>wherein: <code>serverhostname</code> is your Domino server's hostname.</p> </li> <li> <p>On the login page, enter the administrator username and password, and then click LOG IN WITH PASSWORD.</p> </li> </ol> <p>Tip</p> <p>For more information on logging in to the Admin UI, see the other log in options.</p>"},{"location":"tutorial/installconfig/configuration/exposedb.html#create-a-schema","title":"Create a schema","text":"<p>The schema is created in the Domino database that you want to expose. The Domino database can have multiple schemas to provide different data sets or different levels of access to data.</p> <p>Note</p> <p>The schema is created by a developer who has a Designer access level to the Domino database to be exposed.</p>"},{"location":"tutorial/installconfig/configuration/exposedb.html#add-schema","title":"Add schema","text":"<ol> <li>Select Database Management - REST API from the home page or Schemas from the side navigation pane to access the Schema Management page.</li> <li> <p>On the Schema Management page, click Add Schema.</p> <p></p> </li> <li> <p>In the Add New Schema dialog, click Create Schema.</p> <p></p> </li> <li> <p>In the Create Schema dialog:</p> <ol> <li> <p>Select a database from the Database drop-down list.</p> <p>You can also enter the database name in the Database field to filter the list of available databases.</p> </li> <li> <p>Select an Icon.</p> </li> <li>Enter a Schema Name and a Schema Description.</li> <li>Click Save Schema.</li> </ol> </li> </ol> <p>The new schema is available and visible on the Schema Management page. If no visible, make sure to click the Only show schemas configured with scopes toggle to the off position. </p> <p>Tip</p> <ul> <li>You also have the option of importing an schema. For more information, see Import a schema.</li> </ul>"},{"location":"tutorial/installconfig/configuration/exposedb.html#activate-a-form","title":"Activate a form","text":"<ol> <li>On the Schema Management page, click the schema you just created.</li> <li>On the Database Forms tab, select the form that you want to activate, click the corresponding menu icon beside the form's status, and then select Activate.</li> <li>Repeat the previous step for all the forms that you want to activate.</li> </ol> <p>The activated form or forms now have an Active status.</p> <p>Tip</p> <p>Click Activate All to activate all forms with default settings.</p>"},{"location":"tutorial/installconfig/configuration/exposedb.html#configure-a-form","title":"Configure a form","text":"<ol> <li> <p>On the Database Forms tab, click the pencil icon corresponding to the activated form that you want to configure.</p> <p></p> <p>The Access Mode page opens showing the <code>default</code> access mode.</p> <p></p> </li> <li> <p>Under Show fields from, hover over a field item and click the + icon. This adds the field in the form. Repeat this for all the fields to be added.</p> <p></p> <p>Tip</p> <ul> <li>Click Add All Fields icon to add all the available fields to the form.</li> <li>Click Refresh List of Fields icon to refresh the list of avaialble fields.</li> <li>Use the Search Field search box to search for a field by field name.</li> <li>Hover over the Info icon beside the field name to show the field property. The field can be editable, which means that the field has Read/Write access setting. The field can also be either computed, computed when composed, or computed for display, which means that the field has Read Only access setting.</li> <li>Enter a custom field name in the Add custom field and click the + icon to add a custom field to the form.</li> <li>Click Delete Fields, select the fields to remove, and then click Remove to remove the selected fields from the form.</li> </ul> </li> <li> <p>Under Field Setting, you can set the Field Name, Field Type, and the read or write access of the field in the form.</p> <p>Tip</p> <ul> <li>Click the Multi-Value toggle to the on position to specify a Field Group. The Multi-Value toggle isn't clickable to the off position if you specified a field group.</li> <li>Click the Required toggle to the on position to specify that the field is a required field. When set to the on position, the word Required is added below the name of the field in the added field list.</li> </ul> <p>Encryption feature</p> <p>The encryption feature is available starting from the Domino REST API v1.1.0 release. Make sure to set up Domino REST API for encryption, decryption, and signing before executing the following steps for encryption and signing.</p> <p>Click the Encrypt toggle to the on position to enable encryption. For more information on encryption and signing, see Using encryption, decryption, and signing during development.</p> </li> <li> <p>Under Mode Settings:</p> <ol> <li> <p>Click the pencil icon corresponding to a mode formula. A dialog opens.</p> <p>The following image shows the opened Formula for Delete Access dialog.  </p> <p></p> </li> <li> <p>In the text field in the dialog, edit the <code>@True</code> or <code>@False</code> entry and click Save to close the dialog.</p> </li> </ol> <p>Signing feature</p> <p>The signing feature is available starting from the Domino REST API v1.1.0 release. Make sure to set up Domino REST API for encryption, decryption, and signing before executing the following steps for encryption and signing.</p> <p>Click the Sign Document toggle to the on position to enable this feature. For more information on encryption and signing, see Using encryption, decryption, and signing during development.</p> </li> <li> <p>(Optional) Under Validation Rules:</p> <ol> <li>Click Add Rule if you want to add a validation rule to validate the value of a field. The Add Rule dialog opens.</li> <li>Enter the validation formula in the Formula field and the error message in the Error Message field.</li> <li>Click Add.</li> </ol> </li> <li> <p>Click Save.</p> </li> </ol> <p>Note</p> <ul> <li>Form modes specify what data can be read or written to documents using the form name in their form item. The Admin UI lists four modes that provide a special purpose. They are default, dql, odata and raw. Depending on the use case, the developer may define more than the default mode.</li> <li>For more information on configuring a form, see Change form configuration.</li> </ul>"},{"location":"tutorial/installconfig/configuration/exposedb.html#activate-a-view","title":"Activate a view","text":"<ol> <li>Click the name of your schema from the breadcrumb navigation menu to go back to the Schema Management page. </li> <li> <p>Select Database Views from the menu bar. This lists all the views for the selected schema.</p> <p></p> </li> <li> <p>Select the view that you want to activate, and then click the corresponding Active option under Status.</p> </li> <li>Repeat the previous step for all the views that you want to activate.</li> </ol>"},{"location":"tutorial/installconfig/configuration/exposedb.html#activate-an-agent","title":"Activate an agent","text":"<ol> <li> <p>Select Database Agents from the menu bar. This lists all the Agents for the selected database.</p> <p></p> </li> <li> <p>Select the agent you want to activate, and then click the corresponding Active option under Status.</p> </li> <li>Repeat the previous step for all the agents that you want to activate.</li> </ol>"},{"location":"tutorial/installconfig/configuration/exposedb.html#create-a-scope","title":"Create a scope","text":"<p>The scope configuration is stored in the KeepConfig.nsf database. This separation of scope and schema means multiple scopes can link to a single schema. You use the scope name when performing all CRUD operations.</p> <ol> <li>Select Database Management - Activation from the home page or Scopes from the side navigation pane to access the Scope Management page.</li> <li> <p>On the Scope Management page, click Add Scope.</p> <p></p> </li> <li> <p>Under Available Schema, select the schema that you created.</p> </li> <li> <p>Under Add New Scope, fill in the form and click Add.</p> <ul> <li> <p>For the Server field, enter the name of the server the scope is available on, or leave it blank for the current server. The value of the entered name must be either the server's hierarchical name or in canonical format. See the following examples for reference:</p> <ul> <li>MyServer/MyOrg</li> <li>CN=MyServer/O=MyOrg</li> </ul> <p>Note</p> <p>Accessing a scope on a different server will always return an HTTP 302 response. The server to be redirected to will be dictated by the <code>Fully qualified Internet hostname</code> from the server connection document of the server that owns the scope.</p> </li> <li> <p>For the Maximum Access Level, the default is Editor. You can set it to another value to set the scope's maximum access anyone using the scope has.</p> </li> </ul> </li> </ol> <p></p> <p>Note</p> <p>The Maximum Access Level prevents an app that has inherited a user's access rights when the user grants the app access from unauthorized altering of schemas or access control lists.\u00a0 To know more about what each access level allows and to whom the access level is assigned, see Access levels in the ACL.</p>"},{"location":"tutorial/installconfig/configuration/exposedb.html#create-an-oauth-application","title":"Create an OAuth application","text":"<p>Note</p> <p>This step is optional and is only applicable when you use Domino REST API as your identity provider.</p> <p>You can create one or more OAuth applications that can access one or more of the defined scopes.</p>"},{"location":"tutorial/installconfig/configuration/exposedb.html#add-application","title":"Add application","text":"<ol> <li>Select Application Management - OAUTH from the home page or Applications from the side navigation pane to access the Application Management page.</li> <li>On the Application Management page, click Add Application.</li> <li> <p>Under Add New Application, fill in the form and click Add.</p> <p></p> <p>The new application is now shown on the Application Management page.</p> </li> </ol> <p>Note</p> <ul> <li>When adding a scope, select the scope from the Scope drop-down list and click the Add Scope icon.</li> <li>The callback URL will be provided by the external application that will be accessing Domino through Domino REST API, which is the redirect after OAuth authentication. </li> <li>When your app accesses endpoints that run write operations in the <code>/setup-v1/</code> URL path, make sure to add the <code>$SETUP</code> scope aside from the <code>$DATA</code> scope to enhance access control in relation to the app inheriting a user's access rights when the user grants app access.</li> <li>Select the use PKCE checkbox if you want to use PKCE or Proof Key for Code Exchange, an extension to the authorization code flow to prevent cross-site request forgery and authorization code injection attacks. For more information about how PKCE works and how to implement PKCE, see Authorization Code Flow with Proof Key for Code Exchange (PKCE) .</li> </ul>"},{"location":"tutorial/installconfig/configuration/exposedb.html#generate-an-app-secret","title":"Generate an app secret","text":"<p>Note</p> <p>This only applies to applications that use app secret as authentication method. This is not needed if you use PKCE as the authentication method. For more information, see Application Management.</p> <p>Click the Click to Generate Secret text corresponding to the new OAuth application to generate the App Secret.</p> <p>You will supply the App ID and App Secret to the external application that will be accessing the related Domino database through the Domino REST API.</p> <p>Make sure to take note of the App Secret. Once you switch away from the App Management page, the App Secret will be salted and hashed, and then saved. It can't be transformed back. If you forget it, you need to generate a new one.</p>"},{"location":"tutorial/installconfig/configuration/jwtconfig.html","title":"Configure JWT","text":"<p>All actions in Domino REST API are secured with JSON Web Token (JWT). Domino REST API offers a built-in endpoint to exchange your Domino credentials for a valid JWT.</p> <p>The Domino generated JWT:</p> <ul> <li>uses a random symmetric key that changes on every Domino REST API restart and is stored only in memory.</li> <li>works with one Domino server.</li> <li>can be disabled in Domino REST API configuration with <code>\"disableDominoLogin\" :true</code>.</li> </ul> <p>Domino REST API can also accept JWT tokens from multiple external providers.</p>"},{"location":"tutorial/installconfig/configuration/jwtconfig.html#about-this-task","title":"About this task","text":"<p>This task guides you in configuring Domino REST API to</p> <ul> <li> <p>use a permanent JWT after authentication with Domino credentials</p> <p>OR</p> </li> <li> <p>accept and use JWT tokens from multiple external providers</p> </li> </ul>"},{"location":"tutorial/installconfig/configuration/jwtconfig.html#procedures","title":"Procedures","text":""},{"location":"tutorial/installconfig/configuration/jwtconfig.html#use-a-permanent-jwt-key","title":"Use a permanent JWT key","text":"<p>This procedure enables you to use a public/private key pair and add it to the Domino REST API configuration to use a permanent JWT key.</p> <ol> <li>Log in to the Management console.</li> <li> <p>On the Management console, enter a name that you want to call the IdP certificate into the Certificate Name field. There should be no spaces or special characters.</p> <p>Example: MultiDomain</p> </li> <li> <p>Select the Algorithm, either RSA or Elliptic Curve, and then click Create IdP Certificate.</p> <p>Domino REST API generates an IdP certificate, a public/private key pair, and a configuration file in the <code>keepconfig.d</code> directory. Using the provided example name, the following files are generated:</p> <ul> <li>MultiDomain.cert.pem</li> <li>MultiDomain.json</li> <li>MultiDomain.private.key.pem</li> <li>MultiDomain.public.key.pem</li> </ul> </li> <li> <p>Restart Domino REST API.</p> </li> </ol>"},{"location":"tutorial/installconfig/configuration/jwtconfig.html#use-jwt-tokens-from-external-providers","title":"Use JWT tokens from external providers","text":"<p>Note</p> <p>This configuration is strongly recommended for outward facing Domino servers.</p> <p>To use JWT tokens from an external provider, Domino REST API requires access to the provider\u2019s public key. This can be done in two ways:</p> <ul> <li> <p>One way is to provide the base URI or the full URI to the <code>/.well-known/openid-configuration</code> endpoint in the configuration, if your external provider supports the <code>/.well-known/openid-configuration</code> endpoint.</p> <ol> <li>Create a JSON file using a text editor.</li> <li> <p>Copy the JSON object to the JSON file and update it with the correct values to provide the base URI or the full URI to the endpoint.</p> <pre><code>{\n\"jwt\": {\n    \"some-name\": {\n    \"active\": true,\n    \"providerUrl\": \"https://auth.example.com/auth/realms/master\"\n    }\n  }\n}\n</code></pre> </li> <li> <p>Save the JSON file in the <code>keepconfig.d</code> directory.</p> </li> <li>Restart Domino REST API.</li> </ol> <p>During initialization, Domino REST API will query this endpoint for issuer and key information to trust public keys from that service.</p> <p>Some IdP, such as Microsoft Entra ID formerly Azure Active Directory, don't provide full information, missing algorithm or accurate issuer info. For them, additional parameters <code>aud</code>, <code>iss</code> and <code>algoritm</code> can be specified as shown below:</p> <pre><code>{\n\"jwt\": {\n    \"AzureAD01\": {\n    \"active\": true,\n    \"providerUrl\": \"https://login.microsoftonline.com/[your-tennantid-here]/v2.0/.well-known/openid-configuration\",\n    \"aud\": \"api://dominorest\",\n    \"iss\": \"https://sts.windows.net/[your-tennantid-here]/\",\n    \"algorithm\": \"RS256\"\n    }\n  }\n}\n</code></pre> </li> <li> <p>The other way is to directly add the public key and issuer information to the configuration.</p> <ol> <li>Create a JSON file using a text editor.</li> <li> <p>Copy the JSON object to the JSON file and update it with the correct values to public key and issuer information.</p> <pre><code>{\n\"jwt\": {\n    \"some-name\": {\n    \"active\": true,\n    \"algorithm\": \"RS256\",\n    \"iss\": \"https://auth.example.com/auth/realms/master\",\n    \"kid\": \"id-matching-expected-key\",\n    \"keyFile\": \"path-to-jwt.pubkey\"\n    }\n  }\n}\n</code></pre> </li> <li> <p>Save the JSON file in the <code>keepconfig.d</code> directory.</p> </li> <li>Restart Domino REST API.</li> </ol> </li> </ul> <p>Tip</p> <p>It's the responsibility of the administrator to save key files in secure locations.</p>"},{"location":"tutorial/installconfig/configuration/jwtconfig.html#additional-information","title":"Additional information","text":""},{"location":"tutorial/installconfig/configuration/jwtconfig.html#sharing-jwt-between-servers","title":"Sharing JWT between servers","text":"<p>If you used the permanent JWT key, you can copy the 4 generated files to your other Domino servers in the <code>keepconfig.d</code> directory to set up Domino REST API on multiple Domino servers to use the same JWT keys and achieve single login and decryption capabilities.</p>"},{"location":"tutorial/installconfig/configuration/jwtconfig.html#related-information","title":"Related information","text":"<ul> <li>To learn more about JWT payload, distinguished names, and name resolution, see Auth*.</li> <li>To learn more about areas in Domino REST APi that need encryption keys and how to generate those keys, see Encryption Keys.</li> </ul>"},{"location":"tutorial/installconfig/configuration/jwtconfig.html#next-step","title":"Next step","text":"<p>Proceed to Manage databases.</p>"},{"location":"tutorial/installconfig/configuration/secureport.html","title":"Secure ports","text":"<p>Domino REST API uses four ports which have different purposes and warrant different access/security settings. By dividing Domino REST API access across more than one port, an administrator can take advantage of access security provided by the operating system and/or firewall.</p> Port Description Data port (8880) Main port used by the Domino REST API. Default authentication uses the user name and Internet password of the person document. Healthcheck port (8886) Used to verify whether Domino REST API is up using the <code>/health</code> endpoint. It has its own functional account that doesn't provide access to other ports. Management port (8889) Provides access to the Domino REST API runtime behavior, such as current configuration, runtime information, or Domino REST API shutdown and restart. It's recommended that the port be blocked and accessed only from localhost. It has its own functional account that doesn't provide access to other ports. Prometheus metrics port (8890) Provides metrics in Prometheus format. It has its own functional account that doesn't provide access to other ports."},{"location":"tutorial/installconfig/configuration/secureport.html#about-this-task","title":"About this task","text":"<p>The procedure guides you in securing the ports to encrypt the communication between any client and the Domino REST API server in a production environment. You can do this by performing any of the following procedures:</p> <ul> <li>Configure the ports for TLS</li> <li>Enable HTTPS using Domino Certificate Manager</li> </ul>"},{"location":"tutorial/installconfig/configuration/secureport.html#configure-the-ports-for-tls","title":"Configure the ports for TLS","text":"<ol> <li> <p>Obtain a certificate.</p> <p>For HTTPS traffic, JKS, PEM, and PFX certificate formats are supported.</p> <p>Get a valid certificate by:</p> <ul> <li> <p>Using Let's Encrypt with either Domino cert manager or a proxy, such as nginx.</p> </li> <li> <p>Ask your infrastructure, security, or networking team (if you have one) for a valid certificate.</p> </li> </ul> </li> <li> <p>Copy the certificate to your preferred location local to the Domino server where Domino REST API is installed.</p> </li> <li> <p>On the Domino server where Domino RESR API is installed, create a JSON file in the keepconfig.d directory containing the following information:</p> <ul> <li>Use the following to configure TLS for JKS or PFX. make sure to set <code>TLSType</code> to the correct type.</li> </ul> <pre><code>{\n\"TLSFile\": \"path.to.file\",\n\"TLSPassword\": \"password-in-clear-protect-this\",\n\"TLSType\": \"pfx\"\n}\n</code></pre> <p>Example:</p> <pre><code>{\n\"TLSFile\": \"c:/domino/data/go.pfx\",\n\"TLSPassword\": \"P@$$w0rd1352\",\n\"TLSType\": \"pfx\"\n}\n</code></pre> <ul> <li>Use the following to configure TLS for PEM.</li> </ul> <pre><code>{\n\"TLSFile\": \"path.to.file\",\n\"PEMCert\": \"path.to.crt.file\",\n\"TLSType\": \"pem\"\n}\n</code></pre> <p>Note</p> <ul> <li><code>TLSfile</code> must point to private key, while the <code>PEMCert</code> must point to the certificate chain. </li> <li>If you won't define a password, you must set the value of <code>TLSPassword</code> to <code>\"\"</code>.</li> </ul> </li> <li> <p>Open <code>notes.ini</code> with a text editor and update the value of <code>KeepManagementURL</code> to start with <code>https://</code> followed by the server's host name the TLS certificate is issued for.</p> <p>Example:</p> <p>When the server's host name the TLS certificate is issued for is <code>domino.demo.com</code>, the new value of <code>KeepManagementURL</code> is <code>https://domino.demo.com:8889</code>. In case <code>KeepManagementURL</code> is missing from notes.ini, add it with the new value.</p> </li> <li> <p>On the Domino console, issue <code>tell restapi reload</code> to restart Domino REST API with the new configuration.</p> </li> </ol>"},{"location":"tutorial/installconfig/configuration/secureport.html#enable-https-using-domino-certificate-manager","title":"Enable HTTPS using Domino Certificate Manager","text":"<p>If you are using Domino 14 or above and your certificates are stored in the Domino Certificate Manager, you may be able to enable HTTPS automatically. For more information, see Enable HTTPS using the Domino Certificate Manager.</p>"},{"location":"tutorial/installconfig/configuration/secureport.html#additional-information","title":"Additional information","text":"<p>To make all ports accessible on Port 443, you can use an HTTPS proxy server (Ingress on Kubernetes). Check the links for more information:</p> <ul> <li> <p>Proxy using multiple sub-domains</p> </li> <li> <p>Proxy using URL path access</p> </li> </ul>"},{"location":"tutorial/installconfig/configuration/secureport.html#next-step","title":"Next step","text":"<p>Proceed to Set up functional accounts.</p>"},{"location":"tutorial/installconfig/configuration/setupfunctionalaccount.html","title":"Set up functional accounts","text":"<p>You need functional accounts to enable access to the following endpoints that aren't associated with regular user IDs:</p> <ul> <li>Management console (Port 8889)</li> <li>Metrics endpoint (Port 8890)</li> <li>Health check (Port 8886)</li> </ul>"},{"location":"tutorial/installconfig/configuration/setupfunctionalaccount.html#about-this-task","title":"About this task","text":"<p>The procedure guides you in setting up a functional account.</p>"},{"location":"tutorial/installconfig/configuration/setupfunctionalaccount.html#create-user-and-password-to-initially-access-the-management-console","title":"Create user and password to initially access the Management console","text":"<p>You need access to the Management console to use its utility function to salt and encrypt passwords.</p> <ol> <li> <p>Create a <code>tempmanagement.json</code> file in your <code>[NotesData]/keepconfig.d</code> directory with the following content:</p> <pre><code>{\n  \"identity\": {\n    \"managementAPI\": {\n      \"Doctor Notes\": {\n        \"active\": true,\n        \"secret\": \"E4B321EBA91B7F92D9BF5EAFA5322824FEC2287B8A6C133D7C31EFB706A2BA30:1A57478185E7AF3A98F01ECA08F0BA881DBC88BEC60AE8C6F1B1CC5CC55C11A20F676E082BF2D28BB96DB5A8CFB091C767C035B380DB4CBC7D1001EA8BE01663\"\n      }\n    }\n  }\n}\n</code></pre> <p>This creates the user Doctor Notes with the password set to password to access the Management console.</p> </li> <li> <p>Restart Domino REST API.</p> </li> </ol> <p>Tip</p> <p>Don't leave default passwords in your system. When done with generating new salted passwords, securely back-up <code>tempmanagement.json</code> to prevent unauthorized access, and then restart Domino REST API.</p>"},{"location":"tutorial/installconfig/configuration/setupfunctionalaccount.html#generate-salted-password","title":"Generate salted password","text":"<p>This procedure enables you to generate a salted and encrypted password for use in your functional account.</p> <ol> <li>Log in to the Management console (Port 8889) using username <code>Doctor Notes</code> with password <code>password</code>.</li> <li>On the Management console, enter the password you want to set in the Salt this text field.</li> <li>Click Salt. The salted password is shown.</li> <li>Save the password and the salted password.</li> </ol> <p>You use the password when logging in to the endpoints, while you use the salted password to set up the functional account to access the endpoints.</p>"},{"location":"tutorial/installconfig/configuration/setupfunctionalaccount.html#create-functional-accounts","title":"Create functional accounts","text":"<ol> <li> <p>Create a JSON file in the <code>[NotesData]/keepconfig.d</code> directory with the following JSON structure:</p> <p></p> <pre><code>{\n  \"identity\": {\n    \"healthcheckAPI\": {},\n    \"managementAPI\": {},\n    \"metricsAPI\": {},\n    \"singleDbModeUsers\": {}\n  }\n}\n</code></pre> </li> <li> <p>In each of the sections, specify a user object in the same way:</p> <p></p> <p>Example 1</p> <pre><code>{\n  \"metrics\": {\n    \"active\": true,\n    \"secret\": \"13549ED65AD8760294B9DC898C44F8ABEED399ABB1CA7DC51E8CCFF461D56D13:32BDC8A5DF60FCE424299543DFFF408F500DB1B1EEC4FAB848AA0ED794F5D89AA65A5449EC36BF9CBF53980E4B7DF2B3A3581186E409F5B69BC0C16E51237CC8\"\n  }\n}\n</code></pre> <p>Example 2</p> <pre><code>{\n  \"John Doe\": {\n    \"active\": true,\n    \"CN\": \"CN=John Doe/O=Mauraders\",\n    \"secret\": \"E4B321EBA91B7F92D9BF5EAFA5322824FEC2287B8A6C133D7C31EFB706A2BA30:1A57478185E7AF3A98F01ECA08F0BA881DBC88BEC60AE8C6F1B1CC5CC55C11A20F676E082BF2D28BB96DB5A8CFB091C767C035B380DB4CBC7D1001EA8BE01663\"\n  }\n}\n</code></pre> Key Purpose JSON key UserId for authentication, case-sensitive, no variations. In the examples, <code>metrics</code> and <code>John Doe</code> are JSON keys. You can use other values for the JSON key. active true or false, set to false to temporarily disable an account. CN Optional: Common name in X500 format. When defined, the name is for display only. You still need to log in using the JSON key as your username. secret The salted and encrypted password you generated. </li> <li> <p>Restart Domino REST API on all servers with this new configuration.</p> </li> </ol>"},{"location":"tutorial/installconfig/configuration/setupfunctionalaccount.html#expected-output","title":"Expected output","text":"<p>Using the examples provided, your <code>tempmanagement.json</code> file might look like the following example JSON structure:</p> <pre><code>  {\n    \"identity\": {\n      \"healthcheckAPI\": {\n        \"John Doe\": {\n          \"active\": true,\n          \"CN\": \"CN=John Doe/O=Mauraders\",\n          \"secret\": \"E4B321EBA91B7F92D9BF5EAFA5322824FEC2287B8A6C133D7C31EFB706A2BA30:1A57478185E7AF3A98F01ECA08F0BA881DBC88BEC60AE8C6F1B1CC5CC55C11A20F676E082BF2D28BB96DB5A8CFB091C767C035B380DB4CBC7D1001EA8BE01663\"\n    }\n      },\n      \"managementAPI\": {\n        \"Doctor Notes\": {\n          \"active\": true,\n          \"secret\": \"E4B321EBA91B7F92D9BF5EAFA5322824FEC2287B8A6C133D7C31EFB706A2BA30:1A57478185E7AF3A98F01ECA08F0BA881DBC88BEC60AE8C6F1B1CC5CC55C11A20F676E082BF2D28BB96DB5A8CFB091C767C035B380DB4CBC7D1001EA8BE01663\"\n    }\n      },\n      \"metricsAPI\": {\n        \"metrics\": {\n          \"active\": true,\n          \"secret\": \"13549ED65AD8760294B9DC898C44F8ABEED399ABB1CA7DC51E8CCFF461D56D13:32BDC8A5DF60FCE424299543DFFF408F500DB1B1EEC4FAB848AA0ED794F5D89AA65A5449EC36BF9CBF53980E4B7DF2B3A3581186E409F5B69BC0C16E51237CC8\"\n    }\n      }\n    }\n  }\n</code></pre> <p>Based on the example, you can log in to the Management console (Port 8889) using the username Doctor Notes, to the Metrics endpoint (Port8890) using the username metrics, and to the Health check (Port 8886) using the username John Doe. You have to use the password corresponding to the salted password you configured for each username.</p> <p>For more information, see Functional accounts.</p>"},{"location":"tutorial/installconfig/configuration/setupfunctionalaccount.html#next-step","title":"Next step","text":"<p>Proceed to Configure JWT.</p>"},{"location":"tutorial/installconfig/install/index.html","title":"Install Domino REST API","text":"<p>Guides you through the procedures for installing Domino REST API.</p>"},{"location":"tutorial/installconfig/install/index.html#installation-steps","title":"Installation steps","text":"<ol> <li> <p>Check system requirements</p> <p>Before starting the installation, make sure that you check the system requirements.</p> </li> <li> <p>Download Domino REST API</p> </li> </ol> <ol> <li> <p>Install Domino REST API on:</p> <ul> <li>Domino Server on Linux</li> <li>Domino Server or Notes Client on Windows</li> <li>Notes Client on macOS</li> <li>Domino Server on Docker</li> </ul> </li> </ol>"},{"location":"tutorial/installconfig/install/index.html#additional-references","title":"Additional references","text":"<p>The following references provide useful information necessary in the installation of Domino REST API.</p>"},{"location":"tutorial/installconfig/install/index.html#installation-command-parameters","title":"Installation command parameters","text":"<p>The table shows the command parameters used when installing Domino REST API on Linux, Windows, or macOS. You can find the short and full versions of the parameters, their description, and whether they're mandatory or not.</p> Expand to see the explanation of the installation command parameters Short Full\u00a0parameter\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>-d</code> <code>--dataDir=&lt;dataDir&gt;</code> Directory of your HCL Notes or Domino data.Mandatory <code>-i</code> <code>--ini=&lt;notesIni&gt;</code> HCL Notes/Domino notes.ini file.Mandatory <code>-r</code> <code>--restapiDir=&lt;restapiDir&gt;</code> Directory to install the Domino REST API files into.Mandatory <code>-p</code> <code>--programDir=&lt;programDir&gt;</code> Directory where HCL Notes or Domino is installed.Mandatory <code>-u</code> <code>--upgrade</code> Performs an upgrade from a previous version. Upgrade will remove known program files and libraries from the Domino REST API directory and install the new version into the same directory. <code>-f</code> <code>--forceUpgrade</code> Performs an upgrade without regard to the previous version. If an unknown version or unexpected files are found in the Domino REST API directory, this option will delete the entire contents of the Domino REST API directory and subdirectories first before installing the new version. <code>-a</code> <code>--accept</code> Automatically accepts terms &amp; conditions. <code>-h</code> <code>--help</code> Shows help message and exits. <code>-n</code> <code>--noIniUpdates</code> Installs the files, shows updated ini entries, but doesn't write them out. <code>-o</code> <code>--oneTouchInstall</code> If installing Domino REST API as part of a Domino One Touch Install, use this option to prevent checking for Notes / Domino directories and notes.ini. <code>-y</code> <code>--dryRun</code> Doesn't actually copy or alter files and settings. <code>-s</code> <code>--skipDirectoryCheck</code> Skips the checks if the program and data directories contain Notes or Domino. <code>-V</code> <code>--version</code> Prints version information and exits."},{"location":"tutorial/installconfig/install/index.html#use-of-response-file","title":"Use of response file","text":"<p>Instead of providing all parameters on the command line, the Domino REST API installer can be called using a response file:</p> <pre><code>[sudo] java -jar restapiInstaller.jar @responses.txt\n</code></pre> <p>The file contains one parameter per line. Lines starting with <code>#</code> get ignored. Variables with <code>\\</code> need to be escaped <code>\\\\</code>:</p> <pre><code># Sample of an installer response file\n--dataDir=D:\\\\Domino\\\\data\n--ini=D:\\\\Domino\\\\data\\\\notes.ini\n--restapiDir=C:\\\\Program Files\\\\HCL\\\\restapi\n--programDir=C:\\\\Program Files\\\\HCL\\\\Domino\n--accept\n</code></pre>"},{"location":"tutorial/installconfig/install/index.html#installation-return-codes","title":"Installation return codes","text":"<p>The table shows the installation return codes and their corresponding explanation.</p> Expand to see the installation return codes Code Explanation 0 Operation completed with no known error. 1 License not accepted. 2 Installation type could not be determined or is not supported. 3 Check for / creation of installation directories failed. 4 Extraction of Domino REST API binaries and JARs failed. 5 Creation of start script/cmd failed. 6 Update of <code>notes.ini</code> failed. 7 Upgrade aborted by user (missed the final A before proceeding with the upgrade).To address the issue, make sure to type A before pressing [Enter] to proceed with the upgrade."},{"location":"tutorial/installconfig/install/docker.html","title":"Docker","text":""},{"location":"tutorial/installconfig/install/docker.html#run-domino-rest-api-with-a-docker-image","title":"Run Domino REST API with a Docker image","text":"<p>The Domino REST API Docker image is built on top of an HCL Domino Docker image, inspired by the open source templates. All configuration options found there can be applied to the Domino REST API Docker image. You will need to decide if you want to run a standalone server or an additional server in an existing Domino domain.</p> <p>Tip</p> <p>The Domino REST API Docker image contains a Domino server. You don't need a separate Domino installation. The image is completely self contained. Domino REST API is a Domino service, using the network free C API. So there is no scenario where an \"only Domino REST API\" container would work.</p>"},{"location":"tutorial/installconfig/install/docker.html#before-you-begin","title":"Before you begin","text":"<p>Running Domino REST API with a Docker image requires the following:</p> <ul> <li> <p>Docker Desktop</p> <p>A Docker installation, both Docker (for servers) or Docker Desktop are suitable. Download and install Docker Desktop for your environment (Linux, Windows or macOS).</p> <p>Docker Desktop License</p> <p>Docker desktop recently became subject to a Docker subscription, make sure you are compliant or use the command line.</p> </li> <li> <p>Docker Compose</p> <p>When you install a Docker Desktop version (Windows, macOS), Docker compose is already included. For servers, it's an additional install.</p> </li> <li> <p>Domino REST API Docker image.</p> <p>Download the image as an archive file from My HCLSoftware Portal . For more information, see Download Domino REST API.</p> <p>Important</p> <ul> <li> <p>If using a Docker image from HCL Container Repository (Harbor) , take note of the image name of the latest Docker image version from Harbor indicated in What's New of a release, update the CONTAINER_IMAGE variable in the .env file, and then execute docker-compose.</p> </li> <li> <p>If prompted for access to HCL Container Repository (Harbor), obtain your HCL Container Repository username and password, and then sign-in using <code>docker login hclcr.io</code> command and the obtained credentials.  </p> </li> </ul> </li> <li> <p>Docker compose file</p> <p>Download the file from downloadable resources. Select the matching one for either a standalone primary or an additional server.</p> </li> <li> <p><code>.env</code> file.</p> <p>Download the <code>sample.env</code> from downloadable resources. Rename the file to <code>.env</code>.</p> </li> <li> <p>A valid Domino server id, when you want to run an additional server in your existing domain.</p> </li> </ul>"},{"location":"tutorial/installconfig/install/docker.html#store-files-in-a-folder","title":"Store files in a folder","text":"<p>Store the following files in a folder:</p> <ul> <li> <p>server id</p> <p>Make sure that your server id file is named <code>server.id</code>.</p> </li> <li> <p>docker-compose.yml</p> <p>Rename the compose file you downloaded from resources to <code>docker-compose.yml</code>.</p> <p>Note</p> <p>You can configure multiple Domino servers in a single compose file. For details, check the Docker compose documentation. With Domino REST API in mind, each server needs its own volume.</p> </li> <li> <p>.env</p> <p>Edit the <code>.env</code> file from resources to update your values. For more information, see Update .env file.</p> </li> </ul>"},{"location":"tutorial/installconfig/install/docker.html#load-docker-image","title":"Load Docker image","text":"<p>For docker image from My HCLSoftware Portal</p> <p>Load the docker image that you've downloaded from Before you begin. Make sure you extract the tar.gz file  first.</p> <pre><code>docker load -i [name_of_tar_file].tar\n</code></pre> <p>After loading the image, note the image name that was output. You need the image name to update the <code>CONTAINER_IMAGE</code> variable in the <code>.env</code> file.</p> <p>Example loaded image name:</p> <ul> <li>From earlier releases: <code>docker.qs.hcllabs.net/hclcom/projectkeep-r12:1.10.0</code></li> <li>Starting v1.0.7 release: <code>domino-rest-api:1.0.7</code></li> </ul> <p>For docker image from HCL Container Repository (Harbor)</p> <p>Take note of the image name of the latest docker image version for docker compose .env file from Harbor indicated in What's New of a release version. You need the image name to update the <code>CONTAINER_IMAGE</code> variable in the <code>.env</code> file.</p> <p>Example image name:</p> <p><code>hclcr.io/domino/restapi:1.0.6</code></p>"},{"location":"tutorial/installconfig/install/docker.html#update-env-file","title":"Update .env file","text":"<p>Depending on the compose file you choose, a different set of variables needs to be replaced. If a variable isn't in the compose file, you don't need it. We keep the variable names in sync with One-touch Domino setup, thus in the compose file you will find gems like <code>SERVERSETUP_SERVER_NAME: \"${SERVERSETUP_SERVER_NAME}\"</code>. This makes naming of variables consistent.</p> <p>Tip</p> <p>Refer to the official List of One-touch environment variables for reference.</p> <p>To update the variables in the compose file, update the variables in the <code>.env</code> file with your values. Replace all values after the equal <code>=</code> sign. Refer to the table of variables for guidance on the variables, their example values, and additional information.</p> Expand to see the table of variables Variable Example CONTAINER_HOSTNAME domino.acme.com Tip: Use something local for local testing CONTAINER_IMAGE docker.qs.hcllabs.net/hclcom/projectkeep-r12:1.10.0 (example name for docker image from My HCLSoftware Portal from earlier release)domino-rest-api:1.0.7 (example name for docker image from My HCLSoftware Portal starting v1.0.7 release)hclcr.io/domino/restapi:1.0.6 (example name for docker image from Harbor)Remarks:For docker image downloaded from My HCLSoftware Portal, update based on the name of the loaded image, such as the example shown above, or use <code>docker images ls</code> to see the exact image name. For docker image downloaded from Harbor, update based on the image name of the latest docker image version for docker compose .env file from Harbor indicated in What's New of a release. CONTAINER_NAME domino-keep-test02 CONTAINER_VOLUMES domino_keep_notesdataRemarks:No spaces or special characters SERVERSETUP_ADMIN_CN Peter Parker SERVERSETUP_ADMIN_FIRSTNAME Paul SERVERSETUP_ADMIN_LASTNAME Herbert SERVERSETUP_ADMIN_PASSWORD domin4ever SERVERSETUP_EXISTINGSERVER_CN domino01Remarks:Your existing server SERVERSETUP_EXISTINGSERVER_HOSTNAMEORIP 10.45.10.3Remarks:Must be reachable and can use DNS too SERVERSETUP_NETWORK_HOSTNAME keep01.domino.acme.comRemarks:Must resolve SERVERSETUP_ORG_CERTIFIERPASSWORD supersecret SERVERSETUP_ORG_ORGNAME Stark IndustriesRemarks:Your existing org SERVERSETUP_SERVER_DOMAINNAME MarvelPhase4Remarks:Your existing Notes domain SERVERSETUP_SERVER_NAME keep-server-01 SERVERSETUP_SERVER_SERVERTASKS replica, router, update, amgr, adminp, http, keepRemarks:Refer to the Domino REST API task page."},{"location":"tutorial/installconfig/install/docker.html#run-domino-rest-api","title":"Run Domino REST API","text":"<p>Start Domino REST API using <code>docker-compose</code> on all supported platforms by running the following command:</p> <pre><code>docker-compose up\n</code></pre> <p>Note</p> <ul> <li>Start in the directory where the files <code>server.id</code> and <code>docker-compose.yml</code> are located.</li> <li> <p>The setup can take a few minutes, depending on your hardware and the network speed to your primary server.</p> </li> <li> <p>If prompted for access credentials to HCL Container Repository (Harbor), see Obtain authentication token from HCL Container Repository.</p> </li> </ul> <p>Tip</p> <p>When you don't have DNS setup, amend your <code>hosts</code> file for name resolution:</p> <ul> <li><code>/etc/hosts</code> on Linux or macOS</li> <li><code>C:\\Windows\\System32\\drivers\\etc\\hosts</code> on Windows</li> </ul> <ul> <li>You can then use Docker desktop to start/stop the container.</li> <li>Use <code>docker-compose up -d</code> to run docker in the background.</li> <li>Don't run two Domino REST API containers sharing the same volume at the same time, alternate (such as debug/non-debug) or with 2 different volumes is OK.</li> </ul>"},{"location":"tutorial/installconfig/install/docker.html#validation","title":"Validation","text":"<p>To validate that an instance is successfully running on a container:</p> <ul> <li> <p>A Docker container should be created and running on your Docker machine. To check that the container is up, run the following command on a terminal:</p> <pre><code>docker ps\n</code></pre> </li> <li> <p>The container should be accessible via</p> <pre><code>docker exec -it $containername /bin/bash\n</code></pre> </li> <li> <p>Domino should be accessible on <code>http://$host:80</code> (might need configuration).</p> </li> <li>Domino REST API should be accessible on <code>http://$host:8880</code>.</li> <li>Domino REST API Management should be accessible on <code>http://$host:8889</code>.</li> <li>Metrics should be accessible on <code>http://$host:8890/metrics</code>.</li> </ul>"},{"location":"tutorial/installconfig/install/docker.html#additional-information","title":"Additional information","text":""},{"location":"tutorial/installconfig/install/docker.html#persistent-volume","title":"Persistent volume","text":"<p>A Domino server uses one persistent volume to store its data. This volume also stores log files and the server\u2019s ID file. When you remove the container, that volume remains and is reused when you start a new container instance.</p> <p></p> <p>Note</p> <p>When you want to run multiple servers, create separate volumes for each. DO NOT share volumes between running instances.</p>"},{"location":"tutorial/installconfig/install/docker.html#alternate-docker-configuration","title":"Alternate Docker configuration","text":"<p>When you run your Domino servers on Linux, you probably use the Nashcom startup script for Domino. On this foundation, the GitHub.com hosted Domino Docker project offers management scripts that allows easy management of your Docker container using a command <code>domino_container</code>.</p> <p>Installation steps are as follows:</p> <ol> <li> <p>Clone the domino-docker repository: <code>git clone https://github.com/HCL-TECH-SOFTWARE/domino-container</code></p> </li> <li> <p>Change into the installation directory: <code>cd start_script</code></p> </li> <li> <p>Run the installer: <code>./install_domino_container</code></p> <p>Note</p> <p>You might need <code>sudo</code> to run the installer.</p> </li> </ol> <p>Now you have the command <code>domino_container</code> at your disposal:</p> <ul> <li>Use <code>domino_container cfg</code> to set your configuration.</li> <li>Use <code>domino_container env</code> for the environment values.</li> <li>Start Domino and Domino REST API using <code>domino_container start</code>.</li> <li>Learn more about the scripts using <code>domino_container help</code>.</li> </ul>"},{"location":"tutorial/installconfig/install/docker.html#next-step","title":"Next step","text":"<p>Perform post-installation tasks.</p> <p>.</p>"},{"location":"tutorial/installconfig/install/downloaddrapi.html","title":"Download Domino REST API","text":""},{"location":"tutorial/installconfig/install/downloaddrapi.html#overview","title":"Overview","text":"<p>Domino REST API uses a Java-based installer, except for Docker, which uses a container image. You can download the installer and the Docker image from the My HCLSoftware Portal.</p>"},{"location":"tutorial/installconfig/install/downloaddrapi.html#installation-files","title":"Installation files","text":"<p>Starting Domino REST API v1.0.9, there are four installation files available for download. Two files for Domino 12 and two files for Domino 14.</p> <p>For example:</p> <p>For Domino 12</p> <ul> <li><code>Domino_REST_API_V1.0.9_R12_Docker.tar.gz</code></li> <li><code>Domino_REST_API_V1.0.9_R12_Installer.tar.gz</code></li> </ul> <p>For Domino 14</p> <ul> <li><code>Domino_REST_API_V1.0.9_R14_Docker.tar.gz</code></li> <li><code>Domino_REST_API_V1.0.9_R14_Installer.tar.gz</code></li> </ul>"},{"location":"tutorial/installconfig/install/downloaddrapi.html#procedure","title":"Procedure","text":"<ol> <li> <p>Go to My HCLSoftware Portal .</p> </li> <li> <p>On the landing page, click Sign in.</p> </li> <li>On the sign-in page, log in using your credentials.</li> <li>On the Software Downloads page, click HCL Domino.</li> <li>On the HCL Domino page, go to the Tools, Connectors, and Integrators section and click Domino REST API.</li> <li>Under Releases, click the release version you want to download.</li> <li>Under Downloads, click the Direct download icon corresponding to the file you want to download.</li> </ol>"},{"location":"tutorial/installconfig/install/downloaddrapi.html#next-step","title":"Next step","text":"<p>Install Domino REST API on:</p> <ul> <li>Domino Server on Linux</li> <li>Domino Server or Notes Client on Windows</li> <li>Notes Client on macOS</li> <li>Domino Server on Docker</li> </ul>"},{"location":"tutorial/installconfig/install/installdrapi.html","title":"Install Domino REST API","text":""},{"location":"tutorial/installconfig/install/linux.html","title":"Install on Linux Domino server","text":"<p>On Linux, the installer installs the Domino REST APIs for use with an HCL Domino server. It's strongly recommended to use the default directories on Linux.</p> <p>Note</p> <p>Don't install using the <code>java</code> executable in <code>/opt/hcl/domino/bin/</code>. If your system doesn't have Java installed, you can use the <code>java</code> executable in the <code>/opt/hcl/domino/notes/latest/linux/jvm/bin/</code> directory.</p>"},{"location":"tutorial/installconfig/install/linux.html#before-you-begin","title":"Before you begin","text":"<p>Extract the installer jar file from the downloaded tar file by running the following command:</p> <p><code>tar xvf ./&lt;installer file name&gt; --no-same-owner --no-same-permissions</code></p> <p>Example:</p> <p><code>tar xvf ./Domino_REST_API_V1.0.9_R14_Installer.tar.gz --no-same-owner --no-same-permissions</code></p> <p>You may ignore any warning starting with <code>Ignoring unknown extended header keyword</code> while decompressing the tar file.</p> <p>Important</p> <ul> <li>Starting Domino REST API version 1.0.7, the installer jar filename now includes the Domino version, for example, <code>restapiInstall-r12.jar</code>.</li> <li>Starting Domino REST API version 1.0.9, there will be two installer jar files:<ul> <li>For Domino 14, use <code>restapiInstall-r14.jar</code>.</li> <li>For Domino 12, use <code>restapiInstall-r12.jar</code>.</li> </ul> </li> </ul>"},{"location":"tutorial/installconfig/install/linux.html#install-domino-rest-api","title":"Install Domino REST API","text":"<p>Important</p> <p>It is strongly recommended to shut down your Domino server before running the installer. The installer updates the <code>notes.ini</code>, which could conflict with a running Domino server.</p> <p>To install, run the following commands:</p> <pre><code>sudo java -jar &lt;installer jar file name&gt; \\\n -d=\"/local/notesdata\" \\\n -i=\"/local/notesdata/notes.ini\" \\\n -r=\"/opt/hcl/restapi\" \\\n -p=\"/opt/hcl/domino/notes/latest/linux\" \\\n -a\n</code></pre> <p>Example:</p> <pre><code>sudo java -jar restapiInstall-r14.jar \\\n -d=\"/local/notesdata\" \\\n -i=\"/local/notesdata/notes.ini\" \\\n -r=\"/opt/hcl/restapi\" \\\n -p=\"/opt/hcl/domino/notes/latest/linux\" \\\n -a\n</code></pre> Expand to see the explanation of the installation command parameters Short Full\u00a0parameter\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>-d</code> <code>--dataDir=&lt;dataDir&gt;</code> Directory of your HCL Notes or Domino data.Mandatory <code>-i</code> <code>--ini=&lt;notesIni&gt;</code> HCL Notes/Domino notes.ini file.Mandatory <code>-r</code> <code>--restapiDir=&lt;restapiDir&gt;</code> Directory to install the Domino REST API files into.Mandatory <code>-p</code> <code>--programDir=&lt;programDir&gt;</code> Directory where HCL Notes or Domino is installed.Mandatory <code>-u</code> <code>--upgrade</code> Performs an upgrade from a previous version. Upgrade will remove known program files and libraries from the Domino REST API directory and install the new version into the same directory. <code>-f</code> <code>--forceUpgrade</code> Performs an upgrade without regard to the previous version. If an unknown version or unexpected files are found in the Domino REST API directory, this option will delete the entire contents of the Domino REST API directory and subdirectories first before installing the new version. <code>-a</code> <code>--accept</code> Automatically accepts terms &amp; conditions. <code>-h</code> <code>--help</code> Shows help message and exits. <code>-n</code> <code>--noIniUpdates</code> Installs the files, shows updated ini entries, but doesn't write them out. <code>-o</code> <code>--oneTouchInstall</code> If installing Domino REST API as part of a Domino One Touch Install, use this option to prevent checking for Notes / Domino directories and notes.ini. <code>-y</code> <code>--dryRun</code> Doesn't actually copy or alter files and settings. <code>-s</code> <code>--skipDirectoryCheck</code> Skips the checks if the program and data directories contain Notes or Domino. <code>-V</code> <code>--version</code> Prints version information and exits. <p>The installer adds the <code>restapi</code> task to the automatically starting tasks. If opted out using <code>-n</code>, you must manually add the <code>KeepInstallDir</code> key into your <code>notes.ini</code> and then can subsequently issue <code>load restapi</code> manually in the Domino console.</p> <p>For more information, see Domino REST API task.</p>"},{"location":"tutorial/installconfig/install/linux.html#update-environment","title":"Update environment","text":"<ul> <li> <p>The <code>restapi</code> task requires 2 environment variables to be set before launching Domino.</p> </li> <li> <p>Add the following directories to your PATH if not already there:</p> <ul> <li>your notesdata directory</li> <li>the Domino binary directory</li> <li>the res/C directory inside your Domino binary directory.</li> </ul> <p>For example:</p> <p><code>PATH=/local/notesdata:/opt/hcl/domino/notes/latest/linux:/opt/hcl/domino/notes/latest/linux/res/C:$PATH</code></p> </li> <li> <p>Add the following to your LD_LIBRARY_PATH environment variable if not already there:</p> <ul> <li>your Domino binary directory</li> <li>the <code>jvm/bin</code> directory inside your Domino binary directory</li> <li>the <code>jvm/bin/classic</code> directory inside your Domino binary directory</li> </ul> <p>For example:</p> <p><code>LD_LIBRARY_PATH=/opt/hcl/domino/notes/latest/linux:/opt/hcl/domino/notes/latest/linux/jvm/bin:/opt/hcl/domino/notes/latest/linux/jvm/bin/classic:$LD_LIBRARY_PATH</code></p> </li> </ul>"},{"location":"tutorial/installconfig/install/linux.html#check-file-ownership-and-access-rights","title":"Check file ownership and access rights","text":"<p>On Linux, you need to carefully check that your file and directory ownership and access rights are set correctly. The strongly recommended conventions are:</p> <ul> <li>User to run the Domino server: <code>notes</code>.</li> <li>Domino installed in <code>/opt/hcl/domino</code> -&gt; owned by <code>root</code>.</li> <li>Domino REST API installed in <code>/opt/hcl/restapi</code> -&gt; owned by <code>root</code>.</li> <li>Domino data directory <code>/local/notesdata</code> -&gt; owned by <code>notes</code>.</li> <li>Access for files and directories in <code>/opt</code> set to <code>755</code>.</li> <li>Access for directories in <code>/local/notesdata</code> set to <code>770</code>.</li> <li>Access for files in <code>/local/notesdata</code> set to <code>660</code>.</li> <li>NOTE: directories need the execute flag (1), otherwise they can't be accessed, so access for a directory must be an odd number always.</li> <li>Don't set access anywhere to 777.</li> </ul>"},{"location":"tutorial/installconfig/install/linux.html#check-that-domino-rest-api-is-running","title":"Check that Domino REST API is running","text":"<p>The installation, unless told otherwise, added <code>restapi</code> to the <code>servertasks</code> in the <code>notes.ini</code>. You can check on the Domino console if the REST API is running by using <code>sh ta</code>. In case <code>restapi</code> isn't listed as a running task, load it using <code>load restapi</code>. The Domino console will output a message on the success or failure to load.</p>"},{"location":"tutorial/installconfig/install/linux.html#additional-information","title":"Additional information","text":""},{"location":"tutorial/installconfig/install/linux.html#installation-explanation","title":"Installation explanation","text":"<p>The following details explain what happens when installing Domino REST API.</p> <p>A new Domino REST API installation</p> <ul> <li>creates the Domino REST API directory.</li> <li>copies all binary files needed by Domino REST API to that directory.</li> <li>copies <code>restapi</code> into the Domino directory.</li> <li>updates the <code>ServerTasks</code> variable in <code>notes.ini</code> with <code>restapi</code>.</li> <li>adds a variable <code>KeepInstallDir</code> to the <code>notes.ini</code> pointing to the Domino REST API directory.</li> </ul> <p>If there is an existing installation at the location you specified as the <code>restapi</code> directory:</p> <ul> <li> <p>The installer checks for a file in your Domino REST API directory named <code>installerFiles.txt</code>.</p> </li> <li> <p>If this file exists, the installer uses this list as the list of files to remove before proceeding.</p> <ul> <li>If you specified <code>-u</code> on the command line, removal of the old files and installation of the new version are performed.</li> <li>If you didn't specify <code>-u</code>, you will be asked if you want to upgrade. Answering <code>A &lt;enter&gt;</code> continues the removal of the old files and the installation of the new version.</li> </ul> </li> <li> <p>If this file doesn't exist, which it didn't with <code>Domino REST API V1</code>, the installer checks to see if this is V1 by checking for the existence of the <code>keep-core-1.9.5.jar</code> file in the Domino REST API directory.</p> <ul> <li> <p>If this is V1, the installer uses the list of known V1 files before proceeding.</p> <ul> <li>If you specified <code>-u</code> on the command line, old files are removed and installation of the new version is performed.</li> <li>If you didn't specify <code>-u</code>, you'll be asked if you want to upgrade. Answering <code>A &lt;enter&gt;</code> continues the removal of the old files and the installation of the new version. Pressing any other key aborts the process.</li> </ul> </li> <li> <p>If this isn't V1, you are notified that an unknown version has been found, and if you want to proceed, you will need to force an upgrade to continue. Forcing an upgrade removes ALL files from the Domino REST API directory and it's subdirectories, so take care that any files you may have put there will be removed. Domino REST API doesn't store any configuration or user files in the Domino REST API directory, only its runtime and libraries.</p> <ul> <li>If you specified <code>-f</code> on the command line, all files in the Domino REST API directory structure are removed and installation of the new version is performed.</li> <li>If you didn't specify <code>-f</code>, you will be asked if you want to force an upgrade. Answering <code>A &lt;enter&gt;</code> continues the removal of all files in the REST API directory structure and the installation of the new version. Pressing any other key aborts the process.</li> </ul> </li> </ul> </li> </ul>"},{"location":"tutorial/installconfig/install/linux.html#next-step","title":"Next step","text":"<p>Perform post-installation tasks.</p>"},{"location":"tutorial/installconfig/install/mac.html","title":"macOS","text":""},{"location":"tutorial/installconfig/install/mac.html#install-on-macos","title":"Install on macOS","text":"<p>Caution</p> <ul> <li>The Domino server isn't available for macOS, so you can use the Domino REST API only with a Notes client.</li> <li>Notes client support is experimental and not supported for any production use. It's provided to ease evaluation of the Domino REST API and experimentation without the need to configure a Domino server.</li> </ul>"},{"location":"tutorial/installconfig/install/mac.html#before-you-begin","title":"Before you begin","text":"<p>Extract the installer jar file from the downloaded tar file by running the following command:</p> <p><code>tar xvf ./&lt;installer file name&gt; --no-same-owner --no-same-permissions</code></p> <p>Example:</p> <p><code>tar xvf ./Domino_REST_API_V1.0.9_R14_Installer.tar.gz --no-same-owner --no-same-permissions</code></p> <p>You may ignore any warning starting with <code>Ignoring unknown extended header keyword</code> while decompressing the tar file.</p> <p>Important</p> <ul> <li>Starting Domino REST API version 1.0.7, the installer jar filename now includes the Domino version, for example, <code>restapiInstall-r12.jar</code>.</li> <li>Starting Domino REST API version 1.0.9, there will be two installer jar files:<ul> <li>For Domino 14, use <code>restapiInstall-r14.jar</code>.</li> <li>For Domino 12, use <code>restapiInstall-r12.jar</code>.</li> </ul> </li> </ul>"},{"location":"tutorial/installconfig/install/mac.html#install-domino-rest-api","title":"Install Domino REST API","text":"<p>To install, run the following commands:</p> <pre><code>java -jar &lt;installer jar filename&gt; \\\n -d=\"/Users/[your user name]/Library/Application Support/HCL Notes Data\" \\\n -i=\"/Users/[your user name]/Library/Preferences/Notes Preferences\" \\\n -r=\"/Users/[your user name]/Applications/restapi\" \\\n -p=\"/Applications/HCL Notes.app\" \\\n -a\n</code></pre> <p>Example:</p> <pre><code>java -jar restapiInstall-r14.jar \\\n -d=\"/Users/johndoe/Library/Application Support/HCL Notes Data\" \\\n -i=\"/Users/johndoe/Library/Preferences/Notes Preferences\" \\\n -r=\"/Users/johndoe/Applications/restapi\" \\\n -p=\"/Applications/HCL Notes.app\" \\\n -a\n</code></pre> Expand to see the explanation of the installation command parameters Short Full\u00a0parameter\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>-d</code> <code>--dataDir=&lt;dataDir&gt;</code> Directory of your HCL Notes or Domino data.Mandatory <code>-i</code> <code>--ini=&lt;notesIni&gt;</code> HCL Notes/Domino notes.ini file.Mandatory <code>-r</code> <code>--restapiDir=&lt;restapiDir&gt;</code> Directory to install the Domino REST API files into.Mandatory <code>-p</code> <code>--programDir=&lt;programDir&gt;</code> Directory where HCL Notes or Domino is installed.Mandatory <code>-u</code> <code>--upgrade</code> Performs an upgrade from a previous version. Upgrade will remove known program files and libraries from the Domino REST API directory and install the new version into the same directory. <code>-f</code> <code>--forceUpgrade</code> Performs an upgrade without regard to the previous version. If an unknown version or unexpected files are found in the Domino REST API directory, this option will delete the entire contents of the Domino REST API directory and subdirectories first before installing the new version. <code>-a</code> <code>--accept</code> Automatically accepts terms &amp; conditions. <code>-h</code> <code>--help</code> Shows help message and exits. <code>-n</code> <code>--noIniUpdates</code> Installs the files, shows updated ini entries, but doesn't write them out. <code>-o</code> <code>--oneTouchInstall</code> If installing Domino REST API as part of a Domino One Touch Install, use this option to prevent checking for Notes / Domino directories and notes.ini. <code>-y</code> <code>--dryRun</code> Doesn't actually copy or alter files and settings. <code>-s</code> <code>--skipDirectoryCheck</code> Skips the checks if the program and data directories contain Notes or Domino. <code>-V</code> <code>--version</code> Prints version information and exits. <p>The installer creates a <code>runrestapi.sh</code> script in the Domino REST API installation directory. Run it to launch the Domino REST API. You can copy or move the script to <code>~/bin</code> to add it to the macOS path.</p> <p>Tip</p> <p>If your Notes client has an issue when running <code>runrestapi.sh</code>, download and install <code>openJ9</code> SDK and modify the <code>JAVA_HOME</code> variable in the <code>runrestapi.sh</code> to point to your <code>openJ9</code> directory.</p>"},{"location":"tutorial/installconfig/install/mac.html#limitations-to-client-use","title":"Limitations to client use","text":"<ul> <li>Use is for evaluation only, don't use for production.</li> <li>You can't run the Notes client while you are running the Domino REST API against your local Notes install.</li> <li> <p>The Notes client must have the Don't prompt for a password from other Notes-based programs option set. This option is in the Security\u00a0\u2192\u00a0User Security menu.</p> <p></p> </li> <li> <p>If your organization has a policy to disable the Don't prompt for a password from other Notes-based programs, you may need to go into Notes, disable and immediately quit Notes. Next time you go into Notes, this setting will be again disabled.</p> </li> <li>On the first time run of <code>runrestapi</code>, even with Don't prompt for a password from other Notes-based programs set, you may be prompted to enter your Notes password in the java window that the Domino REST API is running in. Even if the message prompt has scrolled, you can type in your password and Enter. Notes is prompting because Domino REST API is creating 2 databases needed to run the API.</li> </ul> <p>For more information, see Deploy HCL Domino REST API to HCL Notes Client for additional steps required to use the Notes client.</p>"},{"location":"tutorial/installconfig/install/mac.html#additional-information","title":"Additional information","text":""},{"location":"tutorial/installconfig/install/mac.html#installation-explanation","title":"Installation explanation","text":"<p>The following details explain what happens when installing Domino REST API.</p> <p>A new Domino REST API installation</p> <ul> <li>creates the Domino REST API directory.</li> <li>copies all binary files needed by Domino REST API to that directory.</li> <li>creates <code>runrestapi.sh</code> in the Domino REST API directory.</li> </ul> <p>If an exiting installation is found at the location you specified as the <code>restapi</code> directory:</p> <ul> <li> <p>The installer checks for a file in your Domino REST API directory named <code>installerFiles.txt</code>.</p> </li> <li> <p>If this file exists, the installer will use this list as the list of files to remove before proceeding.</p> <ul> <li>If you specified <code>-u</code> on the command line, removal of the old files and installation of the new version are performed.</li> <li>If you didn't specify <code>-u</code>, you will be asked if you want to upgrade. Answering <code>A &lt;enter&gt;</code> continues removal of the old files and the installation of the new version.</li> </ul> </li> <li> <p>If this file doesn't exist, which it didn't with <code>Domino REST API V1</code>, the installer checks if this is V1 by checking for the existence of the <code>keep-core-1.9.5.jar</code> file in the Domino REST API directory.</p> <ul> <li> <p>If this is V1, the installer uses the list of known V1 files before proceeding.</p> <ul> <li>If you specified <code>-u</code> on the command line, removal of the old files and installation of the new are performed.</li> <li>If you didn't specify <code>-u</code>, you will be asked if you want to upgrade. Answering <code>A &lt;enter&gt;</code> continues removal of the old files and installation of the new version. Pressing any other key aborts.</li> </ul> </li> <li> <p>If this isn't V1, you will be notified that an unknown version has been found, and if you want to proceed, you will need to force an upgrade to continue. Forcing an upgrade removes ALL files from the Domino REST API directory and it's subdirectories, so take care that any files you may have put there will be removed. Domino REST API doesn't store any configuration or user files in the Domino REST API directory, only it's runtime and libraries.</p> <ul> <li>If you specified <code>-f</code> on the command line, all files in the Domino REST API directory structure are removed and installation of the new version is performed.</li> <li>If you didn't specify <code>-f</code>, you will be asked if you want to force an upgrade. Answering <code>A &lt;enter&gt;</code> continues removal of all files in the REST API directory structure and installation of the new version is performed. Pressing any other key aborts.</li> </ul> </li> </ul> </li> </ul>"},{"location":"tutorial/installconfig/install/win.html","title":"Windows","text":""},{"location":"tutorial/installconfig/install/win.html#install-on-windows","title":"Install on Windows","text":"<p>Caution</p> <ul> <li>Domino REST API is supported for installation on Windows with an HCL Notes client or an HCL Domino server, but not both on the same machine. </li> <li>Notes client support is experimental and not supported for any production use. It is provided to ease evaluation of the Domino REST API and experimentation without the need to configure a Domino server.</li> </ul>"},{"location":"tutorial/installconfig/install/win.html#before-you-begin","title":"Before you begin","text":"<ul> <li> <p>Domino must be installed.</p> </li> <li> <p>Domino REST API installer needs to be run as administrator.</p> </li> <li> <p>Extract the installer jar file from the downloaded tar file. Newer versions of Windows support the extraction through the Windows File Explorer. Also, most third-party compression utilities support extracting a tar file. Consult your third-party tool documentation for more information.</p> </li> </ul> <p>You may ignore any warning starting with <code>Ignoring unknown extended header keyword</code> while decompressing the tar file.</p> <p>Important</p> <ul> <li>Starting Domino REST API version 1.0.7, the installer jar filename now includes the Domino version, for example, <code>restapiInstall-r12.jar</code>.</li> <li>Starting Domino REST API version 1.0.9, there will be two installer jar files:<ul> <li>For Domino 14, use <code>restapiInstall-r14.jar</code>.</li> <li>For Domino 12, use <code>restapiInstall-r12.jar</code>.</li> </ul> </li> </ul>"},{"location":"tutorial/installconfig/install/win.html#install-on-windows-domino-server","title":"Install on Windows Domino server","text":"<p>Important</p> <p>It is strongly recommended to shut down your Domino server before running the installer. The installer updates the <code>notes.ini</code>, which could conflict with a running Domino server.</p> <p>To install, run the following commands:</p> <pre><code>java -jar &lt;installer jar filename&gt; ^\n -d=\"C:\\Program Files\\HCL\\Domino\\Data\" ^\n -i=\"C:\\Program Files\\HCL\\Domino\\notes.ini\" ^\n -p=\"C:\\Program Files\\HCL\\Domino\" ^\n -r=\"C:\\Program Files\\HCL\\Domino\\restapi\" ^\n -a\n</code></pre> <p>Example:</p> <pre><code>java -jar restapiInstall-r14.jar ^\n -d=\"C:\\Program Files\\HCL\\Domino\\Data\" ^\n -i=\"C:\\Program Files\\HCL\\Domino\\notes.ini\" ^\n -p=\"C:\\Program Files\\HCL\\Domino\" ^\n -r=\"C:\\Program Files\\HCL\\Domino\\restapi\" ^\n -a\n</code></pre> Expand to see the explanation of the installation command parameters Short Full\u00a0parameter\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Description <code>-d</code> <code>--dataDir=&lt;dataDir&gt;</code> Directory of your HCL Notes or Domino data.Mandatory <code>-i</code> <code>--ini=&lt;notesIni&gt;</code> HCL Notes/Domino notes.ini file.Mandatory <code>-r</code> <code>--restapiDir=&lt;restapiDir&gt;</code> Directory to install the Domino REST API files into.Mandatory <code>-p</code> <code>--programDir=&lt;programDir&gt;</code> Directory where HCL Notes or Domino is installed.Mandatory <code>-u</code> <code>--upgrade</code> Performs an upgrade from a previous version. Upgrade will remove known program files and libraries from the Domino REST API directory and install the new version into the same directory. <code>-f</code> <code>--forceUpgrade</code> Performs an upgrade without regard to the previous version. If an unknown version or unexpected files are found in the Domino REST API directory, this option will delete the entire contents of the Domino REST API directory and subdirectories first before installing the new version. <code>-a</code> <code>--accept</code> Automatically accepts terms &amp; conditions. <code>-h</code> <code>--help</code> Shows help message and exits. <code>-n</code> <code>--noIniUpdates</code> Installs the files, shows updated ini entries, but doesn't write them out. <code>-o</code> <code>--oneTouchInstall</code> If installing Domino REST API as part of a Domino One Touch Install, use this option to prevent checking for Notes / Domino directories and notes.ini. <code>-y</code> <code>--dryRun</code> Doesn't actually copy or alter files and settings. <code>-s</code> <code>--skipDirectoryCheck</code> Skips the checks if the program and data directories contain Notes or Domino. <code>-V</code> <code>--version</code> Prints version information and exits. <p>The installer adds the <code>restapi</code> task to the automatically starting tasks. If opted out using <code>-n</code>, you must manually add the <code>KeepInstallDir</code> key into your <code>notes.ini</code> and then can subsequently issue <code>load restapi</code> manually in the Domino console.</p> <p>For more information, see Domino REST API task.</p> <p>Domino REST API and Domino 14</p> <p>The Domino REST API installer starting with v1.0.9 has a workaround for an issue between Domino REST API and Domino 14.0 on Windows. For more information or if you receive an error during installation, see Create symlink for Domino 14 and Domino Rest API.</p>"},{"location":"tutorial/installconfig/install/win.html#install-on-windows-notes-client","title":"Install on Windows Notes client","text":"<p>To install, run the following commands:</p> <pre><code>java -jar &lt;installer jar filename&gt; ^\n -d=\"C:\\Program Files\\HCL\\Notes\\Data\" ^\n -i=\"C:\\Program Files\\HCL\\Notes\\notes.ini\" ^\n -r=\"C:\\Program Files\\HCL\\Notes\\restapi\" ^\n -p=\"C:\\Program Files\\HCL\\Notes\" ^\n -a\n</code></pre> <p>Example:</p> <pre><code>java -jar restapiInstall-r14.jar ^\n -d=\"C:\\Program Files\\HCL\\Notes\\Data\" ^\n -i=\"C:\\Program Files\\HCL\\Notes\\notes.ini\" ^\n -r=\"C:\\Program Files\\HCL\\Notes\\restapi\" ^\n -p=\"C:\\Program Files\\HCL\\Notes\" ^\n -a\n</code></pre> <p>The installer creates a <code>runrestapi.cmd</code> script in the Domino REST API installation directory. Run the script to launch the Domino REST API.</p>"},{"location":"tutorial/installconfig/install/win.html#limitations-to-client-use","title":"Limitations to client use","text":"<ul> <li>Use is for evaluation only, don't use for production.</li> <li>You can't run the Notes client while you are running the Domino REST API against your local Notes install.</li> <li> <p>The Notes client must have the Don't prompt for a password from other Notes-based programs option set. This option is in the Security\u00a0\u2192\u00a0User Security menu.</p> <p></p> </li> <li> <p>If your organization has a policy to disable the Don't prompt for a password from other Notes-based programs, you may need to go into Notes, disable and immediately quit Notes. Next time you go into Notes, this setting will be again disabled.</p> </li> <li>On the first time run of <code>runrestapi</code>, even with Don't prompt for a password from other Notes-based programs set, you may be prompted to enter your Notes password in the java window that the Domino REST API is running in. Even if the message prompt has scrolled, you can type in your password and Enter. Notes is prompting because Domino REST API is creating 2 databases needed to run the API.</li> </ul> <p>For more information, see Deploy HCL Domino REST API to HCL Notes Client for additional steps required to use the Notes client.</p>"},{"location":"tutorial/installconfig/install/win.html#check-that-domino-rest-api-is-running","title":"Check that Domino REST API is running","text":"<p>The installation, unless told otherwise, added <code>restapi</code> to the <code>servertasks</code> in the <code>notes.ini</code>. You can check on the Domino console if the REST API is running by using <code>sh ta</code>. In case <code>restapi</code> isn't listed as a running task, load it using <code>load restapi</code>. The Domino console will output a message on the success or failure to load.</p>"},{"location":"tutorial/installconfig/install/win.html#additional-information","title":"Additional information","text":""},{"location":"tutorial/installconfig/install/win.html#installation-explanation-on-windows-domino-server","title":"Installation explanation on Windows Domino server","text":"<p>The following details explain what happens when installing Domino REST API.</p> <p>A new Domino REST API installation</p> <ul> <li>creates the Domino REST API directory (if necessary).</li> <li>copies all binary files needed by Domino REST API to that directory.</li> <li>copies <code>restapi</code> into the Domino directory.</li> <li>updates the <code>ServerTasks</code> variable in <code>notes.ini</code> with <code>restapi</code>.</li> <li>adds the variable <code>KeepInstallDir</code> to the <code>notes.ini</code> pointing to the Domino REST API directory.</li> </ul> <p>If there is an existing installation at the location you specified as the <code>restapi</code> directory:</p> <ul> <li> <p>The installer checks for a file in your Domino REST API directory named <code>installerFiles.txt</code>.</p> </li> <li> <p>If this file exists, the installer uses this list as the list of files to remove before proceeding.</p> <ul> <li>If you specified <code>-u</code> on the command line, removal of the old files and installation of the new version are performed.</li> <li>If you didn't specify <code>-u</code>, you will be asked if you want to upgrade. Answering <code>A &lt;enter&gt;</code> continues the removal of the old files and the installation of the new version.</li> </ul> </li> <li> <p>If this file doesn't exist, which it didn't with <code>Domino REST API V1</code>, the installer checks if this is V1 by checking for the existence of the <code>keep-core-1.9.5.jar</code> file in the Domino REST API directory.</p> <ul> <li> <p>If this is V1, the installer will use the list of known V1 files before proceeding.</p> <ul> <li>If you specified <code>-u</code> on the command line, removal of the old files and installation of the new version are performed.</li> <li>If you didn't specify <code>-u</code>, you will be asked if you want to upgrade. Answering <code>A &lt;enter&gt;</code> continues removal of the old files and installation of the new version. Pressing any other key aborts.</li> </ul> </li> <li> <p>If this isn't V1, you will be notified that an unknown version has been found, and if you want to proceed, you will need to force an upgrade to continue. Forcing an upgrade removes ALL files from the Domino REST API directory and it's subdirectories, so take care that any files you may have put there will be removed. Domino REST API doesn't store any configuration or user files in the Domino REST API directory, only it's runtime and libraries.</p> <ul> <li>If you specified <code>-f</code> on the command line, all files in the Domino REST API directory structure are removed and installation of the new version is performed.</li> <li>If you didn't specify <code>-f</code>, you will be asked if you want to force an upgrade. Answering <code>A &lt;enter&gt;</code> continues removal of all files in the REST API directory structure and the installation of the new version. Pressing any other key aborts.</li> </ul> </li> </ul> </li> </ul>"},{"location":"tutorial/installconfig/install/win.html#installation-explanation-on-windows-notes-client","title":"Installation explanation on Windows Notes client","text":"<p>The following details explain what happens when installing Domino REST API.</p> <p>The installer conducts a series of actions:</p> <ul> <li>Create the Domino REST API directory.</li> <li>Copy all binary files needed by Domino REST API to that directory.</li> <li>Create <code>runrestapi.cmd</code> in the Domino REST API directory.</li> </ul>"},{"location":"tutorial/installconfig/install/win.html#next-step","title":"Next step","text":"<p>Perform post-installation tasks.</p>"},{"location":"tutorial/odata/index.html","title":"OData","text":"<p>OData, an open standard protocol for REST. It has been adopted by:</p> <ul> <li>SAP</li> <li>Salesforce</li> <li> <p>Microsoft</p> <ul> <li>MS Excel (Windows and Mac)</li> <li>MS PowerBI</li> </ul> </li> <li> <p>HCL Volt MX</p> </li> </ul> <p>The Domino REST API allows Domino data to be exposed following the OData standard. These are the preparation steps required.</p>"},{"location":"tutorial/odata/index.html#prepare-odata-access","title":"Prepare OData access","text":"<p>Access is on a per form basis</p> <ul> <li>create schema &amp; scope</li> <li>pick form in schema</li> <li>create mode <code>odata</code></li> </ul>"},{"location":"tutorial/odata/index.html#validate-odata-access","title":"Validate OData access","text":"<ul> <li>Landing page</li> <li>postman endpoints</li> </ul>"},{"location":"tutorial/odata/index.html#whats-next","title":"What's next","text":"<p>Continue this tutorial for your use case:</p> <ul> <li> <p>OData in Excel</p> </li> <li> <p>OData in Salesforce</p> </li> </ul>"},{"location":"tutorial/odata/excel.html","title":"Access Domino OData in MS-Excel","text":"<p>The Domino REST API allows exporting of data from Notes databases to OData format, which can then be read by applications like Excel for Windows and Mac, Salesforce, SAP and Business Intelligence. This means that the data in a Notes database can be displayed in something as simple as Excel with just a few clicks.</p>"},{"location":"tutorial/odata/excel.html#for-windows","title":"For Windows","text":"<ol> <li>Open Microsoft Excel<sup>1</sup> and create a Blank Workbook.</li> <li> <p>Select Data \u2192 Get Data \u2192 From Other Sources \u2192 From ODataFeed.</p> <p></p> </li> <li> <p>Point it to an application on the Domino server. In the example, it's pointed to a To-do application.</p> <p></p> </li> <li> <p>Click OK.</p> <p></p> </li> <li> <p>Select Load to display the Notes data in Excel. The structure of the Notes database is understood.</p> <p></p> </li> </ol>"},{"location":"tutorial/odata/excel.html#for-mac","title":"For Mac","text":"<ol> <li>Open Microsoft Excel<sup>1</sup> and create a Blank Workbook.</li> <li> <p>Go to Data\u00a0\u2192\u00a0Get Data (Power Query)\u00a0\u2192\u00a0Other, and then select OData.</p> <p></p> </li> <li> <p>For Connection settings, enter your Domino REST API OData endpoint to the URL field.</p> <p>For example: <code>https://restapi.myhost.com/api/v1/odata/scopename</code></p> <p>where:</p> <ul> <li><code>https://restapi.myhost.com</code> should be replaced with your Domino REST API host</li> <li><code>scopename</code> should be replaced with the name of your specific Domino REST API database</li> </ul> </li> <li> <p>For Connection credentials, set Authentication kind to Basic and enter your Domino REST API username and password to the corresponding Username and Password fields.</p> <p></p> </li> <li> <p>Click Next.</p> </li> <li> <p>Select the form you wish to load and a preview of the Excel table is shown on the right side.</p> <p></p> </li> <li> <p>Click Load. You can now see the Notes data in your workbook.</p> <p>Loading of Notes data might take a while depending on the number of rows.</p> <p></p> </li> </ol> <p>Info</p> <ul> <li>The Excel sheet is a live document. Any update to the Notes database is seen when you click Refresh.</li> <li>At the moment, only basic authentication is supported.</li> </ul>"},{"location":"tutorial/odata/excel.html#additional-information","title":"Additional information","text":"<p>OData feed for MS Excel is read-only, if you want to read and write using MS Excel, you can try out Virtual Spreadsheet.</p> <ol> <li> <p>Microsoft and Excel are registered trademarks or trademarks of Microsoft Corporation in the United States and/or other countries.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"tutorial/odata/salesforce.html","title":"Domino data with Salesforce","text":"<p>Domino data can be read/written with Salesforce.</p> <p> </p>"},{"location":"tutorial/walkthrough/index.html","title":"Domino REST API Walkthrough","text":"<p>This workshop is designed for a duration of 3.5 h (210 min) and covers the use and configuration of the Domino REST API using:</p> <ul> <li>Command line</li> <li>POSTMAN (or your favorite REST client)</li> <li>Domino REST AdminUI</li> <li>Code examples</li> </ul>"},{"location":"tutorial/walkthrough/index.html#agenda","title":"Agenda","text":"<p>See the menu on the left for the sequence.</p>"},{"location":"tutorial/walkthrough/index.html#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>A running Domino server with the Domino REST API installed on one of the following:</p> <ul> <li>on your local machine</li> <li>a remote server (note: you need OS access there)</li> <li>in a virtual machine</li> <li>in a (Docker) container using the the Domino REST API Container image</li> </ul> </li> <li> <p>Postman installed</p> </li> <li> <p>CURL installed</p> </li> <li> <p>An IDE, like Eclipse or Visual Studio Code, installed</p> </li> <li> <p>NodeJS (LTS Version) if you want to complete the JavaScript exercises</p> </li> <li> <p>JDK (&gt;= 8) if you want to complete the Java exercises</p> </li> <li>Internet connection</li> <li>Optional (but you want out of curiosity): Domino Designer installed</li> </ul> <p>Don't use a production server</p> <p>We will mess with settings, so you don't want to work on a production system. A temporary local server will do.</p>"},{"location":"tutorial/walkthrough/index.html#skills","title":"Skills","text":"<ul> <li>Understanding of Domino</li> <li>Understanding of Containers (optional)</li> <li>Understanding what an API is</li> <li>Ability to use the command line (preferably with <code>curl</code>)</li> <li>For the code exercises:<ul> <li>experience in Java programming</li> <li>experience with JavaScript and NodeJS</li> </ul> </li> </ul>"},{"location":"tutorial/walkthrough/downloadindex.html","title":"Downloads","text":""},{"location":"tutorial/walkthrough/downloadindex.html#downloads","title":"Downloads","text":"<p>Here you can find all the resource materials for the workshop and for completing the exercises: </p> <ul> <li> <p>DominoAutoConfig.json</p> </li> <li> <p>docker-compose.yml</p> </li> <li> <p>dachnug2023.postman_collection.json</p> </li> <li> <p>dachnug2023.postman_environment.json</p> </li> <li> <p>sample.env</p> </li> <li> <p>SPA-source.zip</p> </li> <li> <p>source for all apps</p> </li> <li> <p>ApprovalCentral.zip</p> </li> </ul>"},{"location":"tutorial/walkthrough/downloadindex.html#command-line-utilities","title":"Command line utilities","text":"<p>Put the command line utilities somewhere on your path. On Linux/macOS, that's typically <code>~/bin</code>. On Windows, you can create <code>~\\cmd</code> and add it to the path.</p> <ul> <li> <p>Keep shell script (Linux / macOS)</p> </li> <li> <p>Keep.cmd (Windows)</p> </li> <li> <p>curl</p> </li> </ul> <p>On Linux/macOS, when it isn't already available, you can use your packet manager:</p> <ul> <li> <p><code>brew install curl</code> (macOS)</p> </li> <li> <p><code>sudo dnf install curl</code> (Redhat/Centos)</p> </li> <li> <p><code>sudo apt install curl</code> (Debian/Ubuntu)</p> </li> </ul>"},{"location":"tutorial/walkthrough/lab-00.html","title":"Lab 0 - Overview","text":""},{"location":"tutorial/walkthrough/lab-00.html#duration-20-min","title":"Duration 20 min","text":""},{"location":"tutorial/walkthrough/lab-00.html#what-you-will-learn","title":"What you will learn","text":"<ul> <li>Validate your laptop setup</li> <li>Get a first overview of the REST API (presentation by instructor)</li> </ul>"},{"location":"tutorial/walkthrough/lab-00.html#prerequisites","title":"Prerequisites","text":"<ul> <li>Laptop</li> <li>Internet connection to download site</li> <li>Workshop prerequisites</li> </ul>"},{"location":"tutorial/walkthrough/lab-00.html#steps-not-all-are-needed","title":"Steps (not all are needed)","text":"<ul> <li> <p>Verify that you have a running Domino server with admin access (mandatory).</p> </li> <li> <p>Download <code>keep</code> (Mac/Linux) or <code>keep.cmd</code> (Windows). (This will be used if you're running KEEP locally.)</p> </li> <li> <p>Download ApprovalCentral.zip. You need to have an .nsf file to use in the walkthrough.</p> </li> <li> <p>Download POSTMAN collection &amp; POSTMAN environment.</p> </li> <li>Import into POSTMAN: environment &amp; collection</li> </ul>"},{"location":"tutorial/walkthrough/lab-00.html#how-to-check","title":"How to check","text":"<p>Commands that should work</p> <pre><code>node -v\njava -version\ncurl --version\n</code></pre> <ul> <li> <p>Postman installed (can start)</p> </li> <li> <p>Domino running with REST API active: open localhost:8880(if you're using KEEP installed locally) or web (your KEEP server if you're connecting to internet) and see:</p> </li> </ul> <p></p>"},{"location":"tutorial/walkthrough/lab-00.html#things-to-explore","title":"Things to explore","text":"<ul> <li> <p>Official Domino REST API documentation</p> </li> <li> <p>Discord discussion</p> </li> <li> <p>Open the OpenAPI v3 tile (a.k.a. Swagger)</p> </li> </ul>"},{"location":"tutorial/walkthrough/lab-01.html","title":"Lab 01 - Login to the REST API","text":""},{"location":"tutorial/walkthrough/lab-01.html#duration-10-min","title":"Duration 10 min","text":""},{"location":"tutorial/walkthrough/lab-01.html#what-you-will-learn","title":"What you will learn","text":"<p>Four ways to login to the REST API</p>"},{"location":"tutorial/walkthrough/lab-01.html#prerequisites","title":"Prerequisites","text":"<ul> <li>Lab 0 completed</li> <li> <p>Domino with REST running</p> </li> <li> <p>downloaded <code>keep</code> or <code>keep.cmd</code> from here</p> </li> </ul>"},{"location":"tutorial/walkthrough/lab-01.html#steps-in-logging-in-to-the-rest-api","title":"Steps in logging in to the REST API","text":""},{"location":"tutorial/walkthrough/lab-01.html#set-permissions","title":"Set permissions","text":"<p>The database <code>KeepConfig.nsf</code> uses the group <code>LocalKeepAdmins</code> for access control. So create that group in your Domino directory and assign your user to it.</p> <p>Use your own credentials</p> <p>The steps below use \"KEEP Admin\" and \"passw0rd\" as credentials. Replace those with the admin user on your Domino server.</p>"},{"location":"tutorial/walkthrough/lab-01.html#1-login-using-the-command-line","title":"1. Login using the command line","text":"<pre><code>curl --location --request POST \"http://localhost:8880/api/v1/auth\" \\\n   --header 'Content-Type: application/json' \\\n   --data-raw '{\"username\" : \"KEEP Admin\", \"password\" : \"passw0rd\"}'\n</code></pre> <p>All on one line</p> <p>The command above is one line. To make it more readable it is broken into multiple lines using the \"continuation character\". On macOS/Linux that is <code>\\</code>, on Windows <code>^</code>.</p> <p>Alternative type <code>keep login</code></p> <p>You will, on successful login, receive a JSON response we can verify on jwt.io.</p> <p></p>"},{"location":"tutorial/walkthrough/lab-01.html#2-login-using-the-openapi-ui","title":"2. Login using the OpenAPI UI","text":"<p>The second tile on the landing page provides access to the openAPI UI (a.k.a Swagger).</p> <p></p> <p>Check you have the correct port, protocol and host. For a local installation, this is the set-up:</p> Variable required value port 8880 protocol http host localhost <p></p> <p>Scroll down to <code>authentication</code>, expand <code>authLogin</code>, and click try it out. Fill in username and password.</p> <p></p> <p>The resulting bearer needs to be copied into form behind the button. Access to Swagger.</p> <p></p>"},{"location":"tutorial/walkthrough/lab-01.html#3-login-admin-ui","title":"3. Login Admin UI","text":"<p>A successful login shows the Admin UI.</p> <p></p>"},{"location":"tutorial/walkthrough/lab-01.html#4-login-using-postman","title":"4. Login using Postman","text":"<ul> <li> <p>Download Import the Postman collection and environment</p> </li> <li> <p>Open the Lab1 folder, execute the first entry labeled \"Login\"</p> </li> </ul> <p>The successful login shows the bearer token and 4 passed tests</p> <p></p>"},{"location":"tutorial/walkthrough/lab-01.html#how-to-check","title":"How to check","text":"<ul> <li> <p>All methods return the bearer token. Copy the token and paste it in the JWT Token checker</p> </li> <li> <p>Each token has a different start/end time</p> </li> </ul>"},{"location":"tutorial/walkthrough/lab-01.html#things-to-explore","title":"Things to explore","text":"<ul> <li> <p>Official Domino REST API documentation</p> </li> <li> <p>Discord discussion</p> </li> <li> <p>Call the <code>/api</code> endpoint using curl.</p> </li> <li>Check the different OpenAPI collections in the swagger UI.</li> <li>Check what happens when invalid credentials are provided.</li> <li>Access an endpoint, such as <code>/api/v1/scopes</code>, then the logout endpoint and try again.</li> </ul>"},{"location":"tutorial/walkthrough/lab-02.html","title":"Lab 02 - Quick config","text":""},{"location":"tutorial/walkthrough/lab-02.html#duration-10-min","title":"Duration 10 min","text":""},{"location":"tutorial/walkthrough/lab-02.html#what-you-will-learn","title":"What you will learn:","text":"<ul> <li>Navigate the Admin UI</li> <li>Configure the \"Approval Central\" database using the admin UI</li> <li>Difference between Schema and Scope</li> </ul>"},{"location":"tutorial/walkthrough/lab-02.html#prerequisites","title":"Prerequisites","text":"<ul> <li>Lab 01 completed</li> <li> <p>Your Domino server running</p> </li> <li> <p>Database ApprovalCentral.nsf deployed to your server.</p> </li> </ul>"},{"location":"tutorial/walkthrough/lab-02.html#steps-in-creating-a-schema-and-scope-in-quick-config","title":"Steps in creating a schema and scope in Quick Config","text":"<ol> <li>Log in to Admin UI.</li> <li> <p>Click on Quick Config.</p> <p></p> </li> <li> <p>Fill in the form.</p> <ul> <li>Schema Name: default</li> <li>Scope Name: approvals</li> <li>Description &amp; Schema Icon: at your discretion</li> </ul> <p></p> </li> <li> <p>Click Add.</p> </li> </ol>"},{"location":"tutorial/walkthrough/lab-02.html#alternative-steps","title":"Alternative steps","text":"<ul> <li>Use request in Postman's Lab 01 Create QuickConfig for ApprovalCentral</li> <li>Use curl, postman or the KEEP cli to post this JSON:</li> </ul> <pre><code>{\n  \"scopeName\": \"approvals\",\n  \"nsfPath\": \"ApprovalCentral.nsf\",\n  \"schemaName\": \"default\",\n  \"create\": true\n}\n</code></pre>"},{"location":"tutorial/walkthrough/lab-02.html#how-to-check","title":"How to check","text":"<p>In the Admin UI you will find one entry each for schema and scope:</p> <p></p> <p></p>"},{"location":"tutorial/walkthrough/lab-02.html#urls-to-check","title":"URLs to check","text":"<ul> <li>{{ HOST }}/api/setup-v1/schemas?nsfPath=ApprovalCentral.nsf</li> <li>{{ HOST }}/api/setup-v1/schema?nsfPath=ApprovalCentral.nsf&amp;configName=default</li> <li>{{ HOST }}/api/v1/scopes</li> </ul>"},{"location":"tutorial/walkthrough/lab-02.html#things-to-explore","title":"Things to explore","text":"<ul> <li> <p>Official Domino REST API documentation</p> </li> <li> <p>Discord discussion</p> </li> <li> <p>Check the Swagger UI for the new entry</p> </li> <li>Use POSTMAN to create a second quick config using recipe.nsf</li> <li>Open Domino Designer to check resources</li> </ul> <p></p> <p></p>"},{"location":"tutorial/walkthrough/lab-03.html","title":"Lab 03 - Schema exploration","text":""},{"location":"tutorial/walkthrough/lab-03.html#duration-30-min","title":"Duration 30 min","text":""},{"location":"tutorial/walkthrough/lab-03.html#what-you-will-learn","title":"What you will learn:","text":"<ul> <li>What's a form mode</li> <li>What's a field group</li> <li>Formulas to control access</li> </ul>"},{"location":"tutorial/walkthrough/lab-03.html#prerequisites","title":"Prerequisites","text":"<ul> <li>Lab 02 completed</li> <li>Domino running</li> </ul>"},{"location":"tutorial/walkthrough/lab-03.html#steps","title":"Steps","text":"<p>Before you start altering the schema, use Postman, as outlined in How to check to observe the API behavior before and after.</p> <ol> <li>In Admin UI, edit the <code>default</code> schema of <code>ApprovalsCentral.nsf</code>, and select the Equipment form.</li> <li> <p>In mode <code>default</code>, add the following fields to a <code>field group</code> named stuff.</p> <ul> <li>childRN</li> <li>Comments</li> <li>Cost</li> <li>Equipment</li> </ul> </li> <li> <p>Add new modes: dql, (needs fields), raw (doesn't need fields).</p> </li> <li> <p>Add a new mode <code>decision</code> with 4 fields:</p> Name Type Access completedApprover names write-only newHistory string write-only Status string read-only CurrentApprover names read-only </li> </ol> <p>Check the box \"compute with form\"</p> <p></p> <p></p> <p>Don't forget to save your changes.</p>"},{"location":"tutorial/walkthrough/lab-03.html#how-to-check","title":"How to check","text":"<ul> <li>Use Postman to retrieve document using default mode before and after your changes.</li> <li>Try to use the \"/raw\" endpoint before and after creating the \"raw\" mode.</li> <li>Try a dql query before and after the dql mode was created.</li> <li>Observe the difference before / after the addition of field groups.</li> </ul>"},{"location":"tutorial/walkthrough/lab-03.html#things-to-explore","title":"Things to explore","text":"<ul> <li> <p>Official Domino REST API documentation</p> </li> <li> <p>Discord discussion</p> </li> <li> <p>Change the formula for read/write access to exclude your default user, observe the API reaction in Postman.</p> </li> <li>Try the \"Test Formula\" button in mode.</li> <li>Change the write access for default to <code>Status = \"\" | Status = \"draft\"</code>.</li> <li>Observe the difference when \"compute with form\" is checked.</li> <li>Modify a field Name, do you see the output changing?</li> </ul>"},{"location":"tutorial/walkthrough/lab-04.html","title":"Lab 04 - Additional scope &amp; schema","text":"<p>Rationale: An external training provider shall get access to Name and Course, but neither cost nor approval flows.</p>"},{"location":"tutorial/walkthrough/lab-04.html#duration-10-min","title":"Duration 10 min","text":""},{"location":"tutorial/walkthrough/lab-04.html#what-you-will-learn","title":"What you will learn:","text":"<p>A database can expose different sets of information based on different schema.</p>"},{"location":"tutorial/walkthrough/lab-04.html#prerequisites","title":"Prerequisites","text":"<ul> <li>Lab 03 completed</li> <li>Domino running</li> <li>Postman available</li> </ul>"},{"location":"tutorial/walkthrough/lab-04.html#steps-for-schema-and-scope-exploration","title":"Steps for schema and scope exploration","text":""},{"location":"tutorial/walkthrough/lab-04.html#create-schema","title":"Create schema","text":"<ol> <li>In the Admin UI, select \"Database Management - REST API\"</li> <li>Click Schemas from the navigation pane.</li> <li>On the Schema Management, click Add Schema\".</li> <li>Select <code>ApprovalCentral.nsf</code> from the Available Databases.</li> <li> <p>Fill in Schema Name: <code>training</code></p> <p></p> </li> <li> <p>Switch to the \"NSF View\"</p> <p></p> <p></p> </li> <li> <p>Click to edit the <code>training</code> schema.</p> </li> <li> <p>Under the Database Forms, configure only  the form <code>Training</code>.</p> Field Type Access Form string read-write from names read-write Training string read-write <p>Set formula for write access to <code>@false</code></p> <p>Important</p> <p>Don't forget to save.</p> </li> <li> <p>On the Databse Views, the view <code>(TrainingApprovals)</code>, and <code>PendingApprovals</code> must set to <code>active</code>.</p> </li> </ol>"},{"location":"tutorial/walkthrough/lab-04.html#create-scope","title":"Create scope","text":"<ol> <li>Click Scopes from the navigation pane.</li> <li>Click Add Scope, on the Scope Management</li> <li>Select the schema <code>training</code> from the <code>ApprovalCentral.nsf</code> from  the Available Schema</li> <li> <p>Fill in Scope Name as <code>trainingcorp</code>. Fill the Description.</p> <p>Leave the Server and Maximum Level Access as they are. </p> </li> <li> <p>Click Add. It will be added to your scopes list.</p> <p></p> </li> </ol> <p>Alternative <code>POST</code> to <code>/api/setup-v1/admin/scope</code></p> <pre><code>{\n  \"apiName\": \"trainingcorp\",\n  \"createSchema\": false,\n  \"description\": \"Subset Training for XY Training Inc\",\n  \"iconName\": \"handshake\",\n  \"isActive\": true,\n  \"nsfPath\": \"ApprovalCentral.nsf\",\n  \"schemaName\": \"training\",\n  \"server\": \"*\"\n}\n</code></pre>"},{"location":"tutorial/walkthrough/lab-04.html#how-to-check","title":"How to check","text":"<ul> <li>Retrieve list of schemas for <code>ApprovalCentral.nsf</code>.</li> <li>Retrieve list of scopes.</li> <li>Check admin UI.</li> <li>Login with limit to scope <code>trainingcorp</code> and look at data in POSTMAN</li> </ul>"},{"location":"tutorial/walkthrough/lab-04.html#things-to-explore","title":"Things to explore","text":"<ul> <li> <p>Official Domino REST API documentation</p> </li> <li> <p>Discord discussion</p> </li> <li>Login with a limited scope and try to access the other scope's data.</li> </ul>"},{"location":"tutorial/walkthrough/lab-05.html","title":"Lab 05 - Create an application","text":"<p>Rationale: \"Application\" is the configuration you need when you want to use Domino's build in Identity Provider (IdP) functionality. IdP is part of the OAuth based Identity standard</p>"},{"location":"tutorial/walkthrough/lab-05.html#duration-10-min","title":"Duration 10 min","text":""},{"location":"tutorial/walkthrough/lab-05.html#what-you-will-learn","title":"What you will learn","text":"<p>Configure credentials, so an application can login on your behalf with a limited set of permissions. Needed for lab 6.</p>"},{"location":"tutorial/walkthrough/lab-05.html#prerequisites","title":"Prerequisites","text":"<ul> <li>Lab 04 completed</li> <li>Domino running</li> </ul>"},{"location":"tutorial/walkthrough/lab-05.html#steps-in-creating-app-in-admin-ui","title":"Steps in  creating app in Admin UI","text":"<ol> <li>Go to Application navigation pane and click Add Application.</li> <li> <p>Fill in the fields according to below image.</p> <p></p> <ul> <li>The callback URLs need to be provided by the application developer/admin and need to match</li> <li>Add scopes as desired</li> </ul> <p>Scopes need to exist</p> <p>You can specify one or more scopes that don't exist (yet). Just make sure they do once the application shall be used.</p> </li> <li> <p>Click Add. The app save in the app list.</p> </li> </ol> <p>Alternative <code>POST</code> to <code>/api/setup-v1/admin/application</code></p> <pre><code>{\n  \"client_name\": \"XYTraining\",\n  \"description\": \"The external Training APP\",\n  \"redirect_uris\": [\"http://localhost:3000/auth/callback\"],\n  \"client_uri\": \"https://www.spiegel.de\",\n  \"scope\": \"trainingcorp\",\n  \"logo_uri\": \"cathedral\",\n  \"status\": \"isActive\",\n  \"contacts\": [\"Doctor.Notes@projectkeep.io\"]\n}\n</code></pre>"},{"location":"tutorial/walkthrough/lab-05.html#generate-application-secret","title":"Generate Application Secret","text":"<ol> <li> <p>Click Click to Generate Secret. </p> <p></p> </li> <li> <p>The generated secret will be shown on the app.</p> <p></p> <p>Note</p> <p>Write or note the App Secret and App Id.</p> </li> </ol> <p>Alternative <code>POST</code> to <code>/api/setup-v1/admin/application/{{ CLIENT_ID }}/secret?force=true</code></p> <pre><code>{\n  \"client_id\": \"{{ CLIENT_ID }}\",\n  \"status\": \"isActive\"\n}\n</code></pre> <p>App Secrets can't be retrieved</p> <p>Once you switch away from the App screen where you saw the \"App Secret\" it is gone. We store and save it salted and hashed and can't transform it back</p>"},{"location":"tutorial/walkthrough/lab-05.html#how-to-check","title":"How to check","text":"<ul> <li>App shows up in admin UI.</li> <li>App shows up in landing screen.</li> </ul>"},{"location":"tutorial/walkthrough/lab-05.html#things-to-explore","title":"Things to explore","text":"<ul> <li> <p>Official Domino REST API documentation</p> </li> <li> <p>Discord discussion</p> </li> <li> <p>Explore creating / retrieving app in Postman.</p> </li> <li>Reset the secret.</li> <li>Do the OAuth dance in Postman.</li> </ul>"},{"location":"tutorial/walkthrough/lab-06.html","title":"Lab 06 - Create a NodeJS application","text":""},{"location":"tutorial/walkthrough/lab-06.html#duration-15-min","title":"Duration 15 min","text":""},{"location":"tutorial/walkthrough/lab-06.html#what-you-will-learn","title":"What you will learn","text":"<p>Run a custom NodeJS application that interacts with the Domino Rest API</p>"},{"location":"tutorial/walkthrough/lab-06.html#prerequisites","title":"Prerequisites","text":"<ul> <li>Lab 05 completed</li> <li>Domino running</li> <li>NodeJS installed</li> <li>Internet connection</li> </ul>"},{"location":"tutorial/walkthrough/lab-06.html#steps","title":"Steps","text":"<ol> <li> <p>Download and unzip the apps-src.zip from the <code>source for all apps</code> in a folder. The <code>apps-src.zip</code> contains 3 independent folder. In this activity will going to use the <code>DominoOAuth</code> folder.</p> </li> <li> <p>Open your IDE (vs code, etc)</p> </li> <li>Open the folder <code>src</code>\u2192<code>DominoOAuth</code>.</li> <li>From the <code>DominoOAuth</code> folder,inside your IDE, select <code>package.json</code></li> <li>Edit the <code>package.json</code>.</li> <li> <p>Edit the <code>setup.json</code> and add the values from Lab05-Create Application and also add values from the Lab-04-Scope.</p> <p>Note</p> <p>As a user, you must know what are the needed fields to be modified to run the <code>setup.json</code>.</p> </li> <li> <p>On your Terminal in your IDE, run <code>npm install</code></p> </li> <li>Run <code>npm start</code>. You must start your browser to check.</li> </ol>"},{"location":"tutorial/walkthrough/lab-06.html#how-to-check","title":"How to check","text":"<ul> <li>navigate to http://localhost:3000 - UI should show</li> <li>retrieve data</li> </ul>"},{"location":"tutorial/walkthrough/lab-06.html#things-to-explore","title":"Things to explore","text":"<ul> <li> <p>Official Domino REST API documentation</p> </li> <li> <p>Discord discussion</p> </li> <li> <p>Check out the source code.</p> </li> </ul>"},{"location":"tutorial/walkthrough/lab-07.html","title":"Lab 07 - Create a SPA","text":""},{"location":"tutorial/walkthrough/lab-07.html#duration-20-min","title":"Duration 20 min","text":""},{"location":"tutorial/walkthrough/lab-07.html#what-you-will-learn","title":"What you will learn","text":"<p>You can create a browser single page application using just 3 files</p>"},{"location":"tutorial/walkthrough/lab-07.html#prerequisites","title":"Prerequisites","text":"<ul> <li>Lab 06 completed</li> <li>Domino running</li> <li>Internet connection</li> </ul>"},{"location":"tutorial/walkthrough/lab-07.html#steps","title":"Steps","text":"<ul> <li> <p>Create a new directory <code>[notesdata]/keepweb.d/approvalspa</code></p> </li> <li> <p>Download SPA-source.zip</p> </li> <li> <p>Unzip the content into <code>approvalspa</code> folder.</p> </li> <li>Reload the landing page</li> </ul>"},{"location":"tutorial/walkthrough/lab-07.html#how-to-check","title":"How to check","text":"<ul> <li>Application should work</li> <li>Application shows up on landing page</li> </ul>"},{"location":"tutorial/walkthrough/lab-07.html#things-to-explore","title":"Things to explore","text":"<ul> <li> <p>Official Domino REST API documentation</p> </li> <li> <p>Discord discussion</p> </li> <li> <p>Create a new directory in <code>keepweb.d</code> and a <code>manifest.json</code> file. Check out the landing page.</p> </li> <li>Check the application source code (5 files only).</li> </ul>"},{"location":"tutorial/walkthrough/lab-08.html","title":"Lab 08 - Create a Java application","text":""},{"location":"tutorial/walkthrough/lab-08.html#duration-15-min","title":"Duration 15 min","text":""},{"location":"tutorial/walkthrough/lab-08.html#what-you-will-learn","title":"What you will learn","text":"<p>We use an example that could be some scheduled process to ETL data</p>"},{"location":"tutorial/walkthrough/lab-08.html#prerequisites","title":"Prerequisites","text":"<ul> <li>Lab 07 completed</li> <li>Java installed</li> <li>Maven installed</li> <li>Internet connection</li> </ul>"},{"location":"tutorial/walkthrough/lab-08.html#steps","title":"Steps","text":"<ol> <li> <p>Download and unzip the apps-src.zip from the <code>source for all apps</code> in a folder. This folder includes all the source projects that the user may work with whenever he would like to. </p> </li> <li> <p>Open your IDE such as VS Code, Eclipse. </p> <p>There are three folders to work with inside the <code>src</code>. There are two JavaScript folders and one Java folder to work with. The user needs to make the project folder to be the current or root folder whenever they use it with the user's IDE. Since it's Java application, use the <code>JavaETL</code> folder.</p> <p>Using VSCode</p> <ol> <li>Navigate to File \u2192 Open Folder, and select <code>src</code> \u2192 <code>JavaETL</code> folder. </li> <li>Inside the <code>JavaETL</code> folder, locate the <code>config.json</code> file.</li> <li>Edit <code>config.json</code> and click Save.</li> </ol> <p>Using Eclipse</p> <ol> <li>Navigate to File \u2192 Open File, and select <code>src</code> \u2192 <code>JavaETL</code> folder. </li> <li>Inside the <code>JavaETL</code> folder, locate the <code>config.json</code> file.</li> <li>Edit <code>config.json</code> and click Save.</li> </ol> </li> <li> <p>From your Terminal, select the folder where your project is located, such as <code>JavaETL</code>, and run <code>mvn clean install</code> (optional) and <code>java -jar target/etl.jar</code>.</p> </li> </ol>"},{"location":"tutorial/walkthrough/lab-08.html#how-to-check","title":"How to check","text":"<p>File sample.csv created training requests</p>"},{"location":"tutorial/walkthrough/lab-08.html#things-to-explore","title":"Things to explore","text":"<ul> <li> <p>Official Domino REST API documentation</p> </li> <li> <p>Discord discussion</p> </li> <li> <p>Modify app to upload data.</p> </li> </ul>"},{"location":"tutorial/walkthrough/lab-09.html","title":"Lab 9 - Unlock additional ports","text":""},{"location":"tutorial/walkthrough/lab-09.html#duration-20-min","title":"Duration 20 min","text":""},{"location":"tutorial/walkthrough/lab-09.html#what-you-will-learn","title":"What you will learn","text":"<ul> <li>Learn about metrics, healthcheck &amp; management</li> <li>Configure the functional accounts</li> </ul>"},{"location":"tutorial/walkthrough/lab-09.html#prerequisites","title":"Prerequisites","text":"<ul> <li>Domino running</li> </ul>"},{"location":"tutorial/walkthrough/lab-09.html#steps","title":"Steps","text":"<ul> <li>Create a JSON file in <code>keepconfig.d</code> with any name, such as <code>portmagic.json</code>.</li> <li>Add the content like below:</li> </ul> <p>[supersecret] isn't a good password</p> <p>You have to promise never to use that in production or externally reachable servers:</p> <p><code>FA1D8FC7DAA715F20A3C19F62451DCD011483EFBABE46A1C03F2CF0702365726:0A2AC2338974379073BEF880B2EA9E4FE86651974C83D3958DB73C81047CF3815456678A3EE206975CE17B7874589478A2FC92DCDF2C1794087AED94BF8FD4CA</code></p> <pre><code>{\n  \"DEBUG\": true,\n  \"identity\": {\n    \"healthcheckAPI\": {\n      \"health\": {\n        \"active\": true,\n        \"secret\": \"FA1D8FC7DAA715F20A3C19F62451DCD011483EFBABE46A1C03F2CF0702365726:0A2AC2338974379073BEF880B2EA9E4FE86651974C83D3958DB73C81047CF3815456678A3EE206975CE17B7874589478A2FC92DCDF2C1794087AED94BF8FD4CA\"\n      }\n    },\n    \"managementAPI\": {\n      \"Doctor Notes\": {\n        \"active\": true,\n        \"secret\": \"FA1D8FC7DAA715F20A3C19F62451DCD011483EFBABE46A1C03F2CF0702365726:0A2AC2338974379073BEF880B2EA9E4FE86651974C83D3958DB73C81047CF3815456678A3EE206975CE17B7874589478A2FC92DCDF2C1794087AED94BF8FD4CA\"\n      }\n    },\n    \"metricsAPI\": {\n      \"metrics\": {\n        \"active\": true,\n        \"secret\": \"FA1D8FC7DAA715F20A3C19F62451DCD011483EFBABE46A1C03F2CF0702365726:0A2AC2338974379073BEF880B2EA9E4FE86651974C83D3958DB73C81047CF3815456678A3EE206975CE17B7874589478A2FC92DCDF2C1794087AED94BF8FD4CA\"\n      }\n    }\n  },\n  \"metrics\": {\n    \"enabled\": true,\n    \"jvmMetricsEnabled\": true\n  }\n}\n</code></pre> <ul> <li>Restart the restapi.</li> </ul> <p></p>"},{"location":"tutorial/walkthrough/lab-09.html#how-to-check","title":"How to check","text":"<p>Navigate to the new URLs, you should be prompted with basic auth. Password is <code>supersecret</code> and user is the respective key from the JSON file.</p> <p></p> <ul> <li> <p>Healthcheck: http://localhost:8886/health</p> </li> <li> <p>Metrics: http://localhost:8890/metrics</p> </li> <li> <p>Management UI: http://localhost:8889/</p> </li> </ul>"},{"location":"tutorial/walkthrough/lab-09.html#things-to-explore","title":"Things to explore","text":"<ul> <li> <p>Official Domino REST API documentation</p> </li> <li> <p>Discord discussion</p> </li> </ul>"},{"location":"tutorial/walkthrough/lab-10.html","title":"Lab 10 - Configure JWT","text":"<p>Out of the box KEEP uses a random symmetrical JWT signing key, that's changed on any reboot of the API. This is OK for test and single server use, but not for multi-server operation or use as IdP.</p>"},{"location":"tutorial/walkthrough/lab-10.html#duration-20-min","title":"Duration 20 min","text":""},{"location":"tutorial/walkthrough/lab-10.html#what-you-will-learn","title":"What you will learn","text":"<ul> <li>How KEEP configuration works</li> <li>Additional endpoints beyond 8880</li> <li>Use the management UI</li> </ul>"},{"location":"tutorial/walkthrough/lab-10.html#prerequisites","title":"Prerequisites","text":"<ul> <li>Domino running</li> </ul>"},{"location":"tutorial/walkthrough/lab-10.html#steps","title":"Steps","text":"<ul> <li>Access http://localhost:8889</li> </ul> <ul> <li>Fill in Certificate Name, and click Create IdP Certificate.</li> <li>Restart Domino REST API. </li> </ul>"},{"location":"tutorial/walkthrough/lab-10.html#how-to-check","title":"How to check","text":"<ul> <li>New files in <code>keepconfig.d</code>, such as when you filled in <code>KeepLabIdP</code> as Certificate Name, you end up with:<ul> <li><code>KeepLabIdP.json</code></li> <li><code>KeepLabIdP.cert.pem</code></li> <li><code>KeepLabIdP.private.key.pem</code></li> <li><code>KeepLabIdP.public.key.pem</code></li> </ul> </li> <li>on restart keep: JWT provider changes (see login in KEEP).</li> </ul> <p>When you copy these files to another server, the JWT issued by the first server will be accepted by the second server as well. This extends to the Domino HTTP task if core Domino is configured for JWT.</p> <p>Check <code>http://localhost:8880/.well-known/openid-configuration</code>.</p> <p></p>"},{"location":"tutorial/walkthrough/lab-10.html#things-to-explore","title":"Things to explore","text":"<ul> <li> <p>Official Domino REST API documentation</p> </li> <li> <p>Discord discussion</p> </li> <li> <p>Copy files generated to another server and try cross login.</p> </li> </ul>"},{"location":"tutorial/walkthrough/lab-11.html","title":"Lab 11 - KEEP Configuration","text":"<p>The Domino REST API provides extensive configuration capabilities to cater to different usage scenarios</p>"},{"location":"tutorial/walkthrough/lab-11.html#duration-20-min","title":"Duration 20 min","text":""},{"location":"tutorial/walkthrough/lab-11.html#what-you-will-learn","title":"What you will learn","text":"<ul> <li>Fine tune KEEP configuration</li> <li>Switch on/off API endpoints</li> </ul>"},{"location":"tutorial/walkthrough/lab-11.html#prerequisites","title":"Prerequisites","text":"<ul> <li>Domino running</li> </ul>"},{"location":"tutorial/walkthrough/lab-11.html#steps","title":"Steps","text":"<p>All configuration settings are kept in JSON files you place in <code>keepcofig.d</code>. Files are loaded in alphabetical order. When you have conflicting entries, the last one wins. After a change the REST API needs to be reloaded.</p>"},{"location":"tutorial/walkthrough/lab-11.html#update-cors-settings","title":"Update CORS settings","text":"Starting Domino REST API v1.1.3From Domino REST API v1.0 to v1.1.2 <p>Starting Domino REST API v1.1.3, CORS uses Regex. For more information, see CORS is now using Regex.</p> <pre><code>{\n  \"CORS\": {\n    \"^https?:\\\\/\\\\/localhost$\": true,\n    \"^https?:\\\\/\\\\/.*\\\\.local$\": false,\n    \"^https?:\\\\/\\\\/yourDomain\\\\.com$\": true\n  }\n}\n</code></pre> <p>wherein:</p> <ul> <li><code>^</code> \u2192 beginning of the string</li> <li><code>http</code> \u2192 the literal string <code>http</code></li> <li><code>s?</code> \u2192 optional the string <code>s</code></li> <li><code>\\\\/</code> \u2192 double escape the string <code>/</code></li> <li><code>.*</code> \u2192 one or more characters of any type</li> <li><code>\\\\.</code> \u2192 double escape the string <code>.</code></li> <li><code>$</code> \u2192 end of string</li> </ul> <p>Note</p> <p>Inside JSON, the <code>\\</code> of Regex gets escaped to <code>\\\\</code>.</p> <pre><code>{\n  \"CORS\": {\n    \"localhost\": true,\n    \".local\": false,\n    \"yourDomain.com\": true\n  }\n}\n</code></pre> <p></p>"},{"location":"tutorial/walkthrough/lab-11.html#disable-pim-access","title":"Disable PIM access","text":"<pre><code>{\n  \"versions\": {\n    \"pim\": {\n      \"active\": true\n    }\n  },\n  \"verticles\": {\n    \"PIM\": {\n      \"active\": false\n    },\n    \"Firehose\": {\n      \"active\": false\n    }\n  }\n}\n</code></pre>"},{"location":"tutorial/walkthrough/lab-11.html#disable-admin-endpoints-and-ui","title":"Disable Admin Endpoints and UI","text":"<pre><code>{\n  \"versions\": {\n    \"setup\": {\n      \"active\": false\n    }\n  },\n  \"verticles\": {\n    \"Design\": {\n      \"active\": false\n    },\n    \"KeepAdmin\": {\n      \"active\": false\n    }\n  },\n  \"webapps\": {\n    \"webjars\": {\n      \"active\": false\n    }\n  }\n}\n</code></pre>"},{"location":"tutorial/walkthrough/lab-11.html#enable-oauth","title":"Enable OAuth","text":"<pre><code>{\n  \"oauth\": {\n    \"active\": true,\n    \"database\": \"oauth.nsf\",\n    \"authCodeExpiresIn\": 120,\n    \"accessTokenExpiresIn\": 3600,\n    \"refreshTokenExpiresIn\": 525600,\n    \"url\": \"http://localhost:8880\"\n  }\n}\n</code></pre>"},{"location":"tutorial/walkthrough/lab-11.html#how-to-check","title":"How to check","text":"<ul> <li>check with swagger</li> <li>check with curl</li> </ul>"},{"location":"tutorial/walkthrough/lab-11.html#things-to-explore","title":"Things to explore","text":"<ul> <li> <p>Official Domino REST API documentation</p> </li> <li> <p>Discord discussion</p> </li> <li> <p>Mess with other parameters:</p> <ul> <li>disable Domino login</li> <li>enable Preview features</li> <li>update NsfExclusions</li> </ul> </li> </ul>"},{"location":"whatsnew/index.html","title":"What's new","text":"<p>The What's new contains information about the latest features, improvements, fixes, and changes, which include breaking changes, related to Domino REST API. Kindly read them carefully.</p> <p>Important</p> <p>Always be aware of features that have been deprecated in the current and earlier releases by checking deprecated features.</p>"},{"location":"whatsnew/index.html#domino-rest-api-v114","title":"Domino REST API v1.1.4","text":"Release summary <p>Release date: June 16, 2025</p> <ul> <li>2 Preview features</li> <li>7 Improvements</li> <li>4 Resolved issues  </li> </ul> <p>Read the full details</p>"},{"location":"whatsnew/index.html#domino-rest-api-v1131","title":"Domino REST API v1.1.3.1","text":"Release summary <p>Release date: April 30, 2025</p> <p>Domino REST API v1.1.3.1 supersedes and should be used in place of v1.1.3.</p> <ul> <li>4 New features</li> <li>4 Improvements</li> <li>3 Resolved issues</li> <li>1 Breaking change</li> </ul> <p>Read the full details</p>"},{"location":"whatsnew/index.html#domino-rest-api-v112-and-earlier","title":"Domino REST API v1.1.2 and earlier","text":"Important <p>Items marked in red are API changes that may impact your applications and should be reviewed before upgrading. These API changes happened in the following previous releases:</p> <pre><code>- Domino REST API v1.0.10\n- Domino REST API v1.0.2\n- Domino REST API v1.0.1\n</code></pre> <p>Read the full details</p>"},{"location":"whatsnew/v1.1.3.html","title":"What's new for Domino REST API v1.1.3.1","text":"<p>Domino REST API v1.1.3.1 supersedes and should be used in place of v1.1.3.</p> <p>Release date: April 30, 2025</p>"},{"location":"whatsnew/v1.1.3.html#new-features","title":"New features","text":"<ul> <li>Added the option to use Proof Key for Code Exchange (PKCE) as the authentication method for the created OAuth app on the Application Management page in the Admin UI. PKCE enhances security by ensuring that only the intended client can obtain an access token, providing a strong defense against potential security threats.</li> </ul> <p>For more information, see Add an application.</p> <ul> <li> <p>Added OpenAPI schema and Swagger page for the Web Application Open Platform Interface or WOPI protocol that provides a set of endpoints enabling seamless online collaborative editing of document attachments in Domino.</p> </li> <li> <p>Added the capability of setting the WebDAV and WOPI session durations and lock durations using the following configuration parameters:</p> </li> <li> <p><code>WopiSessionSeconds</code></p> </li> <li><code>WebdavSessionSeconds</code></li> <li><code>WopiLockSeconds</code></li> <li><code>WebdavLockSeconds</code></li> </ul> <p>For more information, see Configuration parameters for details of the configuration parameters and Modify configuration of Domino REST API for the procedure on modify the Domino REST API configuration.</p> <ul> <li>New option for logging in to the Admin UI</li> </ul> <p>You can now log in to the Admin UI using the Log in with OIDC option. This option enables the use of Domino REST API IdP and implements the OAuth process requiring user consent to log in. It also enables the use of external IdP to log in to the Admin UI that uses authorization code flow with PKCE.</p> <p>For more information, see Log in options.</p>"},{"location":"whatsnew/v1.1.3.html#improvements","title":"Improvements","text":"<ul> <li>Cache ACL Lookups for faster operations.</li> <li>Enhanced <code>POST v1/run/formula</code> to support <code>forms</code> array and form alias.</li> <li>Improved error handling when an error occurs while saving a configured form by still making the field editor accessible.</li> <li>Improved error handling for failed calls when initiating PKCE authorization or token refresh.</li> </ul>"},{"location":"whatsnew/v1.1.3.html#resolved-issues","title":"Resolved issues","text":"<ul> <li>Fixed the issue where calling an endpoint with an HTTP Method that isn't supported with this endpoint would return an HTTP 204. Fixed to return HTTP 404 in this case.</li> <li>Fixed the issue where the creation of a document via a POST method succeeded even when the field, set as required by the Required toggle in the Field Setting, was missing from the request payload.</li> <li>Fixed the issue with the <code>POST pim-v1/message</code> endpoint related to a sent message not being received when multiple recipients were in the To, CC, or BCC field.</li> </ul>"},{"location":"whatsnew/v1.1.3.html#breaking-changes","title":"Breaking changes","text":""},{"location":"whatsnew/v1.1.3.html#cors-is-now-using-regex","title":"CORS is now using Regex","text":"<p>Browser-based applications that are hosted on a different host need CORS  support. Until Domino REST API v1.1.2, this was done by providing a plain string that a domain would need to end on. Starting Domino REST API v1.1.3, this is replaced with a regular expression (Regex) .</p> <p>Old:</p> <pre><code>{\n  \"CORS\": {\n    \"localhost\": true,\n    \".local\": true\n  }\n}\n</code></pre> <p>New:</p> <pre><code>{\n  \"CORS\": {\n    \"^https?:\\\\/\\\\/localhost(?:\\\\:\\\\d+)?$\": true,\n    \"^https?:\\\\/\\\\/.*\\\\.local(?:\\\\:\\\\d+)?$\": true\n  }\n}\n</code></pre> <p>A few pointers:</p> <ul> <li><code>^</code> \u2192 beginning of the string</li> <li><code>http</code> \u2192 the literal string <code>http</code></li> <li><code>s?</code> \u2192 optional the string <code>s</code></li> <li><code>\\\\/</code> \u2192 double escape the string <code>/</code></li> <li><code>.*</code> \u2192 one or more characters of any type</li> <li><code>\\\\.</code> \u2192 double escape the string <code>.</code></li> <li><code>(?:\\\\:\\\\d+)?</code> \u2192 double escaped optional colon and port number</li> <li><code>$</code> \u2192 end of string</li> </ul> <p>Tip</p> <ul> <li>Inside JSON, the <code>\\</code> of Regex gets escaped to <code>\\\\</code>.</li> <li> <p>Use a Regex tool.</p> <p>Regex can be hard to decipher and understand due to their syntax and flexibility. To test if a Regex does what you want, use an online interactive tool for validation. Make sure to pick the Java flavor.</p> </li> </ul> <p>This enables greater flexibility, but requires an update to your CORS variable if you have made changes in <code>keepconfig.d</code> to your CORS configuration.</p> <p>Example:</p> <p>Change <code>mycompany.com</code> to <code>https:\\\\/\\\\/.*\\\\.mycompany\\.com:8000$</code> to allow only <code>https</code> on port <code>8000</code> for <code>mycompany.com</code>.</p> <p>You need to include your host</p> <p>The new CORS implementation is designed to be restrictive, any HTTP request presenting an <code>origin</code> header will be checked against your configuration and denied if no match can be found. The CORS specification states:</p> <p>Ultimately server developers have a lot of freedom in how they handle HTTP responses and these tactics can differ between the response to the CORS-preflight request and the CORS request that follows it</p> <p>We decided on the side of caution, and fail any request that is not a match for a presented <code>origin</code> header. As a result you have to include your DRAPI host in your CORS setup.</p> <p>See the full details here</p> <p>Note</p> <p>The CORS update may affect logging in to and using the Admin UI. For more information on addressing the issue, see Configure CORS for AdminUI, OAuth and your applications. </p>"},{"location":"whatsnew/v1.1.3.html#others","title":"Others","text":"<ul> <li> <p>Installer jar files:</p> <ul> <li>For Domino 14: restapiInstall-r14.jar</li> <li>For Domino 12: restapiInstall-r12.jar</li> </ul> </li> <li> <p>Docker image version for docker compose .env file (CONTAINER_IMAGE):</p> <ul> <li>For Domino 14: domino-rest-api:1.1.3.1-r14</li> <li>For Domino 12: domino-rest-api:1.1.3.1-r12</li> </ul> </li> <li> <p>Docker image version for docker compose .env file from Harbor:</p> <ul> <li>For Domino 14: hclcr.io/domino/restapi:1.1.3.1-r14</li> <li>For Domino 12: hclcr.io/domino/restapi:1.1.3.1-r12</li> </ul> </li> </ul>"},{"location":"whatsnew/v1.1.4.html","title":"What's new for Domino REST API v1.1.4","text":"<p>Release date: June 16, 2025</p>"},{"location":"whatsnew/v1.1.4.html#preview-features","title":"Preview features","text":"<p>The following preview features apply to HCL Domino v14.5 or later only.</p> <ul> <li> <p><code>POST v1/dominoiq/completion</code></p> <p>Added the <code>POST v1/dominoiq/completion</code> endpoint to run a command as defined in the Domino IQ configuration database against the data you can specify via the <code>payload</code> key. You specify the name of the command to run via the <code>command</code> key.</p> </li> <li> <p>Domino as an OIDC provider</p> <p>Added support for configuring Domino REST API to use Domino as an OIDC provider.</p> <p>For Domino REST API v1.1.4, do not use the Log in with OIDC option to log in to the Admin UI if you configured Domino REST API to use Domino as an OIDC provider. Instead, use the Log in with password option.</p> </li> </ul>"},{"location":"whatsnew/v1.1.4.html#improvements","title":"Improvements","text":"<ul> <li>Added a text on the Formula for Write Access card on Mode Settings in the Admin UI to indicate whether Computed with Form method is enabled or disabled.</li> <li> <p>Added a Continue on Error toggle on the Formula for Write Access dialog in the Admin UI to allow process continuation even if the document validation fails. The Continue on Error toggle is only enabled when the Compute with Form toggle is set to the on position. The Continue on Error toggle is set to the on position or enabled by default.</p> <p>For more information, see Set computed with form.</p> </li> <li> <p>Enhanced the <code>POST setup-v1/design/nsf</code> endpoint to make schema creation optional. When no schema name is provided for the <code>dataSource</code> parameter when calling the endpoint, no new schema is created. Additionally, a new schema isn't created for the new Domino database when it's created from a template that has a schema with the same name as the one specified for the <code>dataSource</code> parameter.</p> </li> <li> <p>Added the <code>quickConfigSchema</code> query parameter to the <code>POST setup-v1/design/nsf</code> endpoint. When set to true, this parameter enables the created schema to be fully configured.</p> </li> <li> <p>Added the <code>checkAccess</code> query parameter to the <code>GET v1/userinfo</code> endpoint that checks the current user\u2019s access level, including the user's role, to the provided scopes. It's important to note that the check considers the scope\u2019s maximum access level. This means that if the user's access level is higher than the set maximum access level of the scope, the check result will indicate the scope's maximum access level as the user's access level to the scope. If it's lower, then the check result will indicate the user's access level.</p> </li> <li> <p>Automatically adds the <code>url</code> parameter of <code>oauth.json</code>, if defined, to the CORS allowed URLs.</p> </li> <li> <p>Added additional context ID in <code>domino-keep.log</code> that shows multiple internal calls are related to the same request.</p> </li> </ul>"},{"location":"whatsnew/v1.1.4.html#resolved-issues","title":"Resolved issues","text":"<ul> <li> <p>A 503 Service Unavailable error occurred when the <code>tell restapi refresh</code> command was issued, and no other restapi task command was accepted until the <code>tell restapi refresh</code> command was reissued.</p> </li> <li> <p>Filtering a <code>date-time</code> field in OData didn't work as expected and generated an error.</p> </li> <li> <p>Fixed an issue in OData related to incorrect results when using <code>ne</code> or <code>in</code> in multiple statements joined by <code>and</code> or <code>or</code>.</p> </li> <li> <p>Fixed an issue where the Domino REST API Management Users page may not display all currently cached users based on their expiry date.</p> </li> </ul>"},{"location":"whatsnew/v1.1.4.html#others","title":"Others","text":"<ul> <li>Removed the <code>$search</code>,\u00a0<code>$orderby</code>,\u00a0and\u00a0<code>$count</code>\u00a0parameters from the\u00a0<code>GET v1/odata/{dataSource}/{name}</code> endpoint as they were non-functional and might be added in a future release as part of a related endpoint enhancement.</li> <li>Added procedure for accessing Domino OData in Microsoft Excel<sup>1</sup> for Mac in the OData tutorial.</li> <li> <p>Added details that help users understand what information to provide when requesting customer support to ensure that their support needs are addressed quickly and effectively. For more information, see Contact support.</p> </li> <li> <p>Installer jar files:</p> <ul> <li>For Domino 14: restapiInstall-r14.jar</li> <li>For Domino 12: restapiInstall-r12.jar</li> </ul> </li> <li> <p>Docker image version for docker compose .env file (CONTAINER_IMAGE):</p> <ul> <li>For Domino 14: domino-rest-api:1.1.4-r14</li> <li>For Domino 12: domino-rest-api:1.1.4-r12</li> </ul> </li> <li> <p>Docker image version for docker compose .env file from Harbor:</p> <ul> <li>For Domino 14: hclcr.io/domino/restapi:1.1.4-r14</li> <li>For Domino 12: hclcr.io/domino/restapi:1.1.4-r12</li> </ul> </li> </ul> <ol> <li> <p>Microsoft and Excel are registered trademarks or trademarks of Microsoft Corporation in the United States and/or other countries.\u00a0\u21a9</p> </li> </ol>"},{"location":"whatsnew/whatisnew.html","title":"What's new for Domino REST API v1.1.2 and earlier","text":"<p>Important</p> <ul> <li>Items marked in red are API changes that may impact your applications and should be reviewed before upgrading.</li> <li>Always be aware of features that have been deprecated in the current and earlier releases by checking deprecated features.</li> </ul> v1.1.2 - What's new or changed v1.1.1 - What's new or changed v1.1 - What's new or changed v1.0.14 - What's new or changed v1.0.12 - What's new or changed v1.0.11 - What's new or changed v1.0.10 - What's new or changed v1.0.9 - What's new or changed v1.0.8 - What's new or changed v1.0.7 - What's new or changed v1.0.6 - What's new or changed v1.0.5 - What's new or changed v1.0.4 - What's new or changed v1.0.3 - What's new or changed v1.0.2 - What's new or changed v1.0.1 - What's new or changed v1.0 - What's changed since the Early Access Release HCL Domino REST API formerly known as HCL Project KEEP <ol> <li> <p>Microsoft and Excel are registered trademarks or trademarks of Microsoft Corporation in the United States and/or other countries.\u00a0\u21a9</p> </li> </ol>"},{"location":"whatsnew/whatisnew.html#v112-whats-new-or-changed","title":"v1.1.2 - What's new or changed","text":"<p>Release date: February 24, 2025</p> <p>New features</p> <ul> <li> <p>Domino REST API Administrators can now create a support package from either the Management console or by using specific console commands on the Domino console. The support package is a collection of files that can help the support team to better identify, troubleshoot, and resolve encountered issues. For more information, see Create support package.</p> </li> <li> <p>Added the console command <code>tell restapi support</code> for creating a support package and <code>tell restapi support -includensf</code> for creating a support package that includes the <code>KeepConfig.nsf</code> when executed on the Domino console. For more information, see Domino REST API task.</p> </li> <li> <p>Added the console command <code>tell restapi refresh</code> to update the Domino REST API configuration without restarting the Domino REST API task.\u00a0For more information, see Domino REST API task.</p> </li> <li> <p>Added <code>GET webdav-v1/locks</code> endpoint to get a list of all currently locked OFBA documents.</p> </li> <li> <p>Added <code>DELETE webdav-v1/lock/{lockKey}</code> endpoint to remove the OFBA lock specified by a <code>lockKey</code> and to terminate the session of the user who owns the lock. The requestor must be the lock owner, the manager of the locked document's database, or a member of the <code>LocalKeepAdmins</code> group to remove the lock.</p> </li> <li> <p>Added the Prevent Design Refresh toggle in the Admin UI to flag the schema written to the database, so the Domino design task won't replace or delete the schema. For more information, see Edit a schema.</p> </li> <li> <p>Added the Required toggle in the Field Setting under Schema Management of the Admin UI to mark a field as a required field.</p> </li> <li> <p>Added the Validation Rules section under Schema Management of the Admin UI to allow the addition of rules for validating fields using Formula Language. For more information, see Change form configuration.</p> </li> <li> <p>Added support for schema backup.</p> </li> <li> <p>Preview: New options for logging in to the Admin UI</p> <p>There are new options for logging in to the Admin UI. One new option uses Domino REST API IdP and implements the OAuth process requiring user consent to log in. The other new option is using an external IdP to log in to the Admin UI that uses authorization code flow with PKCE. </p> <p>For more information on how to log in to the Admin UI, see Log in options. For more information on how to configure and use an external IdP to log in to the Admin UI, see Set up Admin UI external IdP login configuration. </p> </li> </ul> <p>Improvements</p> <ul> <li>Added an Overview link on the Admin UI landing page that opens the Domino REST API functional diagram when clicked. Clicking parts of the functional diagram directs you to corresponding documentation topics for easier navigation.</li> <li>Enhanced user experience when editing a supported Microsoft Office file attached to a Domino document as the editing session does not expire as long as the Microsoft Office application is open. </li> </ul> <p>Others</p> <ul> <li>Moved the <code>GET webdav-v1/login/idpList</code> endpoint from WebDAV OpenAPI to Basis OpenAPI and renamed it to <code>GET v1/auth/idpList</code> endpoint. Added the configFor query parameter as a required parameter of the endpoint to specify what external IdP to retrieve. </li> <li>Specifying a kyr file name in the <code>KeepCertStoreName</code> is set to be deprecated and is no longer encouraged. A warning will be issued if a kyr file name is specified.</li> <li>Using <code>KeepCertStoreName=*</code> to specify multiple explicit DNS names in the <code>KeepCertStoreName</code> is set to be deprecated and is no longer encouraged. While it is still functional, a warning will appear when used.</li> <li> <p>Added procedure for testing access formulas in Mode Settings under Schema Management of the Admin UI. For more information, see Test formulas.</p> </li> <li> <p>Installer jar files:</p> <ul> <li>For Domino 14: restapiInstall-r14.jar</li> <li>For Domino 12: restapiInstall-r12.jar</li> </ul> </li> <li> <p>Docker image version for docker compose .env file (CONTAINER_IMAGE):</p> <ul> <li>For Domino 14: domino-rest-api:1.1.2-r14</li> <li>For Domino 12: domino-rest-api:1.1.2-r12 </li> </ul> </li> <li> <p>Docker image version for docker compose .env file from Harbor:</p> <ul> <li>For Domino 14: hclcr.io/domino/restapi:1.1.2-r14</li> <li>For Domino 12: hclcr.io/domino/restapi:1.1.2-r12 </li> </ul> </li> </ul>"},{"location":"whatsnew/whatisnew.html#v111-whats-new-or-changed","title":"v1.1.1 - What's new or changed","text":"<p>Release date: December 02, 2024</p> <p>New features</p> <ul> <li> <p>When using the DRAPI IdP users can be locked out if they enter incorrect credentials several times. \u00a0You can now view and reinstate these users without waiting for the lockout period to end via the Management console. For more information, see Release suspended users.</p> </li> <li> <p>Users with valid JWT tokens can now be identified via the Users tab on the Management console. For more information, see Identify known users with valid JWT token. </p> </li> <li> <p>The Domino REST API configuration settings and where they are located can be identified via the Config src tab on the Management console. For more information, see Find configuration sources.</p> </li> <li> <p>Domino REST API administrators can now customize which API schemas and endpoints are available to meet specific requirements and use cases. For more information, see Customize available API schemas and endpoints.</p> </li> <li> <p>Implemented the Monaco Editor to the Text View mode on the Source tab on the Schema Management page of the Admin UI. With this implementation, users can now also edit the database schema from the Text View mode. For more information, see Edit database schema JSON.</p> </li> <li> <p>Added a new OpenAPI landing page that shows all the general API schemas and application-specific schemas, enabling users to easily find the schemas they require.</p> </li> <li> <p>Added OpenAPI schema and Swagger page for the WebDAV API that provides endpoints to perform remote Web content authoring operations that support the Office Round Trip Experience and Virtual Spreadsheet features of Domino REST API.</p> </li> <li> <p>Added the console command <code>tell restapi idpstatus</code> that shows the state of the configured identity providers when executed on the Domino console.   </p> </li> </ul> <p>Improvements</p> <ul> <li> <p>When adding a JSON object to the database schema on the Source tab on the Schema Management page in the Admin UI, the value of the JSON object is now validated to ensure the correct format based on the selected JSON object type.\u00a0For more information, see Edit database schema JSON.</p> </li> <li> <p>When adding fields to a form on the Schema Management page in the Admin UI, users can now identify the property of the field by hovering over the info icon beside the field name. For more information, see Change form configuration.</p> </li> <li> <p>The Clear passkey option has been removed from the Admin UI login page to avoid user confusion. This option only clears local storage data, not the actual passkey. To enhance the user experience, both the LOG IN WITH PASSWORD and LOG IN WITH PASSKEY options are available on the Admin UI login page. For more information, see Use WebAuthn (Passkey) to log in to Admin UI.</p> </li> <li> <p>Added the column attributes <code>twisties</code> and <code>responsesonly</code> to the <code>GET v1/lists</code> endpoint response when the columns parameter is set to true.</p> </li> <li> <p>Added hourly task to refresh TLS certificates when using the Domino Certificate Manager.</p> </li> <li> <p>Implemented the remaining special-text functions when retrieving a view. Special-text functions are calculated at runtime and include functions, such as <code>@DocNumber</code>, <code>@DocDecendants</code>, <code>@DocParentNumber</code>. </p> </li> </ul> <p>Resolved issues</p> <ul> <li>Forms or views with some special characters were not encoded when performing a REST call to retrieve the list of fields or columns, resulting in a 405 Method Not Allowed error response. </li> <li>Editing a schema in the Admin UI led to an empty page when the name of the schema form or view contained <code>#</code>.</li> <li>When calling\u00a0the <code>GET v1/lists/{name}</code>\u00a0endpoint using the view alias, the configured external names were not retrieved; instead, the column programmatic names were retrieved.</li> <li>Implemented various fixes resolving issues when using Domino Certificate Manager to enable HTTPs.</li> <li>Fixed the issue with the Domino REST API Task not always showing correctly via Domino Administrator Monitor pane.\u00a0</li> <li>Fixed the issues around Office Round Trip Editing in Windows using Webdav APIs.</li> </ul> <p>Others</p> <ul> <li> <p>Added tip for ensuring successful round-trip editing on Windows.</p> </li> <li> <p>Added Bruno as one of the tools you can use when dealing with REST APIs. For more information, see Bruno.</p> </li> <li> <p>Installer jar files:</p> <ul> <li>For Domino 14: restapiInstall-r14.jar</li> <li>For Domino 12: restapiInstall-r12.jar</li> </ul> </li> <li> <p>Docker image version for docker compose .env file (CONTAINER_IMAGE):</p> <ul> <li>For Domino 14: domino-rest-api:1.1.1-r14</li> <li>For Domino 12: domino-rest-api:1.1.1-r12 </li> </ul> </li> <li> <p>Docker image version for docker compose .env file from Harbor:</p> <ul> <li>For Domino 14: hclcr.io/domino/restapi:1.1.1-r14</li> <li>For Domino 12: hclcr.io/domino/restapi:1.1.1-r12 </li> </ul> </li> </ul>"},{"location":"whatsnew/whatisnew.html#v11-whats-new-or-changed","title":"v1.1 - What's new or changed","text":"<p>Release date: September 30, 2024</p> <p>New features</p> <ul> <li> <p>Domino REST API can now encrypt document fields and sign a document with keys stored in your Notes ID file. This protects data from unauthorized access and further enhances data security and integrity. </p> <p>To learn more about encrypting, descrypting, and signing, see Using encryption, decryption, and signing during development.</p> <p>To set up Domino REST API and enable this feature, see Set up Domino REST API for encryption, decryption, and signing.</p> </li> <li> <p>Domino REST API can now enable HTTPS setup in Domino using Domino's certificate configuration. To learn more, see Enable HTTPS using the Domino Certificate Manager. </p> </li> <li> <p>Added support for using external IdP for Office Round Trip Experience. For more information, see Setup external IdP for Office Round Trip Experience.</p> </li> <li> <p>Added <code>DELETE v1/nameddocument</code> endpoint to delete a named document.</p> </li> <li>Added <code>GET v1/nameddocument</code> endpoint to retrieve a named document using the appropriate name.</li> <li>Added <code>GET v1/nameddocumentlist</code> endpoint to retrieve a list of named documents.</li> <li> <p>Added <code>POST v1/nameddocument</code> endpoint to create and update a named document. </p> <p>Important</p> <p>A POST request replaces all fields listed in your schema. Ensure to include all the fields in the POST request body and the corresponding values you want to retain and overwrite. </p> </li> <li> <p>Added <code>GET v1/richtext/{richTextAs}/{unid}</code> endpoint that returns a stream of data from a Rich Text field based on the specified format. The endpoint is usable for all Rich Text processors and combines the functionalities of the following endpoints:</p> <ul> <li><code>GET v1/richtext/markdown/{unid}</code></li> <li><code>GET v1/richtext/mime/{unid}</code></li> <li><code>GET v1/richtext/plain/{unid}</code></li> </ul> </li> </ul> <p>Improvements</p> <ul> <li> <p>Domino REST API Task</p> <p>The Domino Addin Task has been updated with the following:</p> <ul> <li>When Domino REST API is started, it displays the messages <code>REST API: Starting...</code> and then <code>REST API Started</code> instead of printing a JSON status message. </li> <li>When Domino REST API is stopped,  it now displays the message <code>REST API: Shutdown</code> instead of a long output of JSON.</li> <li>The Domino REST API Java process is now integrated with the Domino process, resulting in a better-integrated product and improved reliability.</li> <li>The Domino REST API Statistics can now be accessed via the Domino Console <code>SHOW STAT</code> command. To see just the Domino REST API statistics, use the <code>SHOW STAT restapi</code> command.</li> <li>The <code>KeepManagementURL</code> line in the <code>notes.ini</code> is no longer necessary. If set, it will be ignored.</li> </ul> </li> <li> <p>Added an option of selecting additional modes when executing Quick Config.</p> </li> <li> <p>Implemented UI enhancements to the Source tab under Schema Management in the Admin UI. </p> </li> <li> <p>Added an option for exporting database schema as JSON file by copying the schema and then creating a JSON file containing the copied schema. For more information, see Export database schema as JSON file. </p> </li> </ul> <p>Resolved issues</p> <ul> <li>The <code>GET admin-v1/access/users</code> endpoint returned a 404 No users found with requested name error when the value entered for the query parameter <code>startsWith</code> included a slash character.</li> <li>Swedish characters were not correctly encoded and displayed in the response body when Office Round Trip Experience with RichText content was attempted using <code>POST /v1/document</code> endpoint.</li> <li>Issues were encountered when logging in with MS-OFBA via Internet Explorer 8, as some login functions were not supported by the web browser.</li> </ul> <p>Others</p> <ul> <li> <p>Updated Edit database schema JSON and Export schema as JSON file based on the UI enhahcements to the Source tab under Schema Management.</p> </li> <li> <p>The following endpoints have been replaced with the <code>GET v1/richtext/{richTextAs}/{unid}</code> endpoint:</p> <ul> <li><code>GET v1/richtext/markdown/{unid}</code></li> <li><code>GET v1/richtext/mime/{unid}</code></li> <li><code>GET v1/richtext/plain/{unid}</code></li> </ul> </li> <li> <p>Installer jar files:</p> <ul> <li>For Domino 14: restapiInstall-r14.jar</li> <li>For Domino 12: restapiInstall-r12.jar</li> </ul> </li> <li> <p>Docker image version for docker compose .env file (CONTAINER_IMAGE):</p> <ul> <li>For Domino 14: domino-rest-api:1.1.0-r14</li> <li>For Domino 12: domino-rest-api:1.1.0-r12 </li> </ul> </li> <li> <p>Docker image version for docker compose .env file from Harbor:</p> <ul> <li>For Domino 14: hclcr.io/domino/restapi:1.1.0-r14</li> <li>For Domino 12: hclcr.io/domino/restapi:1.1.0-r12 </li> </ul> </li> </ul>"},{"location":"whatsnew/whatisnew.html#v1014-whats-new-or-changed","title":"v1.0.14 - What's new or changed","text":"<p>Release date: June 13, 2024</p> <p>New features</p> <ul> <li> <p>Preview: Virtual Spreadsheet </p> <p>The Virtual Spreadsheet feature allows you to open up and edit view entries using Microsoft Excel <sup>1</sup>. This feature uses the round trip editing feature of Domino REST API for Microsoft Office applications. For more information, see Set up Virtual Spreadsheet.</p> </li> <li> <p>Added ability for a third-party Rich Text processor to process incoming Rich Text. For more information, see Incoming Rich Text Processor. </p> </li> </ul> <p>Improvements</p> <ul> <li>Added support for <code>contains</code>, <code>startswith</code>, and <code>endswith</code> in OData functions.</li> <li>Added the <code>includeAttachmentMetadata</code> parameter to the <code>GET v1/attachmentnames</code> endpoint to output the attachment file size, created date, and modified date.</li> <li>Added an array that contains the top-level child document UNIDs to the <code>@meta</code> object in the response of the <code>GET v1/document/{unid}</code> and <code>GET v1/docmeta/{unid}</code> endpoints.</li> <li> <p>Uses the correct mail template based on the Domino version when creating a second calendar using the <code>POST pim-v1/calendar</code> endpoint.</p> </li> <li> <p>Implemented UI/UX enhancements in the Application Management page in the Admin UI.</p> </li> </ul> <p>Resolved issues</p> <ul> <li>The <code>POST v1/run/formula</code> endpoint did not allow the formula to run unless the user was in the server config allow run formula agents.</li> </ul> <p>Others</p> <ul> <li>Implemented documentation updates.</li> <li> <p>Installer jar files:</p> <ul> <li>For Domino 14: restapiInstall-r14.jar</li> <li>For Domino 12: restapiInstall-r12.jar</li> </ul> </li> <li> <p>Docker image version for docker compose .env file (CONTAINER_IMAGE):</p> <ul> <li>For Domino 14: domino-rest-api:1.0.14-r14</li> <li>For Domino 12: domino-rest-api:1.0.14-r12 </li> </ul> </li> <li> <p>Docker image version for docker compose .env file from Harbor:</p> <ul> <li>For Domino 14: hclcr.io/domino/restapi:1.0.14-r14</li> <li>For Domino 12: hclcr.io/domino/restapi:1.0.14-r12</li> </ul> </li> </ul>"},{"location":"whatsnew/whatisnew.html#v1012-whats-new-or-changed","title":"v1.0.12 - What's new or changed","text":"<p>Release date: April 25, 2024</p> <p>New features</p> <ul> <li>Added <code>GET v1/richtextprocessors</code> endpoint to return a list of the available methods of returning Rich Text.</li> <li> <p>Added <code>POST v1/run/agentWithContext</code> endpoint to specify an array of UNIDs to run an agent on. </p> <p>Note</p> <p>The agent must use <code>NotesSession.DocumentContext</code> to access the document.</p> </li> </ul> <p>Improvements</p> <ul> <li> <p>Extended how Rich Text is processed. For more information, see Rich Text extension.</p> </li> <li> <p>Improved OData filter processing by adding support for <code>in</code>, <code>contains</code>, <code>startswith</code>, and <code>endswith</code> clauses.</p> </li> <li> <p>Enhanced user experience by allowing user to activate a form and bringing user directly into form edit mode by clicking the pencil icon corresponding to an inactive form in the Database Form tab in the Admin UI and confirming form activation.</p> </li> <li> <p>Implemented UI/UX enhancements in the OAuth Consents page in the Admin UI.</p> </li> <li>Enhanced the PIM Swagger documentation. </li> </ul> <p>Resolved issues</p> <ul> <li>An intermittent issue occurred where deleting a schema might have caused other schemas not to load or be created for that same database.</li> <li>Running <code>tell restapi quit</code> might have crashed the Domino server.</li> <li>An issue occurred with <code>pim-v1/attachments/{unid}/{attachmentName}</code> where deleting the attachment did not remove the attachment's icon.</li> <li>The External Name field in the Admin UI was blank when editing a View and the column title has DBCS characters.</li> </ul> <p>Others</p> <ul> <li>Implemented documentation updates.</li> <li> <p>Installer jar files:</p> <ul> <li>For Domino 14: restapiInstall-r14.jar</li> <li>For Domino 12: restapiInstall-r12.jar</li> </ul> </li> <li> <p>Docker image version for docker compose .env file (CONTAINER_IMAGE):</p> <ul> <li>For Domino 14: domino-rest-api:1.0.12-r14</li> <li>For Domino 12: domino-rest-api:1.0.12-r12 </li> </ul> </li> <li> <p>Docker image version for docker compose .env file from Harbor:</p> <ul> <li>For Domino 14: hclcr.io/domino/restapi:1.0.12-r14</li> <li>For Domino 12: hclcr.io/domino/restapi:1.0.12-r12 </li> </ul> </li> </ul>"},{"location":"whatsnew/whatisnew.html#v1011-whats-new-or-changed","title":"v1.0.11 - What's new or changed","text":"<p>Release date: March 27, 2024</p> <p>New features</p> <ul> <li> <p>Added the Add New Form Schema button on the Database Forms page in the Admin UI to allow the creation of a Form schema for a form that does not exist in the design of the database. This is useful for the profile document update introduced in the v1.0.10 release and can also be used to add or retrieve documents when no form exists in the design. For more information, see Add new form schema.</p> </li> <li> <p>Added OData support for queries using <code>$select</code>.</p> </li> <li>Added OData support for the ne (not equal) operator in a filter.</li> </ul> <p>Improvements</p> <ul> <li>Provides column hidden metadata when using the <code>v1/lists</code> endpoint and setting the value of the columns parameter to true.</li> <li>Provides additional field metadata specifying if a datetime form field shows a date, a time, or both when retrieving a list of fields from the <code>setup-v1/design/forms/{formName}</code> endpoint.</li> <li> <p>Sets the field type correctly, depending on how the field is defined on the form, when adding a datetime field to a Form schema in the Admin UI. The field type is set to:</p> <ul> <li>date-time when the datetime field with date and time is selected.</li> <li>date when the datetime field with only date is selected.</li> <li>string when the datetime field with only time is selected.  </li> </ul> </li> <li> <p>Changed the Inactive-Active toggle for activating a form on the Database Forms page in the Admin UI to a 3-dot icon menu that displays available options when clicked.</p> </li> <li>Added an Activate Form dialog in the Admin UI to get user confirmation for activating an inactive form when the user clicks the edit icon corresponding to an inactive form.</li> <li>Enhanced processing speed for retrieving a list of schemas with a large number of schemas in the Admin UI.</li> </ul> <p>Resolved issues</p> <ul> <li>The error \u201cbadly formatted directory string\u201d  was produced when creating a certificate via the Management page.</li> <li>Trace logging did not work on Windows. </li> <li>A different form was shown to be activated when activating a form that has been searched.  </li> </ul> <p>Others</p> <ul> <li>Implemented documentation updates.</li> <li>The terms Configure and Unconfigure in relation to database forms in the Admin UI have been changed to Activate and Deactivate, respectively.</li> <li> <p>Installer jar files:</p> <ul> <li>For Domino 14: restapiInstall-r14.jar</li> <li>For Domino 12: restapiInstall-r12.jar</li> </ul> </li> <li> <p>Docker image version for docker compose .env file (CONTAINER_IMAGE):</p> <ul> <li>For Domino 14: domino-rest-api:1.0.11-r14</li> <li>For Domino 12: domino-rest-api:1.0.11-r12 </li> </ul> </li> <li> <p>Docker image version for docker compose .env file from Harbor:</p> <ul> <li>For Domino 14: hclcr.io/domino/restapi:1.0.11-r14</li> <li>For Domino 12: hclcr.io/domino/restapi:1.0.11-r12 </li> </ul> </li> </ul>"},{"location":"whatsnew/whatisnew.html#v1010-whats-new-or-changed","title":"v1.0.10 - What's new or changed","text":"<p>Release date: February 22, 2024</p> <p>New features</p> <ul> <li>Added <code>POST v1/profiledocument</code> endpoint to create and update an existing profile document. </li> </ul> <p>Important</p> <p>A POST request replaces all fields listed in your schema. Ensure to include all the fields in the POST request body and the corresponding values you want to retain and overwrite.</p> <ul> <li>Added <code>DELETE v1/profiledocument</code> endpoint to delete a profile document as long as the schema allows it.</li> <li>Added <code>GET setup-v1/admin/purge</code> endpoint to discover scopes that no longer have a valid schema because the schema no longer exists, the schema has invalid JSON, a corrupted NSF, or the NSF no longer exists.</li> <li> <p>Added  <code>POST setup-v1/admin/purge</code> endpoint to specify the schema and scope information to remove using the GET setup-v1/admin/purge endpoint response.</p> </li> <li> <p>Added Microsoft Office round-trip editing capability to simplify document editing experience by launching Office documents directly into their native applications and saving changes back to the server. For more information, see Setup Office Round Trip Experience.</p> </li> </ul> <p>Improvements</p> <ul> <li> <p>The <code>GET v1/profiledocument</code> endpoint has been updated. Previously, this endpoint returned the complete profile document by default, but starting this release, you must define a schema to get a Profile document. The need for the schema also applies to the new <code>POST v1/profiledocument</code> and <code>DELETE v1/profiledocument</code> endpoints. </p> <p>Profile documents do not always have a Form associated with them. In such cases, you must create a schema for the Form named \"Profile\" (case sensitive). Profile documents without a Form will look for the \"Profile\" schema and return the error \"No form and mode configuration found for Profile/default\" if the schema doesn't exist.</p> <p>The easiest way to create the \"Profile\" schema is to create a Form named \"Profile\" in the database containing all fields you need to retrieve or update and then add the Form Schema. Alternatively, you can create the schema programmatically by following the steps:</p> <ol> <li>Call the <code>GET setup-v1/schema</code> endpoint to get the schema where you want to add the \"Profile\" form.</li> <li>Copy the response to a text editor, and modify it by adding the \"Profile\" form and the fields required using other Form schemas as a guide.</li> <li>Update the whole schema using the <code>POST setup-v1/schema</code> endpoint. </li> </ol> <p>Make sure to save a copy of the <code>GET setup-v1/schema</code> response in case you need to revert to the previous version. In a future release, you will be able to add a Form schema for a form that doesn't exist in the database and will be able to add the Profile using this method. </p> <p>Note</p> <p>The <code>GET v1/profiledocument</code> endpoint no longer creates a profile document. Instead, use the <code>POST v1/profiledocument</code> endpoint to create one.</p> </li> <li> <p>Reduced heap memory used by Domino REST API.</p> </li> <li>Added option to use a named key when using the <code>v1/profiledocument</code> endpoints.</li> <li>Added the date time attributes of a datetime field when executing the <code>setup-v1/design/forms/{designName}</code> endpoint.</li> </ul> <p>Resolved issues</p> <ul> <li>Passkey on Admin UI didn't work on newer versions of Safari.</li> <li>The <code>setup-v1/design/{designType}/{designName}</code> endpoint returned shared libraries.</li> </ul> <p>Others</p> <ul> <li>Implemented documentation updates.</li> <li> <p>Installer jar files:</p> <ul> <li>For Domino 14: restapiInstall-r14.jar</li> <li>For Domino 12: restapiInstall-r12.jar</li> </ul> </li> <li> <p>Docker image version for docker compose .env file (CONTAINER_IMAGE):</p> <ul> <li>For Domino 14: domino-rest-api:1.0.10-r14</li> <li>For Domino 12: domino-rest-api:1.0.10-r12 </li> </ul> </li> <li> <p>Docker image version for docker compose .env file from Harbor:</p> <ul> <li>For Domino 14: hclcr.io/domino/restapi:1.0.10-r14</li> <li>For Domino 12: hclcr.io/domino/restapi:1.0.10-r12 </li> </ul> </li> </ul>"},{"location":"whatsnew/whatisnew.html#v109-whats-new-or-changed","title":"v1.0.9 - What's new or changed","text":"<p>Release date: December 14, 2023</p> <p>New features</p> <ul> <li> <p>Added full support for Domino 14.</p> <p>To utilize the newer JVM functionality provided by Domino 14, we  now provide both a Domino 12 and a Domino 14 installer, as well as Docker images for both platforms.</p> <p>Older versions of the Domino REST API will run on Domino 14, but may have issues with certain endpoints. It is suggested that you follow the following steps to upgrade your Domino 12 server with the Domino REST API to Domino 14:</p> <ol> <li>Stop your Domino 12 server.</li> <li>Remove <code>restapi</code> from the <code>ServerTasks</code> line in <code>notes.ini</code>.</li> <li>Upgrade your Domino 12 server to Domino 14.</li> <li>Start your Domino 14 server.</li> <li>Stop your Domino 14 server.</li> <li>Install the Domino 14 version of the Domino REST API.</li> <li>Start Domino.</li> </ol> </li> <li> <p>Added <code>POST v1/query/qrp/json</code> endpoint to perform a DQL query to get back QueryResultsProcessor JSON results. For an example of usage, see Swagger UI. </p> </li> </ul> <p>Improvements</p> <ul> <li>Added a new option on the <code>GET v1/lists</code> endpoint by adding a filter parameter to return a list of available views containing the case-insensitive filter text.</li> <li>Added warnings to the <code>POST setup-v1/schema</code> endpoint if design elements specified in the schema are not found in the database.</li> <li>Added a new option to the<code>POST setup-v1/schema</code> endpoint by enabling the setting of <code>dryRun=true</code> to get the response and verify there are no warnings without creating the schema.</li> <li>Enabled retrieval of the document's parent UNID in the response (@parentDocument) when retrieving view contents via <code>GET v1/lists/{name}</code> endpoint by setting <code>metaAdditional=true</code>.</li> <li>Updated the access-control-allow-methods with the correct set of allowed methods.</li> </ul> <p>Resolved issues</p> <ul> <li>Shared Fields, Shared Actions and Item Definitions were not returned when retrieving them from the <code>GET setup-v1/design/{designType}/{designName}</code> endpoint.</li> <li>Access-control-allow-headers were not being set in the CORS response.</li> <li>A returned field specified as Rich Text in the Form and Schema was not actually Rich Text on the document. </li> <li>Views or Folders were retrieved even if the column was defined as Show Responses only.</li> </ul> <p>Others</p> <ul> <li> <p>Removed the use of <code>dataSource</code> or a path to an NSF in the <code>dataSource</code> parameter by most <code>admin-v1</code> endpoints. See Deprecated features for more information and recommendation.</p> </li> <li> <p>Implemented various documentation updates.</p> </li> <li> <p>Starting this release, there will be two installer jar files:</p> <ul> <li>For Domino 14: restapiInstall-r14.jar</li> <li>For Domino 12: restapiInstall-r12.jar</li> </ul> </li> <li> <p>Docker image version for docker compose .env file (CONTAINER_IMAGE):</p> <ul> <li>For Domino 14: domino-rest-api:1.0.9-r14</li> <li>For Domino 12: domino-rest-api:1.0.9-r12 </li> </ul> </li> <li> <p>Docker image version for docker compose .env file from Harbor:</p> <ul> <li>For Domino 14: hclcr.io/domino/restapi:1.0.9-r14</li> <li>For Domino 12: hclcr.io/domino/restapi:1.0.9-r12 </li> </ul> </li> </ul>"},{"location":"whatsnew/whatisnew.html#v108-whats-new-or-changed","title":"v1.0.8 - What's new or changed","text":"<p>Release date: November 14, 2023</p> <p>New features</p> <ul> <li>OAuth will auto consent if a valid refresh token exists for a user scope application combination.</li> <li> <p>Added the following OAuth consent endpoints:</p> <ul> <li><code>GET v1/consents</code> returns all valid consents for the current user.</li> <li><code>GET v1/consent/{client_id}</code> returns all valid OAuth consents for the current user associated with the application app <code>id (client_id)</code>.</li> <li><code>DELETE v1/consents</code> revokes all OAuth consents that the current user has access to.</li> <li><code>DELETE v1/consent/revoke/{unid}</code> revokes a specific OAuth consent. The <code>unid</code> is available in the response of the consent <code>GET</code> endpoints.</li> </ul> <p>Important</p> <ul> <li>Users in the LocalKeepAdmins group or have manager access to the OAuth database (<code>oauth.nsf</code>) have access to all valid consents. </li> <li>Consent endpoints that act on All consents the user has access to will act on all valid consents.</li> </ul> </li> <li> <p>Added endpoint <code>GET v1/attachmentnames/{unid}</code> to return a list of attachments attached to this document.</p> </li> <li> <p>Added endpoint <code>GET v1/preview</code> to list endpoints that are marked as preview, may be considered beta endpoints.</p> </li> <li> <p>Added ability to view and revoke OAuth consents in the AdminUI via the OAuth Consents pane.</p> </li> </ul> <p>Improvements</p> <ul> <li> <p>Added the ability to clone form modes and compare form modes in the AdminUI.</p> </li> <li> <p>Added the ability to export a schema and import a schema in the AdminUI.</p> </li> <li> <p>Added search feature in Schema Management to easily look for forms, views, and agents.  </p> </li> <li>Added ability to configure or unconfigure all database forms at the same time.</li> </ul> <p>Resolved issues</p> <ul> <li><code>POST v1/run/agent</code> did not run when using the agent's alias.</li> <li><code>POST v1/run/agent</code> did not run in the user's context when the agent is set to Run as Web User.</li> <li>Calling <code>POST /attachments/{unid}</code> multiple times did not render the attachments correctly in Notes.</li> <li><code>POST v1/query</code> wasn't returning <code>richtext</code> fields as plain when <code>richTextAs=plain</code> was set.</li> </ul> <p>Others</p> <ul> <li>Implemented various documentation updates.</li> <li>Docker image version for docker compose .env file (CONTAINER_IMAGE) is domino-rest-api:1.0.8.</li> <li>Docker image version for docker compose .env file from Harbor is hclcr.io/domino/restapi:1.0.8.</li> </ul>"},{"location":"whatsnew/whatisnew.html#v107-whats-new-or-changed","title":"v1.0.7 - What's new or changed","text":"<p>New features</p> <ul> <li>Added endpoint <code>GET v1/richtext/plain/{unid}</code> to retrieve just plain text from a <code>richtext</code> field.</li> <li>Added endpoint <code>POST v1/bulk/etag</code> to give an entity tag (ETag) to specified documents. The endpoint is also useful in finding if a doc has been updated or deleted.</li> <li>Added endpoint <code>POST v1/bulk/folder</code> to add or remove documents to or from folders.</li> <li> <p>Added endpoint <code>GET v1/logout</code> for OIDC compliance. <code>POST v1/logout</code> is still recommended as a browser's PREFETCH could potentially cause issues.</p> </li> <li> <p>Added support for Azure Active Directory as an IdP.</p> </li> <li> <p>Added ability to directly edit a schema JSON in the Admin UI.</p> </li> <li>Added the ability to specify multiple filter keys for <code>GET v1/lists/{name}</code>.</li> <li>Added the ability to filter by top-level category in <code>GET v1/lists/{name}</code>.</li> </ul> <p>Improvements</p> <ul> <li>Sped up the <code>setup-v1/admin/quickconfig</code> endpoint significantly, which sped up Admin UI Quick Config.</li> <li>Added a file selection button for <code>POST v1/attachments/{unid}</code> in the Swagger UI to select attachments for a document.</li> <li>Implemented UI improvements in Schema Management in the Admin UI for better user experience. </li> </ul> <p>Resolved issues</p> <ul> <li>A valid sort may fail in <code>GET v1/lists/{name}</code> under certain circumstances.</li> <li>A document, which was deleted but in an abnormal state and showing up in a view, generated an error when retrieved via <code>v1/lists/{name}</code>.</li> <li>Creating a view via <code>POST setup-v1/design</code> would cause an NPE if the selection formula was left off.</li> </ul> <p>Others</p> <ul> <li>Implemented various documentation updates.</li> <li>Starting this release, the installer jar file name now includes the Domino version, for example, <code>restapiInstall-r12.jar</code>. </li> <li>Docker image version for docker compose .env file (CONTAINER_IMAGE) is domino-rest-api:1.0.7. </li> <li>Docker image version for docker compose .env file from Harbor is hclcr.io/domino/restapi:1.0.7.</li> </ul>"},{"location":"whatsnew/whatisnew.html#v106-whats-new-or-changed","title":"v1.0.6 - What's new or changed","text":"<p>New features</p> <ul> <li> <p>HCL Domino REST API now supports WebAuthn allowing users to log in to the Admin UI using a passkey.</p> </li> <li> <p>Introduced access control for scopes via maximum access level to control the maximum access anyone using a scope might have. For example, if a scope's maximum access level is Editor and you are a Manager, the API runs as Editor. This feature doesn't increase a user's access level. The default for existing scopes is Editor.</p> </li> <li> <p>Introduced <code>$SETUP</code> scope that can be added to an application, which needs access to <code>$SETUP</code> endpoints. For more information, see Scopes.</p> </li> <li> <p>Added <code>ftSearchQuery</code> to the <code>GET v1/lists/{name}</code> endpoint to filter a view based on a full text search query.</p> </li> <li>Added column multi-value delimiter and column position when retrieving information about views utilizing the <code>GET v1/lists?columns=true</code> endpoint. </li> <li>Enabled retrieval of Rich Text embedded images by the <code>GET v1/attachments/{unid}/{attachmentName}</code> endpoint. When retrieving the html of a <code>richtext</code> field, embedded images come back in an  tag such as <code>&lt;img src=\"/test.nsf/0/a0286fbd3bdc1d5bc12222d5006ac837/Photo/0.84?OpenElement&amp;FieldElemFormat=gif\"&gt;</code>. Use base64 encoding to encode the image src URL and pass that in as the <code>attachmentName</code>. </li> </ul> <p>Improvements</p> <ul> <li>A database view can now be edited in the Admin UI to select which columns to include. Column external names can now also be set or edited.</li> <li>Added ability to mark a document as read (<code>markRead=true</code>) or unread (<code>markUnread=true</code>) when getting a view that contains those documents using the <code>GET v1/lists/{name}</code> endpoint.</li> <li>Added the ability to select only distinct documents (<code>distinctDocuments=true</code>) when retrieving view contents via the <code>GET v1/lists/{name}</code> endpoint.</li> <li>Added ability to mark a document as read (<code>markRead=true</code>) or unread (<code>markUnread=true</code>) when retrieving a document using the <code>GET v1/document/{unid}</code> endpoint.</li> <li>Added ability to mark a document as unread (<code>markUnread=true</code>) when updating a document using the <code>PUT/PATCH v1/document/{unid}</code> endpoints.</li> <li>Added ability to retrieve a database's DXL utilizing the <code>GET setup-v1/dxl</code> endpoint.</li> <li>Updated the Domino REST API serializer / deserializer so that only items specific to the fields and their types are added to the schema when creating or updating the schema. There should be no issues with pre-existing schemas, and the schema will update next time something in that schema has changed. </li> </ul> <p>Resolved issues</p> <ul> <li>An issue occurred with <code>GET setup-v1/design/{designType}/{designName}</code> when the <code>designName</code> contained characters that would normally be encoded.</li> </ul> <p>Others</p> <ul> <li>Docker image version for docker compose .env file (CONTAINER_IMAGE) is docker.qs.hcllabs.net/hclcom/projectkeep-r12:DRAPI-1.0.6. </li> <li>Docker image version for docker compose .env file from Harbor is hclcr.io/domino/restapi:1.0.6.</li> </ul>"},{"location":"whatsnew/whatisnew.html#v105-whats-new-or-changed","title":"v1.0.5 - What's new or changed","text":"<p>New features</p> <ul> <li>Added <code>v1/docmeta/{unid}</code> endpoint that includes metadata information about the document specified.</li> <li>Added <code>richTextAs</code> parameter to the <code>v1/bulk/create</code>, <code>v1/bulk/unid</code>, <code>v1/bulk/update</code> and <code>v1/lists/{name}</code> endpoints when using <code>documents=true</code>.</li> <li>Added a list of Server Commands to the Management Page's Domino Server console.</li> </ul> <p>Improvements</p> <ul> <li>Refined Rich Text MIME representation and Rich Text Markdown representation.</li> <li>An error message now appears when deleting an ACL role using <code>admin-v1/acl/roles/{rolename}</code> while a member in the ACL still has that role.</li> <li>Returns the rendered Markdown as HTML when retrieving a document where the Rich Text representation is HTML and the <code>richtext</code> field contains Markdown. </li> <li>Searches for the text/markdown MIME part of the document and returns it if existing when retrieving a document where the Rich Text representation is Markdown but stored as MIME.</li> <li>Updated the Database Views activation page in Schema Management for better user experience.   </li> </ul> <p>Resolved issues</p> <ul> <li><code>admin-v1/access/groups</code> parameters weren't working as expected.</li> <li><code>v1/scope/form/{form}</code> didn't return the form information when using the form's alias.</li> <li>The default configuration wasn't set for some attributes when using the Admin UI Quick Config or the <code>setup-v1/admin/quickconfig</code> endpoint.</li> <li><code>v1/bulk/delete</code> returned an error instead of deleting the document.</li> </ul> <p>Others</p> <ul> <li>Changed default Rich Text representation to MIME in the documentation.</li> <li>Docker image version for docker compose .env file (CONTAINER_IMAGE) is docker.qs.hcllabs.net/hclcom/projectkeep-r12:1.18.3. </li> </ul>"},{"location":"whatsnew/whatisnew.html#v104-whats-new-or-changed","title":"v1.0.4 - What's new or changed","text":"<p>New features </p> <ul> <li>Added parameter <code>metaAdditional=</code> to the <code>/lists/{name}</code> endpoint in <code>api/v1</code> to return additional metadata for each row. Currently just returning the Form name of the underlying document.</li> <li>Added the OpenID <code>/userinfo</code> endpoint in <code>api/v1</code> for OIDC compliance.</li> </ul> <p>Improvements</p> <ul> <li>Increased throughput performance of most endpoints.</li> <li>Modified the <code>/admin/quickconfig</code> endpoint in <code>api/setup-v1</code> to add default values to some Schema items if not specified.</li> </ul> <p>Resolved issues</p> <ul> <li>A page in the Admin UI may time out while bringing up a list of databases if there are a lot of databases.</li> <li>The <code>/attachments/{unid}</code> endpoint in <code>api/v1</code> didn't honor the <code>fieldName=</code> parameter. This parameter specifies the <code>richtext</code> field to attach to, instead, it attached to the document.</li> </ul> <p>Others</p> <ul> <li>Docker image version for docker compose .env file (CONTAINER_IMAGE) is docker.qs.hcllabs.net/hclcom/projectkeep-r12:1.17.0.</li> </ul>"},{"location":"whatsnew/whatisnew.html#v103-whats-new-or-changed","title":"v1.0.3 - What's new or changed","text":"<p>New features </p> <ul> <li><code>/lists/{listname}</code> API has a new parameter <code>keyAllowPartial=true</code> added to allow partial key matches.</li> <li>New endpoint added to the setup API, call <code>DELETE /admin/cache</code> to reset the Domino REST API Scope and Schema cache, call if you are modifying Scopes or Schemas directly in Notes as opposed to the API or the Admin UI.</li> </ul> <p>Improvements</p> <ul> <li>Removed invalid Scopes (<code>openid</code> and <code>email</code>) from the Swagger UI dropdown list of APIs / Scopes.</li> </ul> <p>Resolved issues</p> <ul> <li>The Admin UI became unresponsive when populating the Database list when defining a new Schema when there were a lot of databases on the server.</li> <li>A JWT token failed to decode if it's claims contained extended characters.</li> <li>On a Windows Domino server, the <code>.wellknown</code> issuer may have been wrong.</li> <li>In various endpoints, an error may have been thrown if a Rich Text CD record returns invalid or unknown data. This issue may have also prevented a database from showing up in the Admin UI.</li> <li>When calling the <code>/design/{designType}/{designName}</code> and using the <code>nsfPath</code> parameter as opposed to the <code>dataSource</code> parameter resulted in the API trying to return that design information from KeepConfig.nsf instead of the specified database.</li> </ul> <p>Others</p> <ul> <li>Docker image version for docker compose .env file (CONTAINER_IMAGE) is docker.qs.hcllabs.net/hclcom/projectkeep-r12:1.15.0. </li> </ul>"},{"location":"whatsnew/whatisnew.html#v102-whats-new-or-changed","title":"v1.0.2 - What's new or changed","text":"<p>New features</p> <ul> <li> <p>Added ability to view the Domino Server console live as well as send commands from the Domino REST API management page if using admin credentials. See Domino Console Configuration for more information.</p> </li> <li> <p>Added ability to send Domino Server console commands via API if using admin credentials.</p> </li> <li>Added ability to view the schema json within the Admin UI.</li> <li>Added ability for customers to use a different name for fields (like an alias) in a schema,\u00a0 good for obfuscating field names or for descriptive naming.</li> </ul> <p>Improvements</p> <ul> <li>Increased speed of design element population in the Admin UI.</li> <li>Increased stability of the Admin UI when the retrieving complex databases.</li> <li>The <code>setup-v1/design</code> json output been modified so the design element key is the UNID, previously the key was the design element name. This change was made because design element names are not necessarily unique and part of the fix for design element population noted above.</li> </ul> <pre><code>previous versions :\n\"forms\": {\n          \"ReportNotes\": {\n              \"@unid\": \"87A0390EA55C0D4C852567710005FF52\",\n              \"@name\": \"ReportNotes\",\n              ...\n\ncurrent version :\n\"forms\": {\n        \"87A0390EA55C0D4C852567710005FF52\": {\n            \"@unid\": \"87A0390EA55C0D4C852567710005FF52\",\n            \"@name\": \"ReportNotes\",\n            ...\n</code></pre> <p>Others</p> <ul> <li>Docker image version for docker compose .env file (CONTAINER_IMAGE) is docker.qs.hcllabs.net/hclcom/projectkeep-r12:1.12.0.</li> </ul>"},{"location":"whatsnew/whatisnew.html#v101-whats-new-or-changed","title":"v1.0.1 - What's new or changed","text":"<p>New features</p> <ul> <li> <p>The installer now has an upgrade option. Please see the installation instructions for more information.</p> </li> <li> <p>A Quick Config option is now available to the Admin UI (lightning bolt on the left side). This feature creates a populated Schema and Scope based on the database you choose.</p> <ul> <li>The Schema is configured with all visible Forms and Views.</li> <li>All non-system fields are added to the Forms.</li> </ul> </li> </ul> <p>Improvements</p> <ul> <li> <p>Added the <code>PATCH</code> verb to the APIs <code>/api/v1/document/{unid}</code> and <code>/api/v1/bulk/update</code> allowing a document update without the need to provide all fields in the schema.</p> </li> <li> <p>Field schema has been modified. The boolean fields <code>readOnly</code> and <code>writeOnly</code> were removed and replaced with String field <code>fieldAccess</code> which specifies the access of this field, either <code>RW</code>, <code>RO</code> or <code>WO</code>. If existing schemas have the old fields, they will be still processed correctly.</p> </li> <li><code>null</code> has been added as valid json for document updating, setting a field value to <code>null</code> will remove that field from the document.</li> <li>Inactive scopes will no longer show in the Swagger UI's drop down list since they're not available.</li> <li>Performance improvements.</li> </ul> <p>Resolved issues</p> <ul> <li>The Domino restapi task may not successfully start on Linux Domino.</li> <li>A document was prevented from being created or updated if one of it's multi-value fields had empty value(s).</li> <li>Fixed multiple issues around odata.</li> </ul> <p>Others</p> <ul> <li>Docker image version for docker compose .env file (CONTAINER_IMAGE) is docker.qs.hcllabs.net/hclcom/projectkeep-r12:1.10.0.</li> </ul>"},{"location":"whatsnew/whatisnew.html#v10-whats-changed-since-the-early-access-release","title":"v1.0 - What's changed since the Early Access Release","text":"<p>Improvements</p> <ul> <li>The <code>core</code> api (<code>/api/v1</code>) has changed name, it's now <code>basis</code>, but still has the same path (<code>/api/v1</code>).</li> <li>The <code>design</code>, <code>schema</code>, <code>scope</code>, and some <code>administrative</code> APIs that were in the <code>core</code> api have been moved to the <code>setup</code> api (<code>/api/setup-v1</code>). This has been done so that these apis can be disabled from a user facing server.</li> <li>The Domino REST API landing page now has a single button for the Swagger UI, once in the Swagger UI, use the drop down at the top right to switch between API specifications.</li> </ul>"},{"location":"whatsnew/whatisnew.html#hcl-domino-rest-api-formerly-known-as-hcl-project-keep","title":"HCL Domino REST API formerly known as HCL Project KEEP","text":"<p>HCL Project KEEP was introduced as an Early Adopter program. We've re-branded HCL Project KEEP to HCL Domino REST API to align with the HCL VOLT MX GO strategy. You will find that there are still references to the KEEP branding throughout the product and in the documentation. Refer to the KEEP branding examples table to see areas and documentation pages where the KEEP branding is still prevalent.</p> KEEP branding examples Enabling a database The Domino REST API CLI Running Agents: keepAgents.nsf Parameters - AsyncAgentScheduler verticle: keepAgents.nsf Domino REST API Roles Factories and Caches: KeepFactory &amp; KeepConfig HCL Tutorials, may reference KEEP HCL Documentation, images and image file names may reference KEEP"}]}